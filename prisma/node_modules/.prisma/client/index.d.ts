
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model statusmaster
 * 
 */
export type statusmaster = $Result.DefaultSelection<Prisma.$statusmasterPayload>
/**
 * Model productimage
 * 
 */
export type productimage = $Result.DefaultSelection<Prisma.$productimagePayload>
/**
 * Model thaiamphures
 * 
 */
export type thaiamphures = $Result.DefaultSelection<Prisma.$thaiamphuresPayload>
/**
 * Model thaigeographies
 * 
 */
export type thaigeographies = $Result.DefaultSelection<Prisma.$thaigeographiesPayload>
/**
 * Model thaiprovinces
 * 
 */
export type thaiprovinces = $Result.DefaultSelection<Prisma.$thaiprovincesPayload>
/**
 * Model thaitambons
 * 
 */
export type thaitambons = $Result.DefaultSelection<Prisma.$thaitambonsPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model OrderItem
 * 
 */
export type OrderItem = $Result.DefaultSelection<Prisma.$OrderItemPayload>
/**
 * Model CustomerInfo
 * 
 */
export type CustomerInfo = $Result.DefaultSelection<Prisma.$CustomerInfoPayload>
/**
 * Model ShippingInfo
 * 
 */
export type ShippingInfo = $Result.DefaultSelection<Prisma.$ShippingInfoPayload>
/**
 * Model PaymentInfo
 * 
 */
export type PaymentInfo = $Result.DefaultSelection<Prisma.$PaymentInfoPayload>
/**
 * Model PaymentConfirmation
 * 
 */
export type PaymentConfirmation = $Result.DefaultSelection<Prisma.$PaymentConfirmationPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model Blog
 * 
 */
export type Blog = $Result.DefaultSelection<Prisma.$BlogPayload>
/**
 * Model DiscountCode
 * 
 */
export type DiscountCode = $Result.DefaultSelection<Prisma.$DiscountCodePayload>
/**
 * Model PasswordReset
 * 
 */
export type PasswordReset = $Result.DefaultSelection<Prisma.$PasswordResetPayload>
/**
 * Model PendingPayment
 * 
 */
export type PendingPayment = $Result.DefaultSelection<Prisma.$PendingPaymentPayload>
/**
 * Model NotificationLog
 * 
 */
export type NotificationLog = $Result.DefaultSelection<Prisma.$NotificationLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const OrderStatus: {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  PAID: 'PAID',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]


export const PaymentMethod: {
  BANK_TRANSFER: 'BANK_TRANSFER',
  CREDIT_CARD: 'CREDIT_CARD',
  PROMPTPAY: 'PROMPTPAY',
  COD: 'COD'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const PaymentStatus: {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  REJECTED: 'REJECTED'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const users_isAdmin: {
  true: 'true',
  false: 'false'
};

export type users_isAdmin = (typeof users_isAdmin)[keyof typeof users_isAdmin]

}

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type users_isAdmin = $Enums.users_isAdmin

export const users_isAdmin: typeof $Enums.users_isAdmin

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Categories
 * const categories = await prisma.category.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Categories
   * const categories = await prisma.category.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.statusmaster`: Exposes CRUD operations for the **statusmaster** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statusmasters
    * const statusmasters = await prisma.statusmaster.findMany()
    * ```
    */
  get statusmaster(): Prisma.statusmasterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productimage`: Exposes CRUD operations for the **productimage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Productimages
    * const productimages = await prisma.productimage.findMany()
    * ```
    */
  get productimage(): Prisma.productimageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.thaiamphures`: Exposes CRUD operations for the **thaiamphures** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Thaiamphures
    * const thaiamphures = await prisma.thaiamphures.findMany()
    * ```
    */
  get thaiamphures(): Prisma.thaiamphuresDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.thaigeographies`: Exposes CRUD operations for the **thaigeographies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Thaigeographies
    * const thaigeographies = await prisma.thaigeographies.findMany()
    * ```
    */
  get thaigeographies(): Prisma.thaigeographiesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.thaiprovinces`: Exposes CRUD operations for the **thaiprovinces** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Thaiprovinces
    * const thaiprovinces = await prisma.thaiprovinces.findMany()
    * ```
    */
  get thaiprovinces(): Prisma.thaiprovincesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.thaitambons`: Exposes CRUD operations for the **thaitambons** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Thaitambons
    * const thaitambons = await prisma.thaitambons.findMany()
    * ```
    */
  get thaitambons(): Prisma.thaitambonsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderItem`: Exposes CRUD operations for the **OrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderItems
    * const orderItems = await prisma.orderItem.findMany()
    * ```
    */
  get orderItem(): Prisma.OrderItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customerInfo`: Exposes CRUD operations for the **CustomerInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerInfos
    * const customerInfos = await prisma.customerInfo.findMany()
    * ```
    */
  get customerInfo(): Prisma.CustomerInfoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shippingInfo`: Exposes CRUD operations for the **ShippingInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShippingInfos
    * const shippingInfos = await prisma.shippingInfo.findMany()
    * ```
    */
  get shippingInfo(): Prisma.ShippingInfoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paymentInfo`: Exposes CRUD operations for the **PaymentInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentInfos
    * const paymentInfos = await prisma.paymentInfo.findMany()
    * ```
    */
  get paymentInfo(): Prisma.PaymentInfoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paymentConfirmation`: Exposes CRUD operations for the **PaymentConfirmation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentConfirmations
    * const paymentConfirmations = await prisma.paymentConfirmation.findMany()
    * ```
    */
  get paymentConfirmation(): Prisma.PaymentConfirmationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.blog`: Exposes CRUD operations for the **Blog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Blogs
    * const blogs = await prisma.blog.findMany()
    * ```
    */
  get blog(): Prisma.BlogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.discountCode`: Exposes CRUD operations for the **DiscountCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DiscountCodes
    * const discountCodes = await prisma.discountCode.findMany()
    * ```
    */
  get discountCode(): Prisma.DiscountCodeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.passwordReset`: Exposes CRUD operations for the **PasswordReset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordResets
    * const passwordResets = await prisma.passwordReset.findMany()
    * ```
    */
  get passwordReset(): Prisma.PasswordResetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pendingPayment`: Exposes CRUD operations for the **PendingPayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PendingPayments
    * const pendingPayments = await prisma.pendingPayment.findMany()
    * ```
    */
  get pendingPayment(): Prisma.PendingPaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificationLog`: Exposes CRUD operations for the **NotificationLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationLogs
    * const notificationLogs = await prisma.notificationLog.findMany()
    * ```
    */
  get notificationLog(): Prisma.NotificationLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Category: 'Category',
    Product: 'Product',
    statusmaster: 'statusmaster',
    productimage: 'productimage',
    thaiamphures: 'thaiamphures',
    thaigeographies: 'thaigeographies',
    thaiprovinces: 'thaiprovinces',
    thaitambons: 'thaitambons',
    Order: 'Order',
    OrderItem: 'OrderItem',
    CustomerInfo: 'CustomerInfo',
    ShippingInfo: 'ShippingInfo',
    PaymentInfo: 'PaymentInfo',
    PaymentConfirmation: 'PaymentConfirmation',
    users: 'users',
    Blog: 'Blog',
    DiscountCode: 'DiscountCode',
    PasswordReset: 'PasswordReset',
    PendingPayment: 'PendingPayment',
    NotificationLog: 'NotificationLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "category" | "product" | "statusmaster" | "productimage" | "thaiamphures" | "thaigeographies" | "thaiprovinces" | "thaitambons" | "order" | "orderItem" | "customerInfo" | "shippingInfo" | "paymentInfo" | "paymentConfirmation" | "users" | "blog" | "discountCode" | "passwordReset" | "pendingPayment" | "notificationLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      statusmaster: {
        payload: Prisma.$statusmasterPayload<ExtArgs>
        fields: Prisma.statusmasterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.statusmasterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusmasterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.statusmasterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusmasterPayload>
          }
          findFirst: {
            args: Prisma.statusmasterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusmasterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.statusmasterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusmasterPayload>
          }
          findMany: {
            args: Prisma.statusmasterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusmasterPayload>[]
          }
          create: {
            args: Prisma.statusmasterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusmasterPayload>
          }
          createMany: {
            args: Prisma.statusmasterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.statusmasterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusmasterPayload>
          }
          update: {
            args: Prisma.statusmasterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusmasterPayload>
          }
          deleteMany: {
            args: Prisma.statusmasterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.statusmasterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.statusmasterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusmasterPayload>
          }
          aggregate: {
            args: Prisma.StatusmasterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatusmaster>
          }
          groupBy: {
            args: Prisma.statusmasterGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusmasterGroupByOutputType>[]
          }
          count: {
            args: Prisma.statusmasterCountArgs<ExtArgs>
            result: $Utils.Optional<StatusmasterCountAggregateOutputType> | number
          }
        }
      }
      productimage: {
        payload: Prisma.$productimagePayload<ExtArgs>
        fields: Prisma.productimageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productimageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productimagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productimageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productimagePayload>
          }
          findFirst: {
            args: Prisma.productimageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productimagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productimageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productimagePayload>
          }
          findMany: {
            args: Prisma.productimageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productimagePayload>[]
          }
          create: {
            args: Prisma.productimageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productimagePayload>
          }
          createMany: {
            args: Prisma.productimageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.productimageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productimagePayload>
          }
          update: {
            args: Prisma.productimageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productimagePayload>
          }
          deleteMany: {
            args: Prisma.productimageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.productimageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.productimageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productimagePayload>
          }
          aggregate: {
            args: Prisma.ProductimageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductimage>
          }
          groupBy: {
            args: Prisma.productimageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductimageGroupByOutputType>[]
          }
          count: {
            args: Prisma.productimageCountArgs<ExtArgs>
            result: $Utils.Optional<ProductimageCountAggregateOutputType> | number
          }
        }
      }
      thaiamphures: {
        payload: Prisma.$thaiamphuresPayload<ExtArgs>
        fields: Prisma.thaiamphuresFieldRefs
        operations: {
          findUnique: {
            args: Prisma.thaiamphuresFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaiamphuresPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.thaiamphuresFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaiamphuresPayload>
          }
          findFirst: {
            args: Prisma.thaiamphuresFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaiamphuresPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.thaiamphuresFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaiamphuresPayload>
          }
          findMany: {
            args: Prisma.thaiamphuresFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaiamphuresPayload>[]
          }
          create: {
            args: Prisma.thaiamphuresCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaiamphuresPayload>
          }
          createMany: {
            args: Prisma.thaiamphuresCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.thaiamphuresDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaiamphuresPayload>
          }
          update: {
            args: Prisma.thaiamphuresUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaiamphuresPayload>
          }
          deleteMany: {
            args: Prisma.thaiamphuresDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.thaiamphuresUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.thaiamphuresUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaiamphuresPayload>
          }
          aggregate: {
            args: Prisma.ThaiamphuresAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateThaiamphures>
          }
          groupBy: {
            args: Prisma.thaiamphuresGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThaiamphuresGroupByOutputType>[]
          }
          count: {
            args: Prisma.thaiamphuresCountArgs<ExtArgs>
            result: $Utils.Optional<ThaiamphuresCountAggregateOutputType> | number
          }
        }
      }
      thaigeographies: {
        payload: Prisma.$thaigeographiesPayload<ExtArgs>
        fields: Prisma.thaigeographiesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.thaigeographiesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaigeographiesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.thaigeographiesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaigeographiesPayload>
          }
          findFirst: {
            args: Prisma.thaigeographiesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaigeographiesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.thaigeographiesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaigeographiesPayload>
          }
          findMany: {
            args: Prisma.thaigeographiesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaigeographiesPayload>[]
          }
          create: {
            args: Prisma.thaigeographiesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaigeographiesPayload>
          }
          createMany: {
            args: Prisma.thaigeographiesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.thaigeographiesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaigeographiesPayload>
          }
          update: {
            args: Prisma.thaigeographiesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaigeographiesPayload>
          }
          deleteMany: {
            args: Prisma.thaigeographiesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.thaigeographiesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.thaigeographiesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaigeographiesPayload>
          }
          aggregate: {
            args: Prisma.ThaigeographiesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateThaigeographies>
          }
          groupBy: {
            args: Prisma.thaigeographiesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThaigeographiesGroupByOutputType>[]
          }
          count: {
            args: Prisma.thaigeographiesCountArgs<ExtArgs>
            result: $Utils.Optional<ThaigeographiesCountAggregateOutputType> | number
          }
        }
      }
      thaiprovinces: {
        payload: Prisma.$thaiprovincesPayload<ExtArgs>
        fields: Prisma.thaiprovincesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.thaiprovincesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaiprovincesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.thaiprovincesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaiprovincesPayload>
          }
          findFirst: {
            args: Prisma.thaiprovincesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaiprovincesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.thaiprovincesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaiprovincesPayload>
          }
          findMany: {
            args: Prisma.thaiprovincesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaiprovincesPayload>[]
          }
          create: {
            args: Prisma.thaiprovincesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaiprovincesPayload>
          }
          createMany: {
            args: Prisma.thaiprovincesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.thaiprovincesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaiprovincesPayload>
          }
          update: {
            args: Prisma.thaiprovincesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaiprovincesPayload>
          }
          deleteMany: {
            args: Prisma.thaiprovincesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.thaiprovincesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.thaiprovincesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaiprovincesPayload>
          }
          aggregate: {
            args: Prisma.ThaiprovincesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateThaiprovinces>
          }
          groupBy: {
            args: Prisma.thaiprovincesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThaiprovincesGroupByOutputType>[]
          }
          count: {
            args: Prisma.thaiprovincesCountArgs<ExtArgs>
            result: $Utils.Optional<ThaiprovincesCountAggregateOutputType> | number
          }
        }
      }
      thaitambons: {
        payload: Prisma.$thaitambonsPayload<ExtArgs>
        fields: Prisma.thaitambonsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.thaitambonsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaitambonsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.thaitambonsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaitambonsPayload>
          }
          findFirst: {
            args: Prisma.thaitambonsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaitambonsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.thaitambonsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaitambonsPayload>
          }
          findMany: {
            args: Prisma.thaitambonsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaitambonsPayload>[]
          }
          create: {
            args: Prisma.thaitambonsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaitambonsPayload>
          }
          createMany: {
            args: Prisma.thaitambonsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.thaitambonsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaitambonsPayload>
          }
          update: {
            args: Prisma.thaitambonsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaitambonsPayload>
          }
          deleteMany: {
            args: Prisma.thaitambonsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.thaitambonsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.thaitambonsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$thaitambonsPayload>
          }
          aggregate: {
            args: Prisma.ThaitambonsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateThaitambons>
          }
          groupBy: {
            args: Prisma.thaitambonsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThaitambonsGroupByOutputType>[]
          }
          count: {
            args: Prisma.thaitambonsCountArgs<ExtArgs>
            result: $Utils.Optional<ThaitambonsCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      OrderItem: {
        payload: Prisma.$OrderItemPayload<ExtArgs>
        fields: Prisma.OrderItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findFirst: {
            args: Prisma.OrderItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findMany: {
            args: Prisma.OrderItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          create: {
            args: Prisma.OrderItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          createMany: {
            args: Prisma.OrderItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OrderItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          update: {
            args: Prisma.OrderItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          deleteMany: {
            args: Prisma.OrderItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          aggregate: {
            args: Prisma.OrderItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderItem>
          }
          groupBy: {
            args: Prisma.OrderItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderItemCountArgs<ExtArgs>
            result: $Utils.Optional<OrderItemCountAggregateOutputType> | number
          }
        }
      }
      CustomerInfo: {
        payload: Prisma.$CustomerInfoPayload<ExtArgs>
        fields: Prisma.CustomerInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerInfoPayload>
          }
          findFirst: {
            args: Prisma.CustomerInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerInfoPayload>
          }
          findMany: {
            args: Prisma.CustomerInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerInfoPayload>[]
          }
          create: {
            args: Prisma.CustomerInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerInfoPayload>
          }
          createMany: {
            args: Prisma.CustomerInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CustomerInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerInfoPayload>
          }
          update: {
            args: Prisma.CustomerInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerInfoPayload>
          }
          deleteMany: {
            args: Prisma.CustomerInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CustomerInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerInfoPayload>
          }
          aggregate: {
            args: Prisma.CustomerInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomerInfo>
          }
          groupBy: {
            args: Prisma.CustomerInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerInfoCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerInfoCountAggregateOutputType> | number
          }
        }
      }
      ShippingInfo: {
        payload: Prisma.$ShippingInfoPayload<ExtArgs>
        fields: Prisma.ShippingInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShippingInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShippingInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShippingInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShippingInfoPayload>
          }
          findFirst: {
            args: Prisma.ShippingInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShippingInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShippingInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShippingInfoPayload>
          }
          findMany: {
            args: Prisma.ShippingInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShippingInfoPayload>[]
          }
          create: {
            args: Prisma.ShippingInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShippingInfoPayload>
          }
          createMany: {
            args: Prisma.ShippingInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ShippingInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShippingInfoPayload>
          }
          update: {
            args: Prisma.ShippingInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShippingInfoPayload>
          }
          deleteMany: {
            args: Prisma.ShippingInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShippingInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShippingInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShippingInfoPayload>
          }
          aggregate: {
            args: Prisma.ShippingInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShippingInfo>
          }
          groupBy: {
            args: Prisma.ShippingInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShippingInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShippingInfoCountArgs<ExtArgs>
            result: $Utils.Optional<ShippingInfoCountAggregateOutputType> | number
          }
        }
      }
      PaymentInfo: {
        payload: Prisma.$PaymentInfoPayload<ExtArgs>
        fields: Prisma.PaymentInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload>
          }
          findFirst: {
            args: Prisma.PaymentInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload>
          }
          findMany: {
            args: Prisma.PaymentInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload>[]
          }
          create: {
            args: Prisma.PaymentInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload>
          }
          createMany: {
            args: Prisma.PaymentInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PaymentInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload>
          }
          update: {
            args: Prisma.PaymentInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload>
          }
          deleteMany: {
            args: Prisma.PaymentInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload>
          }
          aggregate: {
            args: Prisma.PaymentInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentInfo>
          }
          groupBy: {
            args: Prisma.PaymentInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentInfoCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentInfoCountAggregateOutputType> | number
          }
        }
      }
      PaymentConfirmation: {
        payload: Prisma.$PaymentConfirmationPayload<ExtArgs>
        fields: Prisma.PaymentConfirmationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentConfirmationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfirmationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentConfirmationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfirmationPayload>
          }
          findFirst: {
            args: Prisma.PaymentConfirmationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfirmationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentConfirmationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfirmationPayload>
          }
          findMany: {
            args: Prisma.PaymentConfirmationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfirmationPayload>[]
          }
          create: {
            args: Prisma.PaymentConfirmationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfirmationPayload>
          }
          createMany: {
            args: Prisma.PaymentConfirmationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PaymentConfirmationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfirmationPayload>
          }
          update: {
            args: Prisma.PaymentConfirmationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfirmationPayload>
          }
          deleteMany: {
            args: Prisma.PaymentConfirmationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentConfirmationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentConfirmationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfirmationPayload>
          }
          aggregate: {
            args: Prisma.PaymentConfirmationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentConfirmation>
          }
          groupBy: {
            args: Prisma.PaymentConfirmationGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentConfirmationGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentConfirmationCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentConfirmationCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Blog: {
        payload: Prisma.$BlogPayload<ExtArgs>
        fields: Prisma.BlogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BlogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BlogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          findFirst: {
            args: Prisma.BlogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BlogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          findMany: {
            args: Prisma.BlogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>[]
          }
          create: {
            args: Prisma.BlogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          createMany: {
            args: Prisma.BlogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BlogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          update: {
            args: Prisma.BlogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          deleteMany: {
            args: Prisma.BlogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BlogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BlogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          aggregate: {
            args: Prisma.BlogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBlog>
          }
          groupBy: {
            args: Prisma.BlogGroupByArgs<ExtArgs>
            result: $Utils.Optional<BlogGroupByOutputType>[]
          }
          count: {
            args: Prisma.BlogCountArgs<ExtArgs>
            result: $Utils.Optional<BlogCountAggregateOutputType> | number
          }
        }
      }
      DiscountCode: {
        payload: Prisma.$DiscountCodePayload<ExtArgs>
        fields: Prisma.DiscountCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiscountCodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiscountCodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountCodePayload>
          }
          findFirst: {
            args: Prisma.DiscountCodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiscountCodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountCodePayload>
          }
          findMany: {
            args: Prisma.DiscountCodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountCodePayload>[]
          }
          create: {
            args: Prisma.DiscountCodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountCodePayload>
          }
          createMany: {
            args: Prisma.DiscountCodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DiscountCodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountCodePayload>
          }
          update: {
            args: Prisma.DiscountCodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountCodePayload>
          }
          deleteMany: {
            args: Prisma.DiscountCodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DiscountCodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DiscountCodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountCodePayload>
          }
          aggregate: {
            args: Prisma.DiscountCodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiscountCode>
          }
          groupBy: {
            args: Prisma.DiscountCodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiscountCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiscountCodeCountArgs<ExtArgs>
            result: $Utils.Optional<DiscountCodeCountAggregateOutputType> | number
          }
        }
      }
      PasswordReset: {
        payload: Prisma.$PasswordResetPayload<ExtArgs>
        fields: Prisma.PasswordResetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordResetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordResetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          findFirst: {
            args: Prisma.PasswordResetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordResetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          findMany: {
            args: Prisma.PasswordResetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>[]
          }
          create: {
            args: Prisma.PasswordResetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          createMany: {
            args: Prisma.PasswordResetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PasswordResetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          update: {
            args: Prisma.PasswordResetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          deleteMany: {
            args: Prisma.PasswordResetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordResetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PasswordResetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          aggregate: {
            args: Prisma.PasswordResetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordReset>
          }
          groupBy: {
            args: Prisma.PasswordResetGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordResetCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetCountAggregateOutputType> | number
          }
        }
      }
      PendingPayment: {
        payload: Prisma.$PendingPaymentPayload<ExtArgs>
        fields: Prisma.PendingPaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PendingPaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingPaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PendingPaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingPaymentPayload>
          }
          findFirst: {
            args: Prisma.PendingPaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingPaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PendingPaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingPaymentPayload>
          }
          findMany: {
            args: Prisma.PendingPaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingPaymentPayload>[]
          }
          create: {
            args: Prisma.PendingPaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingPaymentPayload>
          }
          createMany: {
            args: Prisma.PendingPaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PendingPaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingPaymentPayload>
          }
          update: {
            args: Prisma.PendingPaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingPaymentPayload>
          }
          deleteMany: {
            args: Prisma.PendingPaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PendingPaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PendingPaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingPaymentPayload>
          }
          aggregate: {
            args: Prisma.PendingPaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePendingPayment>
          }
          groupBy: {
            args: Prisma.PendingPaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PendingPaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PendingPaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PendingPaymentCountAggregateOutputType> | number
          }
        }
      }
      NotificationLog: {
        payload: Prisma.$NotificationLogPayload<ExtArgs>
        fields: Prisma.NotificationLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationLogPayload>
          }
          findFirst: {
            args: Prisma.NotificationLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationLogPayload>
          }
          findMany: {
            args: Prisma.NotificationLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationLogPayload>[]
          }
          create: {
            args: Prisma.NotificationLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationLogPayload>
          }
          createMany: {
            args: Prisma.NotificationLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NotificationLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationLogPayload>
          }
          update: {
            args: Prisma.NotificationLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationLogPayload>
          }
          deleteMany: {
            args: Prisma.NotificationLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationLogPayload>
          }
          aggregate: {
            args: Prisma.NotificationLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationLog>
          }
          groupBy: {
            args: Prisma.NotificationLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationLogCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    category?: CategoryOmit
    product?: ProductOmit
    statusmaster?: statusmasterOmit
    productimage?: productimageOmit
    thaiamphures?: thaiamphuresOmit
    thaigeographies?: thaigeographiesOmit
    thaiprovinces?: thaiprovincesOmit
    thaitambons?: thaitambonsOmit
    order?: OrderOmit
    orderItem?: OrderItemOmit
    customerInfo?: CustomerInfoOmit
    shippingInfo?: ShippingInfoOmit
    paymentInfo?: PaymentInfoOmit
    paymentConfirmation?: PaymentConfirmationOmit
    users?: usersOmit
    blog?: BlogOmit
    discountCode?: DiscountCodeOmit
    passwordReset?: PasswordResetOmit
    pendingPayment?: PendingPaymentOmit
    notificationLog?: NotificationLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    orderItems: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItems?: boolean | ProductCountOutputTypeCountOrderItemsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }


  /**
   * Count Type ThaiamphuresCountOutputType
   */

  export type ThaiamphuresCountOutputType = {
    shippingAddresses: number
  }

  export type ThaiamphuresCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shippingAddresses?: boolean | ThaiamphuresCountOutputTypeCountShippingAddressesArgs
  }

  // Custom InputTypes
  /**
   * ThaiamphuresCountOutputType without action
   */
  export type ThaiamphuresCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiamphuresCountOutputType
     */
    select?: ThaiamphuresCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ThaiamphuresCountOutputType without action
   */
  export type ThaiamphuresCountOutputTypeCountShippingAddressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShippingInfoWhereInput
  }


  /**
   * Count Type ThaiprovincesCountOutputType
   */

  export type ThaiprovincesCountOutputType = {
    shippingAddresses: number
  }

  export type ThaiprovincesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shippingAddresses?: boolean | ThaiprovincesCountOutputTypeCountShippingAddressesArgs
  }

  // Custom InputTypes
  /**
   * ThaiprovincesCountOutputType without action
   */
  export type ThaiprovincesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaiprovincesCountOutputType
     */
    select?: ThaiprovincesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ThaiprovincesCountOutputType without action
   */
  export type ThaiprovincesCountOutputTypeCountShippingAddressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShippingInfoWhereInput
  }


  /**
   * Count Type ThaitambonsCountOutputType
   */

  export type ThaitambonsCountOutputType = {
    shippingAddresses: number
  }

  export type ThaitambonsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shippingAddresses?: boolean | ThaitambonsCountOutputTypeCountShippingAddressesArgs
  }

  // Custom InputTypes
  /**
   * ThaitambonsCountOutputType without action
   */
  export type ThaitambonsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThaitambonsCountOutputType
     */
    select?: ThaitambonsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ThaitambonsCountOutputType without action
   */
  export type ThaitambonsCountOutputTypeCountShippingAddressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShippingInfoWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    orderItems: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItems?: boolean | OrderCountOutputTypeCountOrderItemsArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
    priority: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
    priority: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    categoryName: string | null
    categoryDesc: string | null
    priority: number | null
    status: string | null
    bestseller: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    categoryName: string | null
    categoryDesc: string | null
    priority: number | null
    status: string | null
    bestseller: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    categoryName: number
    categoryDesc: number
    priority: number
    status: number
    bestseller: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
    priority?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
    priority?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    categoryName?: true
    categoryDesc?: true
    priority?: true
    status?: true
    bestseller?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    categoryName?: true
    categoryDesc?: true
    priority?: true
    status?: true
    bestseller?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    categoryName?: true
    categoryDesc?: true
    priority?: true
    status?: true
    bestseller?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    categoryName: string | null
    categoryDesc: string | null
    priority: number | null
    status: string | null
    bestseller: string | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryName?: boolean
    categoryDesc?: boolean
    priority?: boolean
    status?: boolean
    bestseller?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["category"]>



  export type CategorySelectScalar = {
    id?: boolean
    categoryName?: boolean
    categoryDesc?: boolean
    priority?: boolean
    status?: boolean
    bestseller?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "categoryName" | "categoryDesc" | "priority" | "status" | "bestseller" | "createdAt" | "updatedAt", ExtArgs["result"]["category"]>

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categoryName: string | null
      categoryDesc: string | null
      priority: number | null
      status: string | null
      bestseller: string | null
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly categoryName: FieldRef<"Category", 'String'>
    readonly categoryDesc: FieldRef<"Category", 'String'>
    readonly priority: FieldRef<"Category", 'Int'>
    readonly status: FieldRef<"Category", 'String'>
    readonly bestseller: FieldRef<"Category", 'String'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data?: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    salesPrice: Decimal | null
    originalPrice: Decimal | null
    discount: number | null
    stock: number | null
    categoryId: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    salesPrice: Decimal | null
    originalPrice: Decimal | null
    discount: number | null
    stock: number | null
    categoryId: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    sku: string | null
    productImg: string | null
    productName: string | null
    slug: string | null
    productDesc: string | null
    salesPrice: Decimal | null
    originalPrice: Decimal | null
    discount: number | null
    potSize: string | null
    plantHeight: string | null
    preparationTime: string | null
    stock: number | null
    stockStatus: string | null
    category: string | null
    categoryId: number | null
    productStatus: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    sku: string | null
    productImg: string | null
    productName: string | null
    slug: string | null
    productDesc: string | null
    salesPrice: Decimal | null
    originalPrice: Decimal | null
    discount: number | null
    potSize: string | null
    plantHeight: string | null
    preparationTime: string | null
    stock: number | null
    stockStatus: string | null
    category: string | null
    categoryId: number | null
    productStatus: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    sku: number
    productImg: number
    productName: number
    slug: number
    productDesc: number
    salesPrice: number
    originalPrice: number
    discount: number
    potSize: number
    plantHeight: number
    preparationTime: number
    stock: number
    stockStatus: number
    category: number
    categoryId: number
    productStatus: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    salesPrice?: true
    originalPrice?: true
    discount?: true
    stock?: true
    categoryId?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    salesPrice?: true
    originalPrice?: true
    discount?: true
    stock?: true
    categoryId?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    sku?: true
    productImg?: true
    productName?: true
    slug?: true
    productDesc?: true
    salesPrice?: true
    originalPrice?: true
    discount?: true
    potSize?: true
    plantHeight?: true
    preparationTime?: true
    stock?: true
    stockStatus?: true
    category?: true
    categoryId?: true
    productStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    sku?: true
    productImg?: true
    productName?: true
    slug?: true
    productDesc?: true
    salesPrice?: true
    originalPrice?: true
    discount?: true
    potSize?: true
    plantHeight?: true
    preparationTime?: true
    stock?: true
    stockStatus?: true
    category?: true
    categoryId?: true
    productStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    sku?: true
    productImg?: true
    productName?: true
    slug?: true
    productDesc?: true
    salesPrice?: true
    originalPrice?: true
    discount?: true
    potSize?: true
    plantHeight?: true
    preparationTime?: true
    stock?: true
    stockStatus?: true
    category?: true
    categoryId?: true
    productStatus?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: number
    sku: string | null
    productImg: string | null
    productName: string | null
    slug: string | null
    productDesc: string | null
    salesPrice: Decimal | null
    originalPrice: Decimal | null
    discount: number | null
    potSize: string | null
    plantHeight: string | null
    preparationTime: string | null
    stock: number | null
    stockStatus: string | null
    category: string | null
    categoryId: number | null
    productStatus: string | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sku?: boolean
    productImg?: boolean
    productName?: boolean
    slug?: boolean
    productDesc?: boolean
    salesPrice?: boolean
    originalPrice?: boolean
    discount?: boolean
    potSize?: boolean
    plantHeight?: boolean
    preparationTime?: boolean
    stock?: boolean
    stockStatus?: boolean
    category?: boolean
    categoryId?: boolean
    productStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orderItems?: boolean | Product$orderItemsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>



  export type ProductSelectScalar = {
    id?: boolean
    sku?: boolean
    productImg?: boolean
    productName?: boolean
    slug?: boolean
    productDesc?: boolean
    salesPrice?: boolean
    originalPrice?: boolean
    discount?: boolean
    potSize?: boolean
    plantHeight?: boolean
    preparationTime?: boolean
    stock?: boolean
    stockStatus?: boolean
    category?: boolean
    categoryId?: boolean
    productStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sku" | "productImg" | "productName" | "slug" | "productDesc" | "salesPrice" | "originalPrice" | "discount" | "potSize" | "plantHeight" | "preparationTime" | "stock" | "stockStatus" | "category" | "categoryId" | "productStatus" | "createdAt" | "updatedAt", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItems?: boolean | Product$orderItemsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sku: string | null
      productImg: string | null
      productName: string | null
      slug: string | null
      productDesc: string | null
      salesPrice: Prisma.Decimal | null
      originalPrice: Prisma.Decimal | null
      discount: number | null
      potSize: string | null
      plantHeight: string | null
      preparationTime: string | null
      stock: number | null
      stockStatus: string | null
      category: string | null
      categoryId: number | null
      productStatus: string | null
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orderItems<T extends Product$orderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Product$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'Int'>
    readonly sku: FieldRef<"Product", 'String'>
    readonly productImg: FieldRef<"Product", 'String'>
    readonly productName: FieldRef<"Product", 'String'>
    readonly slug: FieldRef<"Product", 'String'>
    readonly productDesc: FieldRef<"Product", 'String'>
    readonly salesPrice: FieldRef<"Product", 'Decimal'>
    readonly originalPrice: FieldRef<"Product", 'Decimal'>
    readonly discount: FieldRef<"Product", 'Int'>
    readonly potSize: FieldRef<"Product", 'String'>
    readonly plantHeight: FieldRef<"Product", 'String'>
    readonly preparationTime: FieldRef<"Product", 'String'>
    readonly stock: FieldRef<"Product", 'Int'>
    readonly stockStatus: FieldRef<"Product", 'String'>
    readonly category: FieldRef<"Product", 'String'>
    readonly categoryId: FieldRef<"Product", 'Int'>
    readonly productStatus: FieldRef<"Product", 'String'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data?: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.orderItems
   */
  export type Product$orderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model statusmaster
   */

  export type AggregateStatusmaster = {
    _count: StatusmasterCountAggregateOutputType | null
    _avg: StatusmasterAvgAggregateOutputType | null
    _sum: StatusmasterSumAggregateOutputType | null
    _min: StatusmasterMinAggregateOutputType | null
    _max: StatusmasterMaxAggregateOutputType | null
  }

  export type StatusmasterAvgAggregateOutputType = {
    id: number | null
  }

  export type StatusmasterSumAggregateOutputType = {
    id: number | null
  }

  export type StatusmasterMinAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    desc: string | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StatusmasterMaxAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    desc: string | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StatusmasterCountAggregateOutputType = {
    id: number
    code: number
    name: number
    desc: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StatusmasterAvgAggregateInputType = {
    id?: true
  }

  export type StatusmasterSumAggregateInputType = {
    id?: true
  }

  export type StatusmasterMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    desc?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StatusmasterMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    desc?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StatusmasterCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    desc?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StatusmasterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which statusmaster to aggregate.
     */
    where?: statusmasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusmasters to fetch.
     */
    orderBy?: statusmasterOrderByWithRelationInput | statusmasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: statusmasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusmasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusmasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned statusmasters
    **/
    _count?: true | StatusmasterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusmasterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusmasterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusmasterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusmasterMaxAggregateInputType
  }

  export type GetStatusmasterAggregateType<T extends StatusmasterAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusmaster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusmaster[P]>
      : GetScalarType<T[P], AggregateStatusmaster[P]>
  }




  export type statusmasterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: statusmasterWhereInput
    orderBy?: statusmasterOrderByWithAggregationInput | statusmasterOrderByWithAggregationInput[]
    by: StatusmasterScalarFieldEnum[] | StatusmasterScalarFieldEnum
    having?: statusmasterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusmasterCountAggregateInputType | true
    _avg?: StatusmasterAvgAggregateInputType
    _sum?: StatusmasterSumAggregateInputType
    _min?: StatusmasterMinAggregateInputType
    _max?: StatusmasterMaxAggregateInputType
  }

  export type StatusmasterGroupByOutputType = {
    id: number
    code: string | null
    name: string | null
    desc: string | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: StatusmasterCountAggregateOutputType | null
    _avg: StatusmasterAvgAggregateOutputType | null
    _sum: StatusmasterSumAggregateOutputType | null
    _min: StatusmasterMinAggregateOutputType | null
    _max: StatusmasterMaxAggregateOutputType | null
  }

  type GetStatusmasterGroupByPayload<T extends statusmasterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusmasterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusmasterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusmasterGroupByOutputType[P]>
            : GetScalarType<T[P], StatusmasterGroupByOutputType[P]>
        }
      >
    >


  export type statusmasterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    desc?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["statusmaster"]>



  export type statusmasterSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    desc?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type statusmasterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "name" | "desc" | "type" | "createdAt" | "updatedAt", ExtArgs["result"]["statusmaster"]>

  export type $statusmasterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "statusmaster"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string | null
      name: string | null
      desc: string | null
      type: string | null
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["statusmaster"]>
    composites: {}
  }

  type statusmasterGetPayload<S extends boolean | null | undefined | statusmasterDefaultArgs> = $Result.GetResult<Prisma.$statusmasterPayload, S>

  type statusmasterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<statusmasterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusmasterCountAggregateInputType | true
    }

  export interface statusmasterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['statusmaster'], meta: { name: 'statusmaster' } }
    /**
     * Find zero or one Statusmaster that matches the filter.
     * @param {statusmasterFindUniqueArgs} args - Arguments to find a Statusmaster
     * @example
     * // Get one Statusmaster
     * const statusmaster = await prisma.statusmaster.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends statusmasterFindUniqueArgs>(args: SelectSubset<T, statusmasterFindUniqueArgs<ExtArgs>>): Prisma__statusmasterClient<$Result.GetResult<Prisma.$statusmasterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Statusmaster that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {statusmasterFindUniqueOrThrowArgs} args - Arguments to find a Statusmaster
     * @example
     * // Get one Statusmaster
     * const statusmaster = await prisma.statusmaster.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends statusmasterFindUniqueOrThrowArgs>(args: SelectSubset<T, statusmasterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__statusmasterClient<$Result.GetResult<Prisma.$statusmasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Statusmaster that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusmasterFindFirstArgs} args - Arguments to find a Statusmaster
     * @example
     * // Get one Statusmaster
     * const statusmaster = await prisma.statusmaster.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends statusmasterFindFirstArgs>(args?: SelectSubset<T, statusmasterFindFirstArgs<ExtArgs>>): Prisma__statusmasterClient<$Result.GetResult<Prisma.$statusmasterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Statusmaster that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusmasterFindFirstOrThrowArgs} args - Arguments to find a Statusmaster
     * @example
     * // Get one Statusmaster
     * const statusmaster = await prisma.statusmaster.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends statusmasterFindFirstOrThrowArgs>(args?: SelectSubset<T, statusmasterFindFirstOrThrowArgs<ExtArgs>>): Prisma__statusmasterClient<$Result.GetResult<Prisma.$statusmasterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Statusmasters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusmasterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statusmasters
     * const statusmasters = await prisma.statusmaster.findMany()
     * 
     * // Get first 10 Statusmasters
     * const statusmasters = await prisma.statusmaster.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusmasterWithIdOnly = await prisma.statusmaster.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends statusmasterFindManyArgs>(args?: SelectSubset<T, statusmasterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusmasterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Statusmaster.
     * @param {statusmasterCreateArgs} args - Arguments to create a Statusmaster.
     * @example
     * // Create one Statusmaster
     * const Statusmaster = await prisma.statusmaster.create({
     *   data: {
     *     // ... data to create a Statusmaster
     *   }
     * })
     * 
     */
    create<T extends statusmasterCreateArgs>(args: SelectSubset<T, statusmasterCreateArgs<ExtArgs>>): Prisma__statusmasterClient<$Result.GetResult<Prisma.$statusmasterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Statusmasters.
     * @param {statusmasterCreateManyArgs} args - Arguments to create many Statusmasters.
     * @example
     * // Create many Statusmasters
     * const statusmaster = await prisma.statusmaster.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends statusmasterCreateManyArgs>(args?: SelectSubset<T, statusmasterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Statusmaster.
     * @param {statusmasterDeleteArgs} args - Arguments to delete one Statusmaster.
     * @example
     * // Delete one Statusmaster
     * const Statusmaster = await prisma.statusmaster.delete({
     *   where: {
     *     // ... filter to delete one Statusmaster
     *   }
     * })
     * 
     */
    delete<T extends statusmasterDeleteArgs>(args: SelectSubset<T, statusmasterDeleteArgs<ExtArgs>>): Prisma__statusmasterClient<$Result.GetResult<Prisma.$statusmasterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Statusmaster.
     * @param {statusmasterUpdateArgs} args - Arguments to update one Statusmaster.
     * @example
     * // Update one Statusmaster
     * const statusmaster = await prisma.statusmaster.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends statusmasterUpdateArgs>(args: SelectSubset<T, statusmasterUpdateArgs<ExtArgs>>): Prisma__statusmasterClient<$Result.GetResult<Prisma.$statusmasterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Statusmasters.
     * @param {statusmasterDeleteManyArgs} args - Arguments to filter Statusmasters to delete.
     * @example
     * // Delete a few Statusmasters
     * const { count } = await prisma.statusmaster.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends statusmasterDeleteManyArgs>(args?: SelectSubset<T, statusmasterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statusmasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusmasterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statusmasters
     * const statusmaster = await prisma.statusmaster.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends statusmasterUpdateManyArgs>(args: SelectSubset<T, statusmasterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Statusmaster.
     * @param {statusmasterUpsertArgs} args - Arguments to update or create a Statusmaster.
     * @example
     * // Update or create a Statusmaster
     * const statusmaster = await prisma.statusmaster.upsert({
     *   create: {
     *     // ... data to create a Statusmaster
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Statusmaster we want to update
     *   }
     * })
     */
    upsert<T extends statusmasterUpsertArgs>(args: SelectSubset<T, statusmasterUpsertArgs<ExtArgs>>): Prisma__statusmasterClient<$Result.GetResult<Prisma.$statusmasterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Statusmasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusmasterCountArgs} args - Arguments to filter Statusmasters to count.
     * @example
     * // Count the number of Statusmasters
     * const count = await prisma.statusmaster.count({
     *   where: {
     *     // ... the filter for the Statusmasters we want to count
     *   }
     * })
    **/
    count<T extends statusmasterCountArgs>(
      args?: Subset<T, statusmasterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusmasterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Statusmaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusmasterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusmasterAggregateArgs>(args: Subset<T, StatusmasterAggregateArgs>): Prisma.PrismaPromise<GetStatusmasterAggregateType<T>>

    /**
     * Group by Statusmaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusmasterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends statusmasterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: statusmasterGroupByArgs['orderBy'] }
        : { orderBy?: statusmasterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, statusmasterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusmasterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the statusmaster model
   */
  readonly fields: statusmasterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for statusmaster.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__statusmasterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the statusmaster model
   */
  interface statusmasterFieldRefs {
    readonly id: FieldRef<"statusmaster", 'Int'>
    readonly code: FieldRef<"statusmaster", 'String'>
    readonly name: FieldRef<"statusmaster", 'String'>
    readonly desc: FieldRef<"statusmaster", 'String'>
    readonly type: FieldRef<"statusmaster", 'String'>
    readonly createdAt: FieldRef<"statusmaster", 'DateTime'>
    readonly updatedAt: FieldRef<"statusmaster", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * statusmaster findUnique
   */
  export type statusmasterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusmaster
     */
    select?: statusmasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusmaster
     */
    omit?: statusmasterOmit<ExtArgs> | null
    /**
     * Filter, which statusmaster to fetch.
     */
    where: statusmasterWhereUniqueInput
  }

  /**
   * statusmaster findUniqueOrThrow
   */
  export type statusmasterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusmaster
     */
    select?: statusmasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusmaster
     */
    omit?: statusmasterOmit<ExtArgs> | null
    /**
     * Filter, which statusmaster to fetch.
     */
    where: statusmasterWhereUniqueInput
  }

  /**
   * statusmaster findFirst
   */
  export type statusmasterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusmaster
     */
    select?: statusmasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusmaster
     */
    omit?: statusmasterOmit<ExtArgs> | null
    /**
     * Filter, which statusmaster to fetch.
     */
    where?: statusmasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusmasters to fetch.
     */
    orderBy?: statusmasterOrderByWithRelationInput | statusmasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statusmasters.
     */
    cursor?: statusmasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusmasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusmasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statusmasters.
     */
    distinct?: StatusmasterScalarFieldEnum | StatusmasterScalarFieldEnum[]
  }

  /**
   * statusmaster findFirstOrThrow
   */
  export type statusmasterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusmaster
     */
    select?: statusmasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusmaster
     */
    omit?: statusmasterOmit<ExtArgs> | null
    /**
     * Filter, which statusmaster to fetch.
     */
    where?: statusmasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusmasters to fetch.
     */
    orderBy?: statusmasterOrderByWithRelationInput | statusmasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statusmasters.
     */
    cursor?: statusmasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusmasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusmasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statusmasters.
     */
    distinct?: StatusmasterScalarFieldEnum | StatusmasterScalarFieldEnum[]
  }

  /**
   * statusmaster findMany
   */
  export type statusmasterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusmaster
     */
    select?: statusmasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusmaster
     */
    omit?: statusmasterOmit<ExtArgs> | null
    /**
     * Filter, which statusmasters to fetch.
     */
    where?: statusmasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statusmasters to fetch.
     */
    orderBy?: statusmasterOrderByWithRelationInput | statusmasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing statusmasters.
     */
    cursor?: statusmasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statusmasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statusmasters.
     */
    skip?: number
    distinct?: StatusmasterScalarFieldEnum | StatusmasterScalarFieldEnum[]
  }

  /**
   * statusmaster create
   */
  export type statusmasterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusmaster
     */
    select?: statusmasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusmaster
     */
    omit?: statusmasterOmit<ExtArgs> | null
    /**
     * The data needed to create a statusmaster.
     */
    data?: XOR<statusmasterCreateInput, statusmasterUncheckedCreateInput>
  }

  /**
   * statusmaster createMany
   */
  export type statusmasterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many statusmasters.
     */
    data: statusmasterCreateManyInput | statusmasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * statusmaster update
   */
  export type statusmasterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusmaster
     */
    select?: statusmasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusmaster
     */
    omit?: statusmasterOmit<ExtArgs> | null
    /**
     * The data needed to update a statusmaster.
     */
    data: XOR<statusmasterUpdateInput, statusmasterUncheckedUpdateInput>
    /**
     * Choose, which statusmaster to update.
     */
    where: statusmasterWhereUniqueInput
  }

  /**
   * statusmaster updateMany
   */
  export type statusmasterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update statusmasters.
     */
    data: XOR<statusmasterUpdateManyMutationInput, statusmasterUncheckedUpdateManyInput>
    /**
     * Filter which statusmasters to update
     */
    where?: statusmasterWhereInput
    /**
     * Limit how many statusmasters to update.
     */
    limit?: number
  }

  /**
   * statusmaster upsert
   */
  export type statusmasterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusmaster
     */
    select?: statusmasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusmaster
     */
    omit?: statusmasterOmit<ExtArgs> | null
    /**
     * The filter to search for the statusmaster to update in case it exists.
     */
    where: statusmasterWhereUniqueInput
    /**
     * In case the statusmaster found by the `where` argument doesn't exist, create a new statusmaster with this data.
     */
    create: XOR<statusmasterCreateInput, statusmasterUncheckedCreateInput>
    /**
     * In case the statusmaster was found with the provided `where` argument, update it with this data.
     */
    update: XOR<statusmasterUpdateInput, statusmasterUncheckedUpdateInput>
  }

  /**
   * statusmaster delete
   */
  export type statusmasterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusmaster
     */
    select?: statusmasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusmaster
     */
    omit?: statusmasterOmit<ExtArgs> | null
    /**
     * Filter which statusmaster to delete.
     */
    where: statusmasterWhereUniqueInput
  }

  /**
   * statusmaster deleteMany
   */
  export type statusmasterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which statusmasters to delete
     */
    where?: statusmasterWhereInput
    /**
     * Limit how many statusmasters to delete.
     */
    limit?: number
  }

  /**
   * statusmaster without action
   */
  export type statusmasterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statusmaster
     */
    select?: statusmasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the statusmaster
     */
    omit?: statusmasterOmit<ExtArgs> | null
  }


  /**
   * Model productimage
   */

  export type AggregateProductimage = {
    _count: ProductimageCountAggregateOutputType | null
    _avg: ProductimageAvgAggregateOutputType | null
    _sum: ProductimageSumAggregateOutputType | null
    _min: ProductimageMinAggregateOutputType | null
    _max: ProductimageMaxAggregateOutputType | null
  }

  export type ProductimageAvgAggregateOutputType = {
    id: number | null
    productId: number | null
  }

  export type ProductimageSumAggregateOutputType = {
    id: number | null
    productId: number | null
  }

  export type ProductimageMinAggregateOutputType = {
    id: number | null
    productId: number | null
    imageName: string | null
    imageDesc: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductimageMaxAggregateOutputType = {
    id: number | null
    productId: number | null
    imageName: string | null
    imageDesc: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductimageCountAggregateOutputType = {
    id: number
    productId: number
    imageName: number
    imageDesc: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductimageAvgAggregateInputType = {
    id?: true
    productId?: true
  }

  export type ProductimageSumAggregateInputType = {
    id?: true
    productId?: true
  }

  export type ProductimageMinAggregateInputType = {
    id?: true
    productId?: true
    imageName?: true
    imageDesc?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductimageMaxAggregateInputType = {
    id?: true
    productId?: true
    imageName?: true
    imageDesc?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductimageCountAggregateInputType = {
    id?: true
    productId?: true
    imageName?: true
    imageDesc?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductimageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which productimage to aggregate.
     */
    where?: productimageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productimages to fetch.
     */
    orderBy?: productimageOrderByWithRelationInput | productimageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productimageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productimages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productimages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned productimages
    **/
    _count?: true | ProductimageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductimageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductimageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductimageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductimageMaxAggregateInputType
  }

  export type GetProductimageAggregateType<T extends ProductimageAggregateArgs> = {
        [P in keyof T & keyof AggregateProductimage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductimage[P]>
      : GetScalarType<T[P], AggregateProductimage[P]>
  }




  export type productimageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productimageWhereInput
    orderBy?: productimageOrderByWithAggregationInput | productimageOrderByWithAggregationInput[]
    by: ProductimageScalarFieldEnum[] | ProductimageScalarFieldEnum
    having?: productimageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductimageCountAggregateInputType | true
    _avg?: ProductimageAvgAggregateInputType
    _sum?: ProductimageSumAggregateInputType
    _min?: ProductimageMinAggregateInputType
    _max?: ProductimageMaxAggregateInputType
  }

  export type ProductimageGroupByOutputType = {
    id: number
    productId: number | null
    imageName: string | null
    imageDesc: string | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: ProductimageCountAggregateOutputType | null
    _avg: ProductimageAvgAggregateOutputType | null
    _sum: ProductimageSumAggregateOutputType | null
    _min: ProductimageMinAggregateOutputType | null
    _max: ProductimageMaxAggregateOutputType | null
  }

  type GetProductimageGroupByPayload<T extends productimageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductimageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductimageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductimageGroupByOutputType[P]>
            : GetScalarType<T[P], ProductimageGroupByOutputType[P]>
        }
      >
    >


  export type productimageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    imageName?: boolean
    imageDesc?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["productimage"]>



  export type productimageSelectScalar = {
    id?: boolean
    productId?: boolean
    imageName?: boolean
    imageDesc?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type productimageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "imageName" | "imageDesc" | "createdAt" | "updatedAt", ExtArgs["result"]["productimage"]>

  export type $productimagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "productimage"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      productId: number | null
      imageName: string | null
      imageDesc: string | null
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["productimage"]>
    composites: {}
  }

  type productimageGetPayload<S extends boolean | null | undefined | productimageDefaultArgs> = $Result.GetResult<Prisma.$productimagePayload, S>

  type productimageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<productimageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductimageCountAggregateInputType | true
    }

  export interface productimageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['productimage'], meta: { name: 'productimage' } }
    /**
     * Find zero or one Productimage that matches the filter.
     * @param {productimageFindUniqueArgs} args - Arguments to find a Productimage
     * @example
     * // Get one Productimage
     * const productimage = await prisma.productimage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends productimageFindUniqueArgs>(args: SelectSubset<T, productimageFindUniqueArgs<ExtArgs>>): Prisma__productimageClient<$Result.GetResult<Prisma.$productimagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Productimage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {productimageFindUniqueOrThrowArgs} args - Arguments to find a Productimage
     * @example
     * // Get one Productimage
     * const productimage = await prisma.productimage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends productimageFindUniqueOrThrowArgs>(args: SelectSubset<T, productimageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__productimageClient<$Result.GetResult<Prisma.$productimagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Productimage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productimageFindFirstArgs} args - Arguments to find a Productimage
     * @example
     * // Get one Productimage
     * const productimage = await prisma.productimage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends productimageFindFirstArgs>(args?: SelectSubset<T, productimageFindFirstArgs<ExtArgs>>): Prisma__productimageClient<$Result.GetResult<Prisma.$productimagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Productimage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productimageFindFirstOrThrowArgs} args - Arguments to find a Productimage
     * @example
     * // Get one Productimage
     * const productimage = await prisma.productimage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends productimageFindFirstOrThrowArgs>(args?: SelectSubset<T, productimageFindFirstOrThrowArgs<ExtArgs>>): Prisma__productimageClient<$Result.GetResult<Prisma.$productimagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Productimages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productimageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Productimages
     * const productimages = await prisma.productimage.findMany()
     * 
     * // Get first 10 Productimages
     * const productimages = await prisma.productimage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productimageWithIdOnly = await prisma.productimage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends productimageFindManyArgs>(args?: SelectSubset<T, productimageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productimagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Productimage.
     * @param {productimageCreateArgs} args - Arguments to create a Productimage.
     * @example
     * // Create one Productimage
     * const Productimage = await prisma.productimage.create({
     *   data: {
     *     // ... data to create a Productimage
     *   }
     * })
     * 
     */
    create<T extends productimageCreateArgs>(args: SelectSubset<T, productimageCreateArgs<ExtArgs>>): Prisma__productimageClient<$Result.GetResult<Prisma.$productimagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Productimages.
     * @param {productimageCreateManyArgs} args - Arguments to create many Productimages.
     * @example
     * // Create many Productimages
     * const productimage = await prisma.productimage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends productimageCreateManyArgs>(args?: SelectSubset<T, productimageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Productimage.
     * @param {productimageDeleteArgs} args - Arguments to delete one Productimage.
     * @example
     * // Delete one Productimage
     * const Productimage = await prisma.productimage.delete({
     *   where: {
     *     // ... filter to delete one Productimage
     *   }
     * })
     * 
     */
    delete<T extends productimageDeleteArgs>(args: SelectSubset<T, productimageDeleteArgs<ExtArgs>>): Prisma__productimageClient<$Result.GetResult<Prisma.$productimagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Productimage.
     * @param {productimageUpdateArgs} args - Arguments to update one Productimage.
     * @example
     * // Update one Productimage
     * const productimage = await prisma.productimage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends productimageUpdateArgs>(args: SelectSubset<T, productimageUpdateArgs<ExtArgs>>): Prisma__productimageClient<$Result.GetResult<Prisma.$productimagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Productimages.
     * @param {productimageDeleteManyArgs} args - Arguments to filter Productimages to delete.
     * @example
     * // Delete a few Productimages
     * const { count } = await prisma.productimage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends productimageDeleteManyArgs>(args?: SelectSubset<T, productimageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Productimages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productimageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Productimages
     * const productimage = await prisma.productimage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends productimageUpdateManyArgs>(args: SelectSubset<T, productimageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Productimage.
     * @param {productimageUpsertArgs} args - Arguments to update or create a Productimage.
     * @example
     * // Update or create a Productimage
     * const productimage = await prisma.productimage.upsert({
     *   create: {
     *     // ... data to create a Productimage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Productimage we want to update
     *   }
     * })
     */
    upsert<T extends productimageUpsertArgs>(args: SelectSubset<T, productimageUpsertArgs<ExtArgs>>): Prisma__productimageClient<$Result.GetResult<Prisma.$productimagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Productimages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productimageCountArgs} args - Arguments to filter Productimages to count.
     * @example
     * // Count the number of Productimages
     * const count = await prisma.productimage.count({
     *   where: {
     *     // ... the filter for the Productimages we want to count
     *   }
     * })
    **/
    count<T extends productimageCountArgs>(
      args?: Subset<T, productimageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductimageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Productimage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductimageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductimageAggregateArgs>(args: Subset<T, ProductimageAggregateArgs>): Prisma.PrismaPromise<GetProductimageAggregateType<T>>

    /**
     * Group by Productimage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productimageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productimageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productimageGroupByArgs['orderBy'] }
        : { orderBy?: productimageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productimageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductimageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the productimage model
   */
  readonly fields: productimageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for productimage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productimageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the productimage model
   */
  interface productimageFieldRefs {
    readonly id: FieldRef<"productimage", 'Int'>
    readonly productId: FieldRef<"productimage", 'Int'>
    readonly imageName: FieldRef<"productimage", 'String'>
    readonly imageDesc: FieldRef<"productimage", 'String'>
    readonly createdAt: FieldRef<"productimage", 'DateTime'>
    readonly updatedAt: FieldRef<"productimage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * productimage findUnique
   */
  export type productimageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productimage
     */
    select?: productimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productimage
     */
    omit?: productimageOmit<ExtArgs> | null
    /**
     * Filter, which productimage to fetch.
     */
    where: productimageWhereUniqueInput
  }

  /**
   * productimage findUniqueOrThrow
   */
  export type productimageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productimage
     */
    select?: productimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productimage
     */
    omit?: productimageOmit<ExtArgs> | null
    /**
     * Filter, which productimage to fetch.
     */
    where: productimageWhereUniqueInput
  }

  /**
   * productimage findFirst
   */
  export type productimageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productimage
     */
    select?: productimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productimage
     */
    omit?: productimageOmit<ExtArgs> | null
    /**
     * Filter, which productimage to fetch.
     */
    where?: productimageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productimages to fetch.
     */
    orderBy?: productimageOrderByWithRelationInput | productimageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productimages.
     */
    cursor?: productimageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productimages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productimages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productimages.
     */
    distinct?: ProductimageScalarFieldEnum | ProductimageScalarFieldEnum[]
  }

  /**
   * productimage findFirstOrThrow
   */
  export type productimageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productimage
     */
    select?: productimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productimage
     */
    omit?: productimageOmit<ExtArgs> | null
    /**
     * Filter, which productimage to fetch.
     */
    where?: productimageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productimages to fetch.
     */
    orderBy?: productimageOrderByWithRelationInput | productimageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productimages.
     */
    cursor?: productimageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productimages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productimages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productimages.
     */
    distinct?: ProductimageScalarFieldEnum | ProductimageScalarFieldEnum[]
  }

  /**
   * productimage findMany
   */
  export type productimageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productimage
     */
    select?: productimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productimage
     */
    omit?: productimageOmit<ExtArgs> | null
    /**
     * Filter, which productimages to fetch.
     */
    where?: productimageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productimages to fetch.
     */
    orderBy?: productimageOrderByWithRelationInput | productimageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing productimages.
     */
    cursor?: productimageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productimages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productimages.
     */
    skip?: number
    distinct?: ProductimageScalarFieldEnum | ProductimageScalarFieldEnum[]
  }

  /**
   * productimage create
   */
  export type productimageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productimage
     */
    select?: productimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productimage
     */
    omit?: productimageOmit<ExtArgs> | null
    /**
     * The data needed to create a productimage.
     */
    data?: XOR<productimageCreateInput, productimageUncheckedCreateInput>
  }

  /**
   * productimage createMany
   */
  export type productimageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many productimages.
     */
    data: productimageCreateManyInput | productimageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * productimage update
   */
  export type productimageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productimage
     */
    select?: productimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productimage
     */
    omit?: productimageOmit<ExtArgs> | null
    /**
     * The data needed to update a productimage.
     */
    data: XOR<productimageUpdateInput, productimageUncheckedUpdateInput>
    /**
     * Choose, which productimage to update.
     */
    where: productimageWhereUniqueInput
  }

  /**
   * productimage updateMany
   */
  export type productimageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update productimages.
     */
    data: XOR<productimageUpdateManyMutationInput, productimageUncheckedUpdateManyInput>
    /**
     * Filter which productimages to update
     */
    where?: productimageWhereInput
    /**
     * Limit how many productimages to update.
     */
    limit?: number
  }

  /**
   * productimage upsert
   */
  export type productimageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productimage
     */
    select?: productimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productimage
     */
    omit?: productimageOmit<ExtArgs> | null
    /**
     * The filter to search for the productimage to update in case it exists.
     */
    where: productimageWhereUniqueInput
    /**
     * In case the productimage found by the `where` argument doesn't exist, create a new productimage with this data.
     */
    create: XOR<productimageCreateInput, productimageUncheckedCreateInput>
    /**
     * In case the productimage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productimageUpdateInput, productimageUncheckedUpdateInput>
  }

  /**
   * productimage delete
   */
  export type productimageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productimage
     */
    select?: productimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productimage
     */
    omit?: productimageOmit<ExtArgs> | null
    /**
     * Filter which productimage to delete.
     */
    where: productimageWhereUniqueInput
  }

  /**
   * productimage deleteMany
   */
  export type productimageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which productimages to delete
     */
    where?: productimageWhereInput
    /**
     * Limit how many productimages to delete.
     */
    limit?: number
  }

  /**
   * productimage without action
   */
  export type productimageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productimage
     */
    select?: productimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productimage
     */
    omit?: productimageOmit<ExtArgs> | null
  }


  /**
   * Model thaiamphures
   */

  export type AggregateThaiamphures = {
    _count: ThaiamphuresCountAggregateOutputType | null
    _avg: ThaiamphuresAvgAggregateOutputType | null
    _sum: ThaiamphuresSumAggregateOutputType | null
    _min: ThaiamphuresMinAggregateOutputType | null
    _max: ThaiamphuresMaxAggregateOutputType | null
  }

  export type ThaiamphuresAvgAggregateOutputType = {
    id: number | null
    provinceId: number | null
  }

  export type ThaiamphuresSumAggregateOutputType = {
    id: number | null
    provinceId: number | null
  }

  export type ThaiamphuresMinAggregateOutputType = {
    id: number | null
    nameTh: string | null
    nameEn: string | null
    provinceId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type ThaiamphuresMaxAggregateOutputType = {
    id: number | null
    nameTh: string | null
    nameEn: string | null
    provinceId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type ThaiamphuresCountAggregateOutputType = {
    id: number
    nameTh: number
    nameEn: number
    provinceId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type ThaiamphuresAvgAggregateInputType = {
    id?: true
    provinceId?: true
  }

  export type ThaiamphuresSumAggregateInputType = {
    id?: true
    provinceId?: true
  }

  export type ThaiamphuresMinAggregateInputType = {
    id?: true
    nameTh?: true
    nameEn?: true
    provinceId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ThaiamphuresMaxAggregateInputType = {
    id?: true
    nameTh?: true
    nameEn?: true
    provinceId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ThaiamphuresCountAggregateInputType = {
    id?: true
    nameTh?: true
    nameEn?: true
    provinceId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type ThaiamphuresAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which thaiamphures to aggregate.
     */
    where?: thaiamphuresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thaiamphures to fetch.
     */
    orderBy?: thaiamphuresOrderByWithRelationInput | thaiamphuresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: thaiamphuresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thaiamphures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thaiamphures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned thaiamphures
    **/
    _count?: true | ThaiamphuresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThaiamphuresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThaiamphuresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThaiamphuresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThaiamphuresMaxAggregateInputType
  }

  export type GetThaiamphuresAggregateType<T extends ThaiamphuresAggregateArgs> = {
        [P in keyof T & keyof AggregateThaiamphures]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThaiamphures[P]>
      : GetScalarType<T[P], AggregateThaiamphures[P]>
  }




  export type thaiamphuresGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: thaiamphuresWhereInput
    orderBy?: thaiamphuresOrderByWithAggregationInput | thaiamphuresOrderByWithAggregationInput[]
    by: ThaiamphuresScalarFieldEnum[] | ThaiamphuresScalarFieldEnum
    having?: thaiamphuresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThaiamphuresCountAggregateInputType | true
    _avg?: ThaiamphuresAvgAggregateInputType
    _sum?: ThaiamphuresSumAggregateInputType
    _min?: ThaiamphuresMinAggregateInputType
    _max?: ThaiamphuresMaxAggregateInputType
  }

  export type ThaiamphuresGroupByOutputType = {
    id: number
    nameTh: string
    nameEn: string
    provinceId: number
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
    _count: ThaiamphuresCountAggregateOutputType | null
    _avg: ThaiamphuresAvgAggregateOutputType | null
    _sum: ThaiamphuresSumAggregateOutputType | null
    _min: ThaiamphuresMinAggregateOutputType | null
    _max: ThaiamphuresMaxAggregateOutputType | null
  }

  type GetThaiamphuresGroupByPayload<T extends thaiamphuresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThaiamphuresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThaiamphuresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThaiamphuresGroupByOutputType[P]>
            : GetScalarType<T[P], ThaiamphuresGroupByOutputType[P]>
        }
      >
    >


  export type thaiamphuresSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameTh?: boolean
    nameEn?: boolean
    provinceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    shippingAddresses?: boolean | thaiamphures$shippingAddressesArgs<ExtArgs>
    _count?: boolean | ThaiamphuresCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thaiamphures"]>



  export type thaiamphuresSelectScalar = {
    id?: boolean
    nameTh?: boolean
    nameEn?: boolean
    provinceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type thaiamphuresOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameTh" | "nameEn" | "provinceId" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["thaiamphures"]>
  export type thaiamphuresInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shippingAddresses?: boolean | thaiamphures$shippingAddressesArgs<ExtArgs>
    _count?: boolean | ThaiamphuresCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $thaiamphuresPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "thaiamphures"
    objects: {
      shippingAddresses: Prisma.$ShippingInfoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nameTh: string
      nameEn: string
      provinceId: number
      createdAt: Date | null
      updatedAt: Date | null
      deletedAt: Date | null
    }, ExtArgs["result"]["thaiamphures"]>
    composites: {}
  }

  type thaiamphuresGetPayload<S extends boolean | null | undefined | thaiamphuresDefaultArgs> = $Result.GetResult<Prisma.$thaiamphuresPayload, S>

  type thaiamphuresCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<thaiamphuresFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ThaiamphuresCountAggregateInputType | true
    }

  export interface thaiamphuresDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['thaiamphures'], meta: { name: 'thaiamphures' } }
    /**
     * Find zero or one Thaiamphures that matches the filter.
     * @param {thaiamphuresFindUniqueArgs} args - Arguments to find a Thaiamphures
     * @example
     * // Get one Thaiamphures
     * const thaiamphures = await prisma.thaiamphures.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends thaiamphuresFindUniqueArgs>(args: SelectSubset<T, thaiamphuresFindUniqueArgs<ExtArgs>>): Prisma__thaiamphuresClient<$Result.GetResult<Prisma.$thaiamphuresPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Thaiamphures that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {thaiamphuresFindUniqueOrThrowArgs} args - Arguments to find a Thaiamphures
     * @example
     * // Get one Thaiamphures
     * const thaiamphures = await prisma.thaiamphures.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends thaiamphuresFindUniqueOrThrowArgs>(args: SelectSubset<T, thaiamphuresFindUniqueOrThrowArgs<ExtArgs>>): Prisma__thaiamphuresClient<$Result.GetResult<Prisma.$thaiamphuresPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Thaiamphures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaiamphuresFindFirstArgs} args - Arguments to find a Thaiamphures
     * @example
     * // Get one Thaiamphures
     * const thaiamphures = await prisma.thaiamphures.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends thaiamphuresFindFirstArgs>(args?: SelectSubset<T, thaiamphuresFindFirstArgs<ExtArgs>>): Prisma__thaiamphuresClient<$Result.GetResult<Prisma.$thaiamphuresPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Thaiamphures that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaiamphuresFindFirstOrThrowArgs} args - Arguments to find a Thaiamphures
     * @example
     * // Get one Thaiamphures
     * const thaiamphures = await prisma.thaiamphures.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends thaiamphuresFindFirstOrThrowArgs>(args?: SelectSubset<T, thaiamphuresFindFirstOrThrowArgs<ExtArgs>>): Prisma__thaiamphuresClient<$Result.GetResult<Prisma.$thaiamphuresPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Thaiamphures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaiamphuresFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Thaiamphures
     * const thaiamphures = await prisma.thaiamphures.findMany()
     * 
     * // Get first 10 Thaiamphures
     * const thaiamphures = await prisma.thaiamphures.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const thaiamphuresWithIdOnly = await prisma.thaiamphures.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends thaiamphuresFindManyArgs>(args?: SelectSubset<T, thaiamphuresFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$thaiamphuresPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Thaiamphures.
     * @param {thaiamphuresCreateArgs} args - Arguments to create a Thaiamphures.
     * @example
     * // Create one Thaiamphures
     * const Thaiamphures = await prisma.thaiamphures.create({
     *   data: {
     *     // ... data to create a Thaiamphures
     *   }
     * })
     * 
     */
    create<T extends thaiamphuresCreateArgs>(args: SelectSubset<T, thaiamphuresCreateArgs<ExtArgs>>): Prisma__thaiamphuresClient<$Result.GetResult<Prisma.$thaiamphuresPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Thaiamphures.
     * @param {thaiamphuresCreateManyArgs} args - Arguments to create many Thaiamphures.
     * @example
     * // Create many Thaiamphures
     * const thaiamphures = await prisma.thaiamphures.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends thaiamphuresCreateManyArgs>(args?: SelectSubset<T, thaiamphuresCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Thaiamphures.
     * @param {thaiamphuresDeleteArgs} args - Arguments to delete one Thaiamphures.
     * @example
     * // Delete one Thaiamphures
     * const Thaiamphures = await prisma.thaiamphures.delete({
     *   where: {
     *     // ... filter to delete one Thaiamphures
     *   }
     * })
     * 
     */
    delete<T extends thaiamphuresDeleteArgs>(args: SelectSubset<T, thaiamphuresDeleteArgs<ExtArgs>>): Prisma__thaiamphuresClient<$Result.GetResult<Prisma.$thaiamphuresPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Thaiamphures.
     * @param {thaiamphuresUpdateArgs} args - Arguments to update one Thaiamphures.
     * @example
     * // Update one Thaiamphures
     * const thaiamphures = await prisma.thaiamphures.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends thaiamphuresUpdateArgs>(args: SelectSubset<T, thaiamphuresUpdateArgs<ExtArgs>>): Prisma__thaiamphuresClient<$Result.GetResult<Prisma.$thaiamphuresPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Thaiamphures.
     * @param {thaiamphuresDeleteManyArgs} args - Arguments to filter Thaiamphures to delete.
     * @example
     * // Delete a few Thaiamphures
     * const { count } = await prisma.thaiamphures.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends thaiamphuresDeleteManyArgs>(args?: SelectSubset<T, thaiamphuresDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Thaiamphures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaiamphuresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Thaiamphures
     * const thaiamphures = await prisma.thaiamphures.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends thaiamphuresUpdateManyArgs>(args: SelectSubset<T, thaiamphuresUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Thaiamphures.
     * @param {thaiamphuresUpsertArgs} args - Arguments to update or create a Thaiamphures.
     * @example
     * // Update or create a Thaiamphures
     * const thaiamphures = await prisma.thaiamphures.upsert({
     *   create: {
     *     // ... data to create a Thaiamphures
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Thaiamphures we want to update
     *   }
     * })
     */
    upsert<T extends thaiamphuresUpsertArgs>(args: SelectSubset<T, thaiamphuresUpsertArgs<ExtArgs>>): Prisma__thaiamphuresClient<$Result.GetResult<Prisma.$thaiamphuresPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Thaiamphures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaiamphuresCountArgs} args - Arguments to filter Thaiamphures to count.
     * @example
     * // Count the number of Thaiamphures
     * const count = await prisma.thaiamphures.count({
     *   where: {
     *     // ... the filter for the Thaiamphures we want to count
     *   }
     * })
    **/
    count<T extends thaiamphuresCountArgs>(
      args?: Subset<T, thaiamphuresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThaiamphuresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Thaiamphures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiamphuresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThaiamphuresAggregateArgs>(args: Subset<T, ThaiamphuresAggregateArgs>): Prisma.PrismaPromise<GetThaiamphuresAggregateType<T>>

    /**
     * Group by Thaiamphures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaiamphuresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends thaiamphuresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: thaiamphuresGroupByArgs['orderBy'] }
        : { orderBy?: thaiamphuresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, thaiamphuresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThaiamphuresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the thaiamphures model
   */
  readonly fields: thaiamphuresFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for thaiamphures.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__thaiamphuresClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shippingAddresses<T extends thaiamphures$shippingAddressesArgs<ExtArgs> = {}>(args?: Subset<T, thaiamphures$shippingAddressesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShippingInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the thaiamphures model
   */
  interface thaiamphuresFieldRefs {
    readonly id: FieldRef<"thaiamphures", 'Int'>
    readonly nameTh: FieldRef<"thaiamphures", 'String'>
    readonly nameEn: FieldRef<"thaiamphures", 'String'>
    readonly provinceId: FieldRef<"thaiamphures", 'Int'>
    readonly createdAt: FieldRef<"thaiamphures", 'DateTime'>
    readonly updatedAt: FieldRef<"thaiamphures", 'DateTime'>
    readonly deletedAt: FieldRef<"thaiamphures", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * thaiamphures findUnique
   */
  export type thaiamphuresFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiamphures
     */
    select?: thaiamphuresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiamphures
     */
    omit?: thaiamphuresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiamphuresInclude<ExtArgs> | null
    /**
     * Filter, which thaiamphures to fetch.
     */
    where: thaiamphuresWhereUniqueInput
  }

  /**
   * thaiamphures findUniqueOrThrow
   */
  export type thaiamphuresFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiamphures
     */
    select?: thaiamphuresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiamphures
     */
    omit?: thaiamphuresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiamphuresInclude<ExtArgs> | null
    /**
     * Filter, which thaiamphures to fetch.
     */
    where: thaiamphuresWhereUniqueInput
  }

  /**
   * thaiamphures findFirst
   */
  export type thaiamphuresFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiamphures
     */
    select?: thaiamphuresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiamphures
     */
    omit?: thaiamphuresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiamphuresInclude<ExtArgs> | null
    /**
     * Filter, which thaiamphures to fetch.
     */
    where?: thaiamphuresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thaiamphures to fetch.
     */
    orderBy?: thaiamphuresOrderByWithRelationInput | thaiamphuresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for thaiamphures.
     */
    cursor?: thaiamphuresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thaiamphures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thaiamphures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of thaiamphures.
     */
    distinct?: ThaiamphuresScalarFieldEnum | ThaiamphuresScalarFieldEnum[]
  }

  /**
   * thaiamphures findFirstOrThrow
   */
  export type thaiamphuresFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiamphures
     */
    select?: thaiamphuresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiamphures
     */
    omit?: thaiamphuresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiamphuresInclude<ExtArgs> | null
    /**
     * Filter, which thaiamphures to fetch.
     */
    where?: thaiamphuresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thaiamphures to fetch.
     */
    orderBy?: thaiamphuresOrderByWithRelationInput | thaiamphuresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for thaiamphures.
     */
    cursor?: thaiamphuresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thaiamphures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thaiamphures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of thaiamphures.
     */
    distinct?: ThaiamphuresScalarFieldEnum | ThaiamphuresScalarFieldEnum[]
  }

  /**
   * thaiamphures findMany
   */
  export type thaiamphuresFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiamphures
     */
    select?: thaiamphuresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiamphures
     */
    omit?: thaiamphuresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiamphuresInclude<ExtArgs> | null
    /**
     * Filter, which thaiamphures to fetch.
     */
    where?: thaiamphuresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thaiamphures to fetch.
     */
    orderBy?: thaiamphuresOrderByWithRelationInput | thaiamphuresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing thaiamphures.
     */
    cursor?: thaiamphuresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thaiamphures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thaiamphures.
     */
    skip?: number
    distinct?: ThaiamphuresScalarFieldEnum | ThaiamphuresScalarFieldEnum[]
  }

  /**
   * thaiamphures create
   */
  export type thaiamphuresCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiamphures
     */
    select?: thaiamphuresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiamphures
     */
    omit?: thaiamphuresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiamphuresInclude<ExtArgs> | null
    /**
     * The data needed to create a thaiamphures.
     */
    data: XOR<thaiamphuresCreateInput, thaiamphuresUncheckedCreateInput>
  }

  /**
   * thaiamphures createMany
   */
  export type thaiamphuresCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many thaiamphures.
     */
    data: thaiamphuresCreateManyInput | thaiamphuresCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * thaiamphures update
   */
  export type thaiamphuresUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiamphures
     */
    select?: thaiamphuresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiamphures
     */
    omit?: thaiamphuresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiamphuresInclude<ExtArgs> | null
    /**
     * The data needed to update a thaiamphures.
     */
    data: XOR<thaiamphuresUpdateInput, thaiamphuresUncheckedUpdateInput>
    /**
     * Choose, which thaiamphures to update.
     */
    where: thaiamphuresWhereUniqueInput
  }

  /**
   * thaiamphures updateMany
   */
  export type thaiamphuresUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update thaiamphures.
     */
    data: XOR<thaiamphuresUpdateManyMutationInput, thaiamphuresUncheckedUpdateManyInput>
    /**
     * Filter which thaiamphures to update
     */
    where?: thaiamphuresWhereInput
    /**
     * Limit how many thaiamphures to update.
     */
    limit?: number
  }

  /**
   * thaiamphures upsert
   */
  export type thaiamphuresUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiamphures
     */
    select?: thaiamphuresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiamphures
     */
    omit?: thaiamphuresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiamphuresInclude<ExtArgs> | null
    /**
     * The filter to search for the thaiamphures to update in case it exists.
     */
    where: thaiamphuresWhereUniqueInput
    /**
     * In case the thaiamphures found by the `where` argument doesn't exist, create a new thaiamphures with this data.
     */
    create: XOR<thaiamphuresCreateInput, thaiamphuresUncheckedCreateInput>
    /**
     * In case the thaiamphures was found with the provided `where` argument, update it with this data.
     */
    update: XOR<thaiamphuresUpdateInput, thaiamphuresUncheckedUpdateInput>
  }

  /**
   * thaiamphures delete
   */
  export type thaiamphuresDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiamphures
     */
    select?: thaiamphuresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiamphures
     */
    omit?: thaiamphuresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiamphuresInclude<ExtArgs> | null
    /**
     * Filter which thaiamphures to delete.
     */
    where: thaiamphuresWhereUniqueInput
  }

  /**
   * thaiamphures deleteMany
   */
  export type thaiamphuresDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which thaiamphures to delete
     */
    where?: thaiamphuresWhereInput
    /**
     * Limit how many thaiamphures to delete.
     */
    limit?: number
  }

  /**
   * thaiamphures.shippingAddresses
   */
  export type thaiamphures$shippingAddressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingInfo
     */
    select?: ShippingInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShippingInfo
     */
    omit?: ShippingInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShippingInfoInclude<ExtArgs> | null
    where?: ShippingInfoWhereInput
    orderBy?: ShippingInfoOrderByWithRelationInput | ShippingInfoOrderByWithRelationInput[]
    cursor?: ShippingInfoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShippingInfoScalarFieldEnum | ShippingInfoScalarFieldEnum[]
  }

  /**
   * thaiamphures without action
   */
  export type thaiamphuresDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiamphures
     */
    select?: thaiamphuresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiamphures
     */
    omit?: thaiamphuresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiamphuresInclude<ExtArgs> | null
  }


  /**
   * Model thaigeographies
   */

  export type AggregateThaigeographies = {
    _count: ThaigeographiesCountAggregateOutputType | null
    _avg: ThaigeographiesAvgAggregateOutputType | null
    _sum: ThaigeographiesSumAggregateOutputType | null
    _min: ThaigeographiesMinAggregateOutputType | null
    _max: ThaigeographiesMaxAggregateOutputType | null
  }

  export type ThaigeographiesAvgAggregateOutputType = {
    id: number | null
  }

  export type ThaigeographiesSumAggregateOutputType = {
    id: number | null
  }

  export type ThaigeographiesMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ThaigeographiesMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ThaigeographiesCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ThaigeographiesAvgAggregateInputType = {
    id?: true
  }

  export type ThaigeographiesSumAggregateInputType = {
    id?: true
  }

  export type ThaigeographiesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ThaigeographiesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ThaigeographiesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ThaigeographiesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which thaigeographies to aggregate.
     */
    where?: thaigeographiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thaigeographies to fetch.
     */
    orderBy?: thaigeographiesOrderByWithRelationInput | thaigeographiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: thaigeographiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thaigeographies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thaigeographies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned thaigeographies
    **/
    _count?: true | ThaigeographiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThaigeographiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThaigeographiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThaigeographiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThaigeographiesMaxAggregateInputType
  }

  export type GetThaigeographiesAggregateType<T extends ThaigeographiesAggregateArgs> = {
        [P in keyof T & keyof AggregateThaigeographies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThaigeographies[P]>
      : GetScalarType<T[P], AggregateThaigeographies[P]>
  }




  export type thaigeographiesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: thaigeographiesWhereInput
    orderBy?: thaigeographiesOrderByWithAggregationInput | thaigeographiesOrderByWithAggregationInput[]
    by: ThaigeographiesScalarFieldEnum[] | ThaigeographiesScalarFieldEnum
    having?: thaigeographiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThaigeographiesCountAggregateInputType | true
    _avg?: ThaigeographiesAvgAggregateInputType
    _sum?: ThaigeographiesSumAggregateInputType
    _min?: ThaigeographiesMinAggregateInputType
    _max?: ThaigeographiesMaxAggregateInputType
  }

  export type ThaigeographiesGroupByOutputType = {
    id: number
    name: string
    _count: ThaigeographiesCountAggregateOutputType | null
    _avg: ThaigeographiesAvgAggregateOutputType | null
    _sum: ThaigeographiesSumAggregateOutputType | null
    _min: ThaigeographiesMinAggregateOutputType | null
    _max: ThaigeographiesMaxAggregateOutputType | null
  }

  type GetThaigeographiesGroupByPayload<T extends thaigeographiesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThaigeographiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThaigeographiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThaigeographiesGroupByOutputType[P]>
            : GetScalarType<T[P], ThaigeographiesGroupByOutputType[P]>
        }
      >
    >


  export type thaigeographiesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["thaigeographies"]>



  export type thaigeographiesSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type thaigeographiesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["thaigeographies"]>

  export type $thaigeographiesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "thaigeographies"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["thaigeographies"]>
    composites: {}
  }

  type thaigeographiesGetPayload<S extends boolean | null | undefined | thaigeographiesDefaultArgs> = $Result.GetResult<Prisma.$thaigeographiesPayload, S>

  type thaigeographiesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<thaigeographiesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ThaigeographiesCountAggregateInputType | true
    }

  export interface thaigeographiesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['thaigeographies'], meta: { name: 'thaigeographies' } }
    /**
     * Find zero or one Thaigeographies that matches the filter.
     * @param {thaigeographiesFindUniqueArgs} args - Arguments to find a Thaigeographies
     * @example
     * // Get one Thaigeographies
     * const thaigeographies = await prisma.thaigeographies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends thaigeographiesFindUniqueArgs>(args: SelectSubset<T, thaigeographiesFindUniqueArgs<ExtArgs>>): Prisma__thaigeographiesClient<$Result.GetResult<Prisma.$thaigeographiesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Thaigeographies that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {thaigeographiesFindUniqueOrThrowArgs} args - Arguments to find a Thaigeographies
     * @example
     * // Get one Thaigeographies
     * const thaigeographies = await prisma.thaigeographies.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends thaigeographiesFindUniqueOrThrowArgs>(args: SelectSubset<T, thaigeographiesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__thaigeographiesClient<$Result.GetResult<Prisma.$thaigeographiesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Thaigeographies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaigeographiesFindFirstArgs} args - Arguments to find a Thaigeographies
     * @example
     * // Get one Thaigeographies
     * const thaigeographies = await prisma.thaigeographies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends thaigeographiesFindFirstArgs>(args?: SelectSubset<T, thaigeographiesFindFirstArgs<ExtArgs>>): Prisma__thaigeographiesClient<$Result.GetResult<Prisma.$thaigeographiesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Thaigeographies that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaigeographiesFindFirstOrThrowArgs} args - Arguments to find a Thaigeographies
     * @example
     * // Get one Thaigeographies
     * const thaigeographies = await prisma.thaigeographies.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends thaigeographiesFindFirstOrThrowArgs>(args?: SelectSubset<T, thaigeographiesFindFirstOrThrowArgs<ExtArgs>>): Prisma__thaigeographiesClient<$Result.GetResult<Prisma.$thaigeographiesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Thaigeographies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaigeographiesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Thaigeographies
     * const thaigeographies = await prisma.thaigeographies.findMany()
     * 
     * // Get first 10 Thaigeographies
     * const thaigeographies = await prisma.thaigeographies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const thaigeographiesWithIdOnly = await prisma.thaigeographies.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends thaigeographiesFindManyArgs>(args?: SelectSubset<T, thaigeographiesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$thaigeographiesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Thaigeographies.
     * @param {thaigeographiesCreateArgs} args - Arguments to create a Thaigeographies.
     * @example
     * // Create one Thaigeographies
     * const Thaigeographies = await prisma.thaigeographies.create({
     *   data: {
     *     // ... data to create a Thaigeographies
     *   }
     * })
     * 
     */
    create<T extends thaigeographiesCreateArgs>(args: SelectSubset<T, thaigeographiesCreateArgs<ExtArgs>>): Prisma__thaigeographiesClient<$Result.GetResult<Prisma.$thaigeographiesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Thaigeographies.
     * @param {thaigeographiesCreateManyArgs} args - Arguments to create many Thaigeographies.
     * @example
     * // Create many Thaigeographies
     * const thaigeographies = await prisma.thaigeographies.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends thaigeographiesCreateManyArgs>(args?: SelectSubset<T, thaigeographiesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Thaigeographies.
     * @param {thaigeographiesDeleteArgs} args - Arguments to delete one Thaigeographies.
     * @example
     * // Delete one Thaigeographies
     * const Thaigeographies = await prisma.thaigeographies.delete({
     *   where: {
     *     // ... filter to delete one Thaigeographies
     *   }
     * })
     * 
     */
    delete<T extends thaigeographiesDeleteArgs>(args: SelectSubset<T, thaigeographiesDeleteArgs<ExtArgs>>): Prisma__thaigeographiesClient<$Result.GetResult<Prisma.$thaigeographiesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Thaigeographies.
     * @param {thaigeographiesUpdateArgs} args - Arguments to update one Thaigeographies.
     * @example
     * // Update one Thaigeographies
     * const thaigeographies = await prisma.thaigeographies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends thaigeographiesUpdateArgs>(args: SelectSubset<T, thaigeographiesUpdateArgs<ExtArgs>>): Prisma__thaigeographiesClient<$Result.GetResult<Prisma.$thaigeographiesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Thaigeographies.
     * @param {thaigeographiesDeleteManyArgs} args - Arguments to filter Thaigeographies to delete.
     * @example
     * // Delete a few Thaigeographies
     * const { count } = await prisma.thaigeographies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends thaigeographiesDeleteManyArgs>(args?: SelectSubset<T, thaigeographiesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Thaigeographies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaigeographiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Thaigeographies
     * const thaigeographies = await prisma.thaigeographies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends thaigeographiesUpdateManyArgs>(args: SelectSubset<T, thaigeographiesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Thaigeographies.
     * @param {thaigeographiesUpsertArgs} args - Arguments to update or create a Thaigeographies.
     * @example
     * // Update or create a Thaigeographies
     * const thaigeographies = await prisma.thaigeographies.upsert({
     *   create: {
     *     // ... data to create a Thaigeographies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Thaigeographies we want to update
     *   }
     * })
     */
    upsert<T extends thaigeographiesUpsertArgs>(args: SelectSubset<T, thaigeographiesUpsertArgs<ExtArgs>>): Prisma__thaigeographiesClient<$Result.GetResult<Prisma.$thaigeographiesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Thaigeographies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaigeographiesCountArgs} args - Arguments to filter Thaigeographies to count.
     * @example
     * // Count the number of Thaigeographies
     * const count = await prisma.thaigeographies.count({
     *   where: {
     *     // ... the filter for the Thaigeographies we want to count
     *   }
     * })
    **/
    count<T extends thaigeographiesCountArgs>(
      args?: Subset<T, thaigeographiesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThaigeographiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Thaigeographies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaigeographiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThaigeographiesAggregateArgs>(args: Subset<T, ThaigeographiesAggregateArgs>): Prisma.PrismaPromise<GetThaigeographiesAggregateType<T>>

    /**
     * Group by Thaigeographies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaigeographiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends thaigeographiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: thaigeographiesGroupByArgs['orderBy'] }
        : { orderBy?: thaigeographiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, thaigeographiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThaigeographiesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the thaigeographies model
   */
  readonly fields: thaigeographiesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for thaigeographies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__thaigeographiesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the thaigeographies model
   */
  interface thaigeographiesFieldRefs {
    readonly id: FieldRef<"thaigeographies", 'Int'>
    readonly name: FieldRef<"thaigeographies", 'String'>
  }
    

  // Custom InputTypes
  /**
   * thaigeographies findUnique
   */
  export type thaigeographiesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaigeographies
     */
    select?: thaigeographiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaigeographies
     */
    omit?: thaigeographiesOmit<ExtArgs> | null
    /**
     * Filter, which thaigeographies to fetch.
     */
    where: thaigeographiesWhereUniqueInput
  }

  /**
   * thaigeographies findUniqueOrThrow
   */
  export type thaigeographiesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaigeographies
     */
    select?: thaigeographiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaigeographies
     */
    omit?: thaigeographiesOmit<ExtArgs> | null
    /**
     * Filter, which thaigeographies to fetch.
     */
    where: thaigeographiesWhereUniqueInput
  }

  /**
   * thaigeographies findFirst
   */
  export type thaigeographiesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaigeographies
     */
    select?: thaigeographiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaigeographies
     */
    omit?: thaigeographiesOmit<ExtArgs> | null
    /**
     * Filter, which thaigeographies to fetch.
     */
    where?: thaigeographiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thaigeographies to fetch.
     */
    orderBy?: thaigeographiesOrderByWithRelationInput | thaigeographiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for thaigeographies.
     */
    cursor?: thaigeographiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thaigeographies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thaigeographies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of thaigeographies.
     */
    distinct?: ThaigeographiesScalarFieldEnum | ThaigeographiesScalarFieldEnum[]
  }

  /**
   * thaigeographies findFirstOrThrow
   */
  export type thaigeographiesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaigeographies
     */
    select?: thaigeographiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaigeographies
     */
    omit?: thaigeographiesOmit<ExtArgs> | null
    /**
     * Filter, which thaigeographies to fetch.
     */
    where?: thaigeographiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thaigeographies to fetch.
     */
    orderBy?: thaigeographiesOrderByWithRelationInput | thaigeographiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for thaigeographies.
     */
    cursor?: thaigeographiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thaigeographies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thaigeographies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of thaigeographies.
     */
    distinct?: ThaigeographiesScalarFieldEnum | ThaigeographiesScalarFieldEnum[]
  }

  /**
   * thaigeographies findMany
   */
  export type thaigeographiesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaigeographies
     */
    select?: thaigeographiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaigeographies
     */
    omit?: thaigeographiesOmit<ExtArgs> | null
    /**
     * Filter, which thaigeographies to fetch.
     */
    where?: thaigeographiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thaigeographies to fetch.
     */
    orderBy?: thaigeographiesOrderByWithRelationInput | thaigeographiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing thaigeographies.
     */
    cursor?: thaigeographiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thaigeographies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thaigeographies.
     */
    skip?: number
    distinct?: ThaigeographiesScalarFieldEnum | ThaigeographiesScalarFieldEnum[]
  }

  /**
   * thaigeographies create
   */
  export type thaigeographiesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaigeographies
     */
    select?: thaigeographiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaigeographies
     */
    omit?: thaigeographiesOmit<ExtArgs> | null
    /**
     * The data needed to create a thaigeographies.
     */
    data: XOR<thaigeographiesCreateInput, thaigeographiesUncheckedCreateInput>
  }

  /**
   * thaigeographies createMany
   */
  export type thaigeographiesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many thaigeographies.
     */
    data: thaigeographiesCreateManyInput | thaigeographiesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * thaigeographies update
   */
  export type thaigeographiesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaigeographies
     */
    select?: thaigeographiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaigeographies
     */
    omit?: thaigeographiesOmit<ExtArgs> | null
    /**
     * The data needed to update a thaigeographies.
     */
    data: XOR<thaigeographiesUpdateInput, thaigeographiesUncheckedUpdateInput>
    /**
     * Choose, which thaigeographies to update.
     */
    where: thaigeographiesWhereUniqueInput
  }

  /**
   * thaigeographies updateMany
   */
  export type thaigeographiesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update thaigeographies.
     */
    data: XOR<thaigeographiesUpdateManyMutationInput, thaigeographiesUncheckedUpdateManyInput>
    /**
     * Filter which thaigeographies to update
     */
    where?: thaigeographiesWhereInput
    /**
     * Limit how many thaigeographies to update.
     */
    limit?: number
  }

  /**
   * thaigeographies upsert
   */
  export type thaigeographiesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaigeographies
     */
    select?: thaigeographiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaigeographies
     */
    omit?: thaigeographiesOmit<ExtArgs> | null
    /**
     * The filter to search for the thaigeographies to update in case it exists.
     */
    where: thaigeographiesWhereUniqueInput
    /**
     * In case the thaigeographies found by the `where` argument doesn't exist, create a new thaigeographies with this data.
     */
    create: XOR<thaigeographiesCreateInput, thaigeographiesUncheckedCreateInput>
    /**
     * In case the thaigeographies was found with the provided `where` argument, update it with this data.
     */
    update: XOR<thaigeographiesUpdateInput, thaigeographiesUncheckedUpdateInput>
  }

  /**
   * thaigeographies delete
   */
  export type thaigeographiesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaigeographies
     */
    select?: thaigeographiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaigeographies
     */
    omit?: thaigeographiesOmit<ExtArgs> | null
    /**
     * Filter which thaigeographies to delete.
     */
    where: thaigeographiesWhereUniqueInput
  }

  /**
   * thaigeographies deleteMany
   */
  export type thaigeographiesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which thaigeographies to delete
     */
    where?: thaigeographiesWhereInput
    /**
     * Limit how many thaigeographies to delete.
     */
    limit?: number
  }

  /**
   * thaigeographies without action
   */
  export type thaigeographiesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaigeographies
     */
    select?: thaigeographiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaigeographies
     */
    omit?: thaigeographiesOmit<ExtArgs> | null
  }


  /**
   * Model thaiprovinces
   */

  export type AggregateThaiprovinces = {
    _count: ThaiprovincesCountAggregateOutputType | null
    _avg: ThaiprovincesAvgAggregateOutputType | null
    _sum: ThaiprovincesSumAggregateOutputType | null
    _min: ThaiprovincesMinAggregateOutputType | null
    _max: ThaiprovincesMaxAggregateOutputType | null
  }

  export type ThaiprovincesAvgAggregateOutputType = {
    id: number | null
    geographyId: number | null
  }

  export type ThaiprovincesSumAggregateOutputType = {
    id: number | null
    geographyId: number | null
  }

  export type ThaiprovincesMinAggregateOutputType = {
    id: number | null
    nameTh: string | null
    nameEn: string | null
    geographyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type ThaiprovincesMaxAggregateOutputType = {
    id: number | null
    nameTh: string | null
    nameEn: string | null
    geographyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type ThaiprovincesCountAggregateOutputType = {
    id: number
    nameTh: number
    nameEn: number
    geographyId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type ThaiprovincesAvgAggregateInputType = {
    id?: true
    geographyId?: true
  }

  export type ThaiprovincesSumAggregateInputType = {
    id?: true
    geographyId?: true
  }

  export type ThaiprovincesMinAggregateInputType = {
    id?: true
    nameTh?: true
    nameEn?: true
    geographyId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ThaiprovincesMaxAggregateInputType = {
    id?: true
    nameTh?: true
    nameEn?: true
    geographyId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ThaiprovincesCountAggregateInputType = {
    id?: true
    nameTh?: true
    nameEn?: true
    geographyId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type ThaiprovincesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which thaiprovinces to aggregate.
     */
    where?: thaiprovincesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thaiprovinces to fetch.
     */
    orderBy?: thaiprovincesOrderByWithRelationInput | thaiprovincesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: thaiprovincesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thaiprovinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thaiprovinces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned thaiprovinces
    **/
    _count?: true | ThaiprovincesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThaiprovincesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThaiprovincesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThaiprovincesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThaiprovincesMaxAggregateInputType
  }

  export type GetThaiprovincesAggregateType<T extends ThaiprovincesAggregateArgs> = {
        [P in keyof T & keyof AggregateThaiprovinces]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThaiprovinces[P]>
      : GetScalarType<T[P], AggregateThaiprovinces[P]>
  }




  export type thaiprovincesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: thaiprovincesWhereInput
    orderBy?: thaiprovincesOrderByWithAggregationInput | thaiprovincesOrderByWithAggregationInput[]
    by: ThaiprovincesScalarFieldEnum[] | ThaiprovincesScalarFieldEnum
    having?: thaiprovincesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThaiprovincesCountAggregateInputType | true
    _avg?: ThaiprovincesAvgAggregateInputType
    _sum?: ThaiprovincesSumAggregateInputType
    _min?: ThaiprovincesMinAggregateInputType
    _max?: ThaiprovincesMaxAggregateInputType
  }

  export type ThaiprovincesGroupByOutputType = {
    id: number
    nameTh: string
    nameEn: string
    geographyId: number
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
    _count: ThaiprovincesCountAggregateOutputType | null
    _avg: ThaiprovincesAvgAggregateOutputType | null
    _sum: ThaiprovincesSumAggregateOutputType | null
    _min: ThaiprovincesMinAggregateOutputType | null
    _max: ThaiprovincesMaxAggregateOutputType | null
  }

  type GetThaiprovincesGroupByPayload<T extends thaiprovincesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThaiprovincesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThaiprovincesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThaiprovincesGroupByOutputType[P]>
            : GetScalarType<T[P], ThaiprovincesGroupByOutputType[P]>
        }
      >
    >


  export type thaiprovincesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameTh?: boolean
    nameEn?: boolean
    geographyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    shippingAddresses?: boolean | thaiprovinces$shippingAddressesArgs<ExtArgs>
    _count?: boolean | ThaiprovincesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thaiprovinces"]>



  export type thaiprovincesSelectScalar = {
    id?: boolean
    nameTh?: boolean
    nameEn?: boolean
    geographyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type thaiprovincesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nameTh" | "nameEn" | "geographyId" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["thaiprovinces"]>
  export type thaiprovincesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shippingAddresses?: boolean | thaiprovinces$shippingAddressesArgs<ExtArgs>
    _count?: boolean | ThaiprovincesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $thaiprovincesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "thaiprovinces"
    objects: {
      shippingAddresses: Prisma.$ShippingInfoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nameTh: string
      nameEn: string
      geographyId: number
      createdAt: Date | null
      updatedAt: Date | null
      deletedAt: Date | null
    }, ExtArgs["result"]["thaiprovinces"]>
    composites: {}
  }

  type thaiprovincesGetPayload<S extends boolean | null | undefined | thaiprovincesDefaultArgs> = $Result.GetResult<Prisma.$thaiprovincesPayload, S>

  type thaiprovincesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<thaiprovincesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ThaiprovincesCountAggregateInputType | true
    }

  export interface thaiprovincesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['thaiprovinces'], meta: { name: 'thaiprovinces' } }
    /**
     * Find zero or one Thaiprovinces that matches the filter.
     * @param {thaiprovincesFindUniqueArgs} args - Arguments to find a Thaiprovinces
     * @example
     * // Get one Thaiprovinces
     * const thaiprovinces = await prisma.thaiprovinces.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends thaiprovincesFindUniqueArgs>(args: SelectSubset<T, thaiprovincesFindUniqueArgs<ExtArgs>>): Prisma__thaiprovincesClient<$Result.GetResult<Prisma.$thaiprovincesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Thaiprovinces that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {thaiprovincesFindUniqueOrThrowArgs} args - Arguments to find a Thaiprovinces
     * @example
     * // Get one Thaiprovinces
     * const thaiprovinces = await prisma.thaiprovinces.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends thaiprovincesFindUniqueOrThrowArgs>(args: SelectSubset<T, thaiprovincesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__thaiprovincesClient<$Result.GetResult<Prisma.$thaiprovincesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Thaiprovinces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaiprovincesFindFirstArgs} args - Arguments to find a Thaiprovinces
     * @example
     * // Get one Thaiprovinces
     * const thaiprovinces = await prisma.thaiprovinces.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends thaiprovincesFindFirstArgs>(args?: SelectSubset<T, thaiprovincesFindFirstArgs<ExtArgs>>): Prisma__thaiprovincesClient<$Result.GetResult<Prisma.$thaiprovincesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Thaiprovinces that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaiprovincesFindFirstOrThrowArgs} args - Arguments to find a Thaiprovinces
     * @example
     * // Get one Thaiprovinces
     * const thaiprovinces = await prisma.thaiprovinces.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends thaiprovincesFindFirstOrThrowArgs>(args?: SelectSubset<T, thaiprovincesFindFirstOrThrowArgs<ExtArgs>>): Prisma__thaiprovincesClient<$Result.GetResult<Prisma.$thaiprovincesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Thaiprovinces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaiprovincesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Thaiprovinces
     * const thaiprovinces = await prisma.thaiprovinces.findMany()
     * 
     * // Get first 10 Thaiprovinces
     * const thaiprovinces = await prisma.thaiprovinces.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const thaiprovincesWithIdOnly = await prisma.thaiprovinces.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends thaiprovincesFindManyArgs>(args?: SelectSubset<T, thaiprovincesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$thaiprovincesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Thaiprovinces.
     * @param {thaiprovincesCreateArgs} args - Arguments to create a Thaiprovinces.
     * @example
     * // Create one Thaiprovinces
     * const Thaiprovinces = await prisma.thaiprovinces.create({
     *   data: {
     *     // ... data to create a Thaiprovinces
     *   }
     * })
     * 
     */
    create<T extends thaiprovincesCreateArgs>(args: SelectSubset<T, thaiprovincesCreateArgs<ExtArgs>>): Prisma__thaiprovincesClient<$Result.GetResult<Prisma.$thaiprovincesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Thaiprovinces.
     * @param {thaiprovincesCreateManyArgs} args - Arguments to create many Thaiprovinces.
     * @example
     * // Create many Thaiprovinces
     * const thaiprovinces = await prisma.thaiprovinces.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends thaiprovincesCreateManyArgs>(args?: SelectSubset<T, thaiprovincesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Thaiprovinces.
     * @param {thaiprovincesDeleteArgs} args - Arguments to delete one Thaiprovinces.
     * @example
     * // Delete one Thaiprovinces
     * const Thaiprovinces = await prisma.thaiprovinces.delete({
     *   where: {
     *     // ... filter to delete one Thaiprovinces
     *   }
     * })
     * 
     */
    delete<T extends thaiprovincesDeleteArgs>(args: SelectSubset<T, thaiprovincesDeleteArgs<ExtArgs>>): Prisma__thaiprovincesClient<$Result.GetResult<Prisma.$thaiprovincesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Thaiprovinces.
     * @param {thaiprovincesUpdateArgs} args - Arguments to update one Thaiprovinces.
     * @example
     * // Update one Thaiprovinces
     * const thaiprovinces = await prisma.thaiprovinces.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends thaiprovincesUpdateArgs>(args: SelectSubset<T, thaiprovincesUpdateArgs<ExtArgs>>): Prisma__thaiprovincesClient<$Result.GetResult<Prisma.$thaiprovincesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Thaiprovinces.
     * @param {thaiprovincesDeleteManyArgs} args - Arguments to filter Thaiprovinces to delete.
     * @example
     * // Delete a few Thaiprovinces
     * const { count } = await prisma.thaiprovinces.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends thaiprovincesDeleteManyArgs>(args?: SelectSubset<T, thaiprovincesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Thaiprovinces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaiprovincesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Thaiprovinces
     * const thaiprovinces = await prisma.thaiprovinces.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends thaiprovincesUpdateManyArgs>(args: SelectSubset<T, thaiprovincesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Thaiprovinces.
     * @param {thaiprovincesUpsertArgs} args - Arguments to update or create a Thaiprovinces.
     * @example
     * // Update or create a Thaiprovinces
     * const thaiprovinces = await prisma.thaiprovinces.upsert({
     *   create: {
     *     // ... data to create a Thaiprovinces
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Thaiprovinces we want to update
     *   }
     * })
     */
    upsert<T extends thaiprovincesUpsertArgs>(args: SelectSubset<T, thaiprovincesUpsertArgs<ExtArgs>>): Prisma__thaiprovincesClient<$Result.GetResult<Prisma.$thaiprovincesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Thaiprovinces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaiprovincesCountArgs} args - Arguments to filter Thaiprovinces to count.
     * @example
     * // Count the number of Thaiprovinces
     * const count = await prisma.thaiprovinces.count({
     *   where: {
     *     // ... the filter for the Thaiprovinces we want to count
     *   }
     * })
    **/
    count<T extends thaiprovincesCountArgs>(
      args?: Subset<T, thaiprovincesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThaiprovincesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Thaiprovinces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaiprovincesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThaiprovincesAggregateArgs>(args: Subset<T, ThaiprovincesAggregateArgs>): Prisma.PrismaPromise<GetThaiprovincesAggregateType<T>>

    /**
     * Group by Thaiprovinces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaiprovincesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends thaiprovincesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: thaiprovincesGroupByArgs['orderBy'] }
        : { orderBy?: thaiprovincesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, thaiprovincesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThaiprovincesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the thaiprovinces model
   */
  readonly fields: thaiprovincesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for thaiprovinces.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__thaiprovincesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shippingAddresses<T extends thaiprovinces$shippingAddressesArgs<ExtArgs> = {}>(args?: Subset<T, thaiprovinces$shippingAddressesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShippingInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the thaiprovinces model
   */
  interface thaiprovincesFieldRefs {
    readonly id: FieldRef<"thaiprovinces", 'Int'>
    readonly nameTh: FieldRef<"thaiprovinces", 'String'>
    readonly nameEn: FieldRef<"thaiprovinces", 'String'>
    readonly geographyId: FieldRef<"thaiprovinces", 'Int'>
    readonly createdAt: FieldRef<"thaiprovinces", 'DateTime'>
    readonly updatedAt: FieldRef<"thaiprovinces", 'DateTime'>
    readonly deletedAt: FieldRef<"thaiprovinces", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * thaiprovinces findUnique
   */
  export type thaiprovincesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiprovinces
     */
    select?: thaiprovincesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiprovinces
     */
    omit?: thaiprovincesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiprovincesInclude<ExtArgs> | null
    /**
     * Filter, which thaiprovinces to fetch.
     */
    where: thaiprovincesWhereUniqueInput
  }

  /**
   * thaiprovinces findUniqueOrThrow
   */
  export type thaiprovincesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiprovinces
     */
    select?: thaiprovincesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiprovinces
     */
    omit?: thaiprovincesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiprovincesInclude<ExtArgs> | null
    /**
     * Filter, which thaiprovinces to fetch.
     */
    where: thaiprovincesWhereUniqueInput
  }

  /**
   * thaiprovinces findFirst
   */
  export type thaiprovincesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiprovinces
     */
    select?: thaiprovincesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiprovinces
     */
    omit?: thaiprovincesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiprovincesInclude<ExtArgs> | null
    /**
     * Filter, which thaiprovinces to fetch.
     */
    where?: thaiprovincesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thaiprovinces to fetch.
     */
    orderBy?: thaiprovincesOrderByWithRelationInput | thaiprovincesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for thaiprovinces.
     */
    cursor?: thaiprovincesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thaiprovinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thaiprovinces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of thaiprovinces.
     */
    distinct?: ThaiprovincesScalarFieldEnum | ThaiprovincesScalarFieldEnum[]
  }

  /**
   * thaiprovinces findFirstOrThrow
   */
  export type thaiprovincesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiprovinces
     */
    select?: thaiprovincesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiprovinces
     */
    omit?: thaiprovincesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiprovincesInclude<ExtArgs> | null
    /**
     * Filter, which thaiprovinces to fetch.
     */
    where?: thaiprovincesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thaiprovinces to fetch.
     */
    orderBy?: thaiprovincesOrderByWithRelationInput | thaiprovincesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for thaiprovinces.
     */
    cursor?: thaiprovincesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thaiprovinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thaiprovinces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of thaiprovinces.
     */
    distinct?: ThaiprovincesScalarFieldEnum | ThaiprovincesScalarFieldEnum[]
  }

  /**
   * thaiprovinces findMany
   */
  export type thaiprovincesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiprovinces
     */
    select?: thaiprovincesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiprovinces
     */
    omit?: thaiprovincesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiprovincesInclude<ExtArgs> | null
    /**
     * Filter, which thaiprovinces to fetch.
     */
    where?: thaiprovincesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thaiprovinces to fetch.
     */
    orderBy?: thaiprovincesOrderByWithRelationInput | thaiprovincesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing thaiprovinces.
     */
    cursor?: thaiprovincesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thaiprovinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thaiprovinces.
     */
    skip?: number
    distinct?: ThaiprovincesScalarFieldEnum | ThaiprovincesScalarFieldEnum[]
  }

  /**
   * thaiprovinces create
   */
  export type thaiprovincesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiprovinces
     */
    select?: thaiprovincesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiprovinces
     */
    omit?: thaiprovincesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiprovincesInclude<ExtArgs> | null
    /**
     * The data needed to create a thaiprovinces.
     */
    data: XOR<thaiprovincesCreateInput, thaiprovincesUncheckedCreateInput>
  }

  /**
   * thaiprovinces createMany
   */
  export type thaiprovincesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many thaiprovinces.
     */
    data: thaiprovincesCreateManyInput | thaiprovincesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * thaiprovinces update
   */
  export type thaiprovincesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiprovinces
     */
    select?: thaiprovincesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiprovinces
     */
    omit?: thaiprovincesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiprovincesInclude<ExtArgs> | null
    /**
     * The data needed to update a thaiprovinces.
     */
    data: XOR<thaiprovincesUpdateInput, thaiprovincesUncheckedUpdateInput>
    /**
     * Choose, which thaiprovinces to update.
     */
    where: thaiprovincesWhereUniqueInput
  }

  /**
   * thaiprovinces updateMany
   */
  export type thaiprovincesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update thaiprovinces.
     */
    data: XOR<thaiprovincesUpdateManyMutationInput, thaiprovincesUncheckedUpdateManyInput>
    /**
     * Filter which thaiprovinces to update
     */
    where?: thaiprovincesWhereInput
    /**
     * Limit how many thaiprovinces to update.
     */
    limit?: number
  }

  /**
   * thaiprovinces upsert
   */
  export type thaiprovincesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiprovinces
     */
    select?: thaiprovincesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiprovinces
     */
    omit?: thaiprovincesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiprovincesInclude<ExtArgs> | null
    /**
     * The filter to search for the thaiprovinces to update in case it exists.
     */
    where: thaiprovincesWhereUniqueInput
    /**
     * In case the thaiprovinces found by the `where` argument doesn't exist, create a new thaiprovinces with this data.
     */
    create: XOR<thaiprovincesCreateInput, thaiprovincesUncheckedCreateInput>
    /**
     * In case the thaiprovinces was found with the provided `where` argument, update it with this data.
     */
    update: XOR<thaiprovincesUpdateInput, thaiprovincesUncheckedUpdateInput>
  }

  /**
   * thaiprovinces delete
   */
  export type thaiprovincesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiprovinces
     */
    select?: thaiprovincesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiprovinces
     */
    omit?: thaiprovincesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiprovincesInclude<ExtArgs> | null
    /**
     * Filter which thaiprovinces to delete.
     */
    where: thaiprovincesWhereUniqueInput
  }

  /**
   * thaiprovinces deleteMany
   */
  export type thaiprovincesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which thaiprovinces to delete
     */
    where?: thaiprovincesWhereInput
    /**
     * Limit how many thaiprovinces to delete.
     */
    limit?: number
  }

  /**
   * thaiprovinces.shippingAddresses
   */
  export type thaiprovinces$shippingAddressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingInfo
     */
    select?: ShippingInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShippingInfo
     */
    omit?: ShippingInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShippingInfoInclude<ExtArgs> | null
    where?: ShippingInfoWhereInput
    orderBy?: ShippingInfoOrderByWithRelationInput | ShippingInfoOrderByWithRelationInput[]
    cursor?: ShippingInfoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShippingInfoScalarFieldEnum | ShippingInfoScalarFieldEnum[]
  }

  /**
   * thaiprovinces without action
   */
  export type thaiprovincesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaiprovinces
     */
    select?: thaiprovincesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaiprovinces
     */
    omit?: thaiprovincesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaiprovincesInclude<ExtArgs> | null
  }


  /**
   * Model thaitambons
   */

  export type AggregateThaitambons = {
    _count: ThaitambonsCountAggregateOutputType | null
    _avg: ThaitambonsAvgAggregateOutputType | null
    _sum: ThaitambonsSumAggregateOutputType | null
    _min: ThaitambonsMinAggregateOutputType | null
    _max: ThaitambonsMaxAggregateOutputType | null
  }

  export type ThaitambonsAvgAggregateOutputType = {
    id: number | null
    zipCode: number | null
    amphureId: number | null
  }

  export type ThaitambonsSumAggregateOutputType = {
    id: number | null
    zipCode: number | null
    amphureId: number | null
  }

  export type ThaitambonsMinAggregateOutputType = {
    id: number | null
    zipCode: number | null
    nameTh: string | null
    nameEn: string | null
    amphureId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type ThaitambonsMaxAggregateOutputType = {
    id: number | null
    zipCode: number | null
    nameTh: string | null
    nameEn: string | null
    amphureId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type ThaitambonsCountAggregateOutputType = {
    id: number
    zipCode: number
    nameTh: number
    nameEn: number
    amphureId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type ThaitambonsAvgAggregateInputType = {
    id?: true
    zipCode?: true
    amphureId?: true
  }

  export type ThaitambonsSumAggregateInputType = {
    id?: true
    zipCode?: true
    amphureId?: true
  }

  export type ThaitambonsMinAggregateInputType = {
    id?: true
    zipCode?: true
    nameTh?: true
    nameEn?: true
    amphureId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ThaitambonsMaxAggregateInputType = {
    id?: true
    zipCode?: true
    nameTh?: true
    nameEn?: true
    amphureId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ThaitambonsCountAggregateInputType = {
    id?: true
    zipCode?: true
    nameTh?: true
    nameEn?: true
    amphureId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type ThaitambonsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which thaitambons to aggregate.
     */
    where?: thaitambonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thaitambons to fetch.
     */
    orderBy?: thaitambonsOrderByWithRelationInput | thaitambonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: thaitambonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thaitambons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thaitambons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned thaitambons
    **/
    _count?: true | ThaitambonsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThaitambonsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThaitambonsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThaitambonsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThaitambonsMaxAggregateInputType
  }

  export type GetThaitambonsAggregateType<T extends ThaitambonsAggregateArgs> = {
        [P in keyof T & keyof AggregateThaitambons]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThaitambons[P]>
      : GetScalarType<T[P], AggregateThaitambons[P]>
  }




  export type thaitambonsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: thaitambonsWhereInput
    orderBy?: thaitambonsOrderByWithAggregationInput | thaitambonsOrderByWithAggregationInput[]
    by: ThaitambonsScalarFieldEnum[] | ThaitambonsScalarFieldEnum
    having?: thaitambonsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThaitambonsCountAggregateInputType | true
    _avg?: ThaitambonsAvgAggregateInputType
    _sum?: ThaitambonsSumAggregateInputType
    _min?: ThaitambonsMinAggregateInputType
    _max?: ThaitambonsMaxAggregateInputType
  }

  export type ThaitambonsGroupByOutputType = {
    id: number
    zipCode: number
    nameTh: string
    nameEn: string
    amphureId: number
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
    _count: ThaitambonsCountAggregateOutputType | null
    _avg: ThaitambonsAvgAggregateOutputType | null
    _sum: ThaitambonsSumAggregateOutputType | null
    _min: ThaitambonsMinAggregateOutputType | null
    _max: ThaitambonsMaxAggregateOutputType | null
  }

  type GetThaitambonsGroupByPayload<T extends thaitambonsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThaitambonsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThaitambonsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThaitambonsGroupByOutputType[P]>
            : GetScalarType<T[P], ThaitambonsGroupByOutputType[P]>
        }
      >
    >


  export type thaitambonsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    zipCode?: boolean
    nameTh?: boolean
    nameEn?: boolean
    amphureId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    shippingAddresses?: boolean | thaitambons$shippingAddressesArgs<ExtArgs>
    _count?: boolean | ThaitambonsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thaitambons"]>



  export type thaitambonsSelectScalar = {
    id?: boolean
    zipCode?: boolean
    nameTh?: boolean
    nameEn?: boolean
    amphureId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type thaitambonsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "zipCode" | "nameTh" | "nameEn" | "amphureId" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["thaitambons"]>
  export type thaitambonsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shippingAddresses?: boolean | thaitambons$shippingAddressesArgs<ExtArgs>
    _count?: boolean | ThaitambonsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $thaitambonsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "thaitambons"
    objects: {
      shippingAddresses: Prisma.$ShippingInfoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      zipCode: number
      nameTh: string
      nameEn: string
      amphureId: number
      createdAt: Date | null
      updatedAt: Date | null
      deletedAt: Date | null
    }, ExtArgs["result"]["thaitambons"]>
    composites: {}
  }

  type thaitambonsGetPayload<S extends boolean | null | undefined | thaitambonsDefaultArgs> = $Result.GetResult<Prisma.$thaitambonsPayload, S>

  type thaitambonsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<thaitambonsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ThaitambonsCountAggregateInputType | true
    }

  export interface thaitambonsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['thaitambons'], meta: { name: 'thaitambons' } }
    /**
     * Find zero or one Thaitambons that matches the filter.
     * @param {thaitambonsFindUniqueArgs} args - Arguments to find a Thaitambons
     * @example
     * // Get one Thaitambons
     * const thaitambons = await prisma.thaitambons.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends thaitambonsFindUniqueArgs>(args: SelectSubset<T, thaitambonsFindUniqueArgs<ExtArgs>>): Prisma__thaitambonsClient<$Result.GetResult<Prisma.$thaitambonsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Thaitambons that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {thaitambonsFindUniqueOrThrowArgs} args - Arguments to find a Thaitambons
     * @example
     * // Get one Thaitambons
     * const thaitambons = await prisma.thaitambons.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends thaitambonsFindUniqueOrThrowArgs>(args: SelectSubset<T, thaitambonsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__thaitambonsClient<$Result.GetResult<Prisma.$thaitambonsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Thaitambons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaitambonsFindFirstArgs} args - Arguments to find a Thaitambons
     * @example
     * // Get one Thaitambons
     * const thaitambons = await prisma.thaitambons.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends thaitambonsFindFirstArgs>(args?: SelectSubset<T, thaitambonsFindFirstArgs<ExtArgs>>): Prisma__thaitambonsClient<$Result.GetResult<Prisma.$thaitambonsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Thaitambons that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaitambonsFindFirstOrThrowArgs} args - Arguments to find a Thaitambons
     * @example
     * // Get one Thaitambons
     * const thaitambons = await prisma.thaitambons.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends thaitambonsFindFirstOrThrowArgs>(args?: SelectSubset<T, thaitambonsFindFirstOrThrowArgs<ExtArgs>>): Prisma__thaitambonsClient<$Result.GetResult<Prisma.$thaitambonsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Thaitambons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaitambonsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Thaitambons
     * const thaitambons = await prisma.thaitambons.findMany()
     * 
     * // Get first 10 Thaitambons
     * const thaitambons = await prisma.thaitambons.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const thaitambonsWithIdOnly = await prisma.thaitambons.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends thaitambonsFindManyArgs>(args?: SelectSubset<T, thaitambonsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$thaitambonsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Thaitambons.
     * @param {thaitambonsCreateArgs} args - Arguments to create a Thaitambons.
     * @example
     * // Create one Thaitambons
     * const Thaitambons = await prisma.thaitambons.create({
     *   data: {
     *     // ... data to create a Thaitambons
     *   }
     * })
     * 
     */
    create<T extends thaitambonsCreateArgs>(args: SelectSubset<T, thaitambonsCreateArgs<ExtArgs>>): Prisma__thaitambonsClient<$Result.GetResult<Prisma.$thaitambonsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Thaitambons.
     * @param {thaitambonsCreateManyArgs} args - Arguments to create many Thaitambons.
     * @example
     * // Create many Thaitambons
     * const thaitambons = await prisma.thaitambons.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends thaitambonsCreateManyArgs>(args?: SelectSubset<T, thaitambonsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Thaitambons.
     * @param {thaitambonsDeleteArgs} args - Arguments to delete one Thaitambons.
     * @example
     * // Delete one Thaitambons
     * const Thaitambons = await prisma.thaitambons.delete({
     *   where: {
     *     // ... filter to delete one Thaitambons
     *   }
     * })
     * 
     */
    delete<T extends thaitambonsDeleteArgs>(args: SelectSubset<T, thaitambonsDeleteArgs<ExtArgs>>): Prisma__thaitambonsClient<$Result.GetResult<Prisma.$thaitambonsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Thaitambons.
     * @param {thaitambonsUpdateArgs} args - Arguments to update one Thaitambons.
     * @example
     * // Update one Thaitambons
     * const thaitambons = await prisma.thaitambons.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends thaitambonsUpdateArgs>(args: SelectSubset<T, thaitambonsUpdateArgs<ExtArgs>>): Prisma__thaitambonsClient<$Result.GetResult<Prisma.$thaitambonsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Thaitambons.
     * @param {thaitambonsDeleteManyArgs} args - Arguments to filter Thaitambons to delete.
     * @example
     * // Delete a few Thaitambons
     * const { count } = await prisma.thaitambons.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends thaitambonsDeleteManyArgs>(args?: SelectSubset<T, thaitambonsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Thaitambons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaitambonsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Thaitambons
     * const thaitambons = await prisma.thaitambons.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends thaitambonsUpdateManyArgs>(args: SelectSubset<T, thaitambonsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Thaitambons.
     * @param {thaitambonsUpsertArgs} args - Arguments to update or create a Thaitambons.
     * @example
     * // Update or create a Thaitambons
     * const thaitambons = await prisma.thaitambons.upsert({
     *   create: {
     *     // ... data to create a Thaitambons
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Thaitambons we want to update
     *   }
     * })
     */
    upsert<T extends thaitambonsUpsertArgs>(args: SelectSubset<T, thaitambonsUpsertArgs<ExtArgs>>): Prisma__thaitambonsClient<$Result.GetResult<Prisma.$thaitambonsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Thaitambons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaitambonsCountArgs} args - Arguments to filter Thaitambons to count.
     * @example
     * // Count the number of Thaitambons
     * const count = await prisma.thaitambons.count({
     *   where: {
     *     // ... the filter for the Thaitambons we want to count
     *   }
     * })
    **/
    count<T extends thaitambonsCountArgs>(
      args?: Subset<T, thaitambonsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThaitambonsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Thaitambons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThaitambonsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThaitambonsAggregateArgs>(args: Subset<T, ThaitambonsAggregateArgs>): Prisma.PrismaPromise<GetThaitambonsAggregateType<T>>

    /**
     * Group by Thaitambons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thaitambonsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends thaitambonsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: thaitambonsGroupByArgs['orderBy'] }
        : { orderBy?: thaitambonsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, thaitambonsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThaitambonsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the thaitambons model
   */
  readonly fields: thaitambonsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for thaitambons.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__thaitambonsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shippingAddresses<T extends thaitambons$shippingAddressesArgs<ExtArgs> = {}>(args?: Subset<T, thaitambons$shippingAddressesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShippingInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the thaitambons model
   */
  interface thaitambonsFieldRefs {
    readonly id: FieldRef<"thaitambons", 'Int'>
    readonly zipCode: FieldRef<"thaitambons", 'Int'>
    readonly nameTh: FieldRef<"thaitambons", 'String'>
    readonly nameEn: FieldRef<"thaitambons", 'String'>
    readonly amphureId: FieldRef<"thaitambons", 'Int'>
    readonly createdAt: FieldRef<"thaitambons", 'DateTime'>
    readonly updatedAt: FieldRef<"thaitambons", 'DateTime'>
    readonly deletedAt: FieldRef<"thaitambons", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * thaitambons findUnique
   */
  export type thaitambonsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaitambons
     */
    select?: thaitambonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaitambons
     */
    omit?: thaitambonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaitambonsInclude<ExtArgs> | null
    /**
     * Filter, which thaitambons to fetch.
     */
    where: thaitambonsWhereUniqueInput
  }

  /**
   * thaitambons findUniqueOrThrow
   */
  export type thaitambonsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaitambons
     */
    select?: thaitambonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaitambons
     */
    omit?: thaitambonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaitambonsInclude<ExtArgs> | null
    /**
     * Filter, which thaitambons to fetch.
     */
    where: thaitambonsWhereUniqueInput
  }

  /**
   * thaitambons findFirst
   */
  export type thaitambonsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaitambons
     */
    select?: thaitambonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaitambons
     */
    omit?: thaitambonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaitambonsInclude<ExtArgs> | null
    /**
     * Filter, which thaitambons to fetch.
     */
    where?: thaitambonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thaitambons to fetch.
     */
    orderBy?: thaitambonsOrderByWithRelationInput | thaitambonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for thaitambons.
     */
    cursor?: thaitambonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thaitambons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thaitambons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of thaitambons.
     */
    distinct?: ThaitambonsScalarFieldEnum | ThaitambonsScalarFieldEnum[]
  }

  /**
   * thaitambons findFirstOrThrow
   */
  export type thaitambonsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaitambons
     */
    select?: thaitambonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaitambons
     */
    omit?: thaitambonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaitambonsInclude<ExtArgs> | null
    /**
     * Filter, which thaitambons to fetch.
     */
    where?: thaitambonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thaitambons to fetch.
     */
    orderBy?: thaitambonsOrderByWithRelationInput | thaitambonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for thaitambons.
     */
    cursor?: thaitambonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thaitambons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thaitambons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of thaitambons.
     */
    distinct?: ThaitambonsScalarFieldEnum | ThaitambonsScalarFieldEnum[]
  }

  /**
   * thaitambons findMany
   */
  export type thaitambonsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaitambons
     */
    select?: thaitambonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaitambons
     */
    omit?: thaitambonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaitambonsInclude<ExtArgs> | null
    /**
     * Filter, which thaitambons to fetch.
     */
    where?: thaitambonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thaitambons to fetch.
     */
    orderBy?: thaitambonsOrderByWithRelationInput | thaitambonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing thaitambons.
     */
    cursor?: thaitambonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thaitambons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thaitambons.
     */
    skip?: number
    distinct?: ThaitambonsScalarFieldEnum | ThaitambonsScalarFieldEnum[]
  }

  /**
   * thaitambons create
   */
  export type thaitambonsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaitambons
     */
    select?: thaitambonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaitambons
     */
    omit?: thaitambonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaitambonsInclude<ExtArgs> | null
    /**
     * The data needed to create a thaitambons.
     */
    data: XOR<thaitambonsCreateInput, thaitambonsUncheckedCreateInput>
  }

  /**
   * thaitambons createMany
   */
  export type thaitambonsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many thaitambons.
     */
    data: thaitambonsCreateManyInput | thaitambonsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * thaitambons update
   */
  export type thaitambonsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaitambons
     */
    select?: thaitambonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaitambons
     */
    omit?: thaitambonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaitambonsInclude<ExtArgs> | null
    /**
     * The data needed to update a thaitambons.
     */
    data: XOR<thaitambonsUpdateInput, thaitambonsUncheckedUpdateInput>
    /**
     * Choose, which thaitambons to update.
     */
    where: thaitambonsWhereUniqueInput
  }

  /**
   * thaitambons updateMany
   */
  export type thaitambonsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update thaitambons.
     */
    data: XOR<thaitambonsUpdateManyMutationInput, thaitambonsUncheckedUpdateManyInput>
    /**
     * Filter which thaitambons to update
     */
    where?: thaitambonsWhereInput
    /**
     * Limit how many thaitambons to update.
     */
    limit?: number
  }

  /**
   * thaitambons upsert
   */
  export type thaitambonsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaitambons
     */
    select?: thaitambonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaitambons
     */
    omit?: thaitambonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaitambonsInclude<ExtArgs> | null
    /**
     * The filter to search for the thaitambons to update in case it exists.
     */
    where: thaitambonsWhereUniqueInput
    /**
     * In case the thaitambons found by the `where` argument doesn't exist, create a new thaitambons with this data.
     */
    create: XOR<thaitambonsCreateInput, thaitambonsUncheckedCreateInput>
    /**
     * In case the thaitambons was found with the provided `where` argument, update it with this data.
     */
    update: XOR<thaitambonsUpdateInput, thaitambonsUncheckedUpdateInput>
  }

  /**
   * thaitambons delete
   */
  export type thaitambonsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaitambons
     */
    select?: thaitambonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaitambons
     */
    omit?: thaitambonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaitambonsInclude<ExtArgs> | null
    /**
     * Filter which thaitambons to delete.
     */
    where: thaitambonsWhereUniqueInput
  }

  /**
   * thaitambons deleteMany
   */
  export type thaitambonsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which thaitambons to delete
     */
    where?: thaitambonsWhereInput
    /**
     * Limit how many thaitambons to delete.
     */
    limit?: number
  }

  /**
   * thaitambons.shippingAddresses
   */
  export type thaitambons$shippingAddressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingInfo
     */
    select?: ShippingInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShippingInfo
     */
    omit?: ShippingInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShippingInfoInclude<ExtArgs> | null
    where?: ShippingInfoWhereInput
    orderBy?: ShippingInfoOrderByWithRelationInput | ShippingInfoOrderByWithRelationInput[]
    cursor?: ShippingInfoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShippingInfoScalarFieldEnum | ShippingInfoScalarFieldEnum[]
  }

  /**
   * thaitambons without action
   */
  export type thaitambonsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thaitambons
     */
    select?: thaitambonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the thaitambons
     */
    omit?: thaitambonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: thaitambonsInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    totalAmount: Decimal | null
    shippingCost: Decimal | null
    discount: Decimal | null
    finalAmount: Decimal | null
  }

  export type OrderSumAggregateOutputType = {
    id: number | null
    userId: number | null
    totalAmount: Decimal | null
    shippingCost: Decimal | null
    discount: Decimal | null
    finalAmount: Decimal | null
  }

  export type OrderMinAggregateOutputType = {
    id: number | null
    orderNumber: string | null
    userId: number | null
    status: $Enums.OrderStatus | null
    totalAmount: Decimal | null
    shippingCost: Decimal | null
    discount: Decimal | null
    discountCode: string | null
    finalAmount: Decimal | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentStatus: $Enums.PaymentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    adminComment: string | null
    stripeSessionId: string | null
    stripePaymentMethodType: string | null
  }

  export type OrderMaxAggregateOutputType = {
    id: number | null
    orderNumber: string | null
    userId: number | null
    status: $Enums.OrderStatus | null
    totalAmount: Decimal | null
    shippingCost: Decimal | null
    discount: Decimal | null
    discountCode: string | null
    finalAmount: Decimal | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentStatus: $Enums.PaymentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    adminComment: string | null
    stripeSessionId: string | null
    stripePaymentMethodType: string | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    orderNumber: number
    userId: number
    status: number
    totalAmount: number
    shippingCost: number
    discount: number
    discountCode: number
    finalAmount: number
    paymentMethod: number
    paymentStatus: number
    createdAt: number
    updatedAt: number
    adminComment: number
    stripeSessionId: number
    stripePaymentMethodType: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
    shippingCost?: true
    discount?: true
    finalAmount?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
    shippingCost?: true
    discount?: true
    finalAmount?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    orderNumber?: true
    userId?: true
    status?: true
    totalAmount?: true
    shippingCost?: true
    discount?: true
    discountCode?: true
    finalAmount?: true
    paymentMethod?: true
    paymentStatus?: true
    createdAt?: true
    updatedAt?: true
    adminComment?: true
    stripeSessionId?: true
    stripePaymentMethodType?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    orderNumber?: true
    userId?: true
    status?: true
    totalAmount?: true
    shippingCost?: true
    discount?: true
    discountCode?: true
    finalAmount?: true
    paymentMethod?: true
    paymentStatus?: true
    createdAt?: true
    updatedAt?: true
    adminComment?: true
    stripeSessionId?: true
    stripePaymentMethodType?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    orderNumber?: true
    userId?: true
    status?: true
    totalAmount?: true
    shippingCost?: true
    discount?: true
    discountCode?: true
    finalAmount?: true
    paymentMethod?: true
    paymentStatus?: true
    createdAt?: true
    updatedAt?: true
    adminComment?: true
    stripeSessionId?: true
    stripePaymentMethodType?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: number
    orderNumber: string
    userId: number | null
    status: $Enums.OrderStatus
    totalAmount: Decimal
    shippingCost: Decimal
    discount: Decimal
    discountCode: string | null
    finalAmount: Decimal
    paymentMethod: $Enums.PaymentMethod
    paymentStatus: $Enums.PaymentStatus
    createdAt: Date
    updatedAt: Date
    adminComment: string | null
    stripeSessionId: string | null
    stripePaymentMethodType: string | null
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    userId?: boolean
    status?: boolean
    totalAmount?: boolean
    shippingCost?: boolean
    discount?: boolean
    discountCode?: boolean
    finalAmount?: boolean
    paymentMethod?: boolean
    paymentStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminComment?: boolean
    stripeSessionId?: boolean
    stripePaymentMethodType?: boolean
    customerInfo?: boolean | Order$customerInfoArgs<ExtArgs>
    orderItems?: boolean | Order$orderItemsArgs<ExtArgs>
    paymentInfo?: boolean | Order$paymentInfoArgs<ExtArgs>
    shippingInfo?: boolean | Order$shippingInfoArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>



  export type OrderSelectScalar = {
    id?: boolean
    orderNumber?: boolean
    userId?: boolean
    status?: boolean
    totalAmount?: boolean
    shippingCost?: boolean
    discount?: boolean
    discountCode?: boolean
    finalAmount?: boolean
    paymentMethod?: boolean
    paymentStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminComment?: boolean
    stripeSessionId?: boolean
    stripePaymentMethodType?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderNumber" | "userId" | "status" | "totalAmount" | "shippingCost" | "discount" | "discountCode" | "finalAmount" | "paymentMethod" | "paymentStatus" | "createdAt" | "updatedAt" | "adminComment" | "stripeSessionId" | "stripePaymentMethodType", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customerInfo?: boolean | Order$customerInfoArgs<ExtArgs>
    orderItems?: boolean | Order$orderItemsArgs<ExtArgs>
    paymentInfo?: boolean | Order$paymentInfoArgs<ExtArgs>
    shippingInfo?: boolean | Order$shippingInfoArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      customerInfo: Prisma.$CustomerInfoPayload<ExtArgs> | null
      orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
      paymentInfo: Prisma.$PaymentInfoPayload<ExtArgs> | null
      shippingInfo: Prisma.$ShippingInfoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orderNumber: string
      userId: number | null
      status: $Enums.OrderStatus
      totalAmount: Prisma.Decimal
      shippingCost: Prisma.Decimal
      discount: Prisma.Decimal
      discountCode: string | null
      finalAmount: Prisma.Decimal
      paymentMethod: $Enums.PaymentMethod
      paymentStatus: $Enums.PaymentStatus
      createdAt: Date
      updatedAt: Date
      adminComment: string | null
      stripeSessionId: string | null
      stripePaymentMethodType: string | null
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customerInfo<T extends Order$customerInfoArgs<ExtArgs> = {}>(args?: Subset<T, Order$customerInfoArgs<ExtArgs>>): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    orderItems<T extends Order$orderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Order$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    paymentInfo<T extends Order$paymentInfoArgs<ExtArgs> = {}>(args?: Subset<T, Order$paymentInfoArgs<ExtArgs>>): Prisma__PaymentInfoClient<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    shippingInfo<T extends Order$shippingInfoArgs<ExtArgs> = {}>(args?: Subset<T, Order$shippingInfoArgs<ExtArgs>>): Prisma__ShippingInfoClient<$Result.GetResult<Prisma.$ShippingInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'Int'>
    readonly orderNumber: FieldRef<"Order", 'String'>
    readonly userId: FieldRef<"Order", 'Int'>
    readonly status: FieldRef<"Order", 'OrderStatus'>
    readonly totalAmount: FieldRef<"Order", 'Decimal'>
    readonly shippingCost: FieldRef<"Order", 'Decimal'>
    readonly discount: FieldRef<"Order", 'Decimal'>
    readonly discountCode: FieldRef<"Order", 'String'>
    readonly finalAmount: FieldRef<"Order", 'Decimal'>
    readonly paymentMethod: FieldRef<"Order", 'PaymentMethod'>
    readonly paymentStatus: FieldRef<"Order", 'PaymentStatus'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
    readonly updatedAt: FieldRef<"Order", 'DateTime'>
    readonly adminComment: FieldRef<"Order", 'String'>
    readonly stripeSessionId: FieldRef<"Order", 'String'>
    readonly stripePaymentMethodType: FieldRef<"Order", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to delete.
     */
    limit?: number
  }

  /**
   * Order.customerInfo
   */
  export type Order$customerInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerInfo
     */
    omit?: CustomerInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    where?: CustomerInfoWhereInput
  }

  /**
   * Order.orderItems
   */
  export type Order$orderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Order.paymentInfo
   */
  export type Order$paymentInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInfo
     */
    omit?: PaymentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    where?: PaymentInfoWhereInput
  }

  /**
   * Order.shippingInfo
   */
  export type Order$shippingInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingInfo
     */
    select?: ShippingInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShippingInfo
     */
    omit?: ShippingInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShippingInfoInclude<ExtArgs> | null
    where?: ShippingInfoWhereInput
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model OrderItem
   */

  export type AggregateOrderItem = {
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  export type OrderItemAvgAggregateOutputType = {
    id: number | null
    orderId: number | null
    productId: number | null
    quantity: number | null
    unitPrice: Decimal | null
    totalPrice: Decimal | null
  }

  export type OrderItemSumAggregateOutputType = {
    id: number | null
    orderId: number | null
    productId: number | null
    quantity: number | null
    unitPrice: Decimal | null
    totalPrice: Decimal | null
  }

  export type OrderItemMinAggregateOutputType = {
    id: number | null
    orderId: number | null
    productId: number | null
    productName: string | null
    quantity: number | null
    unitPrice: Decimal | null
    totalPrice: Decimal | null
    productImg: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderItemMaxAggregateOutputType = {
    id: number | null
    orderId: number | null
    productId: number | null
    productName: string | null
    quantity: number | null
    unitPrice: Decimal | null
    totalPrice: Decimal | null
    productImg: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderItemCountAggregateOutputType = {
    id: number
    orderId: number
    productId: number
    productName: number
    quantity: number
    unitPrice: number
    totalPrice: number
    productImg: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderItemAvgAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type OrderItemSumAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type OrderItemMinAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    productName?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    productImg?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderItemMaxAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    productName?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    productImg?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderItemCountAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    productName?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    productImg?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItem to aggregate.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderItems
    **/
    _count?: true | OrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderItemMaxAggregateInputType
  }

  export type GetOrderItemAggregateType<T extends OrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderItem[P]>
      : GetScalarType<T[P], AggregateOrderItem[P]>
  }




  export type OrderItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithAggregationInput | OrderItemOrderByWithAggregationInput[]
    by: OrderItemScalarFieldEnum[] | OrderItemScalarFieldEnum
    having?: OrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderItemCountAggregateInputType | true
    _avg?: OrderItemAvgAggregateInputType
    _sum?: OrderItemSumAggregateInputType
    _min?: OrderItemMinAggregateInputType
    _max?: OrderItemMaxAggregateInputType
  }

  export type OrderItemGroupByOutputType = {
    id: number
    orderId: number
    productId: number
    productName: string
    quantity: number
    unitPrice: Decimal
    totalPrice: Decimal
    productImg: string | null
    createdAt: Date
    updatedAt: Date
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  type GetOrderItemGroupByPayload<T extends OrderItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
            : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
        }
      >
    >


  export type OrderItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    productId?: boolean
    productName?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    productImg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>



  export type OrderItemSelectScalar = {
    id?: boolean
    orderId?: boolean
    productId?: boolean
    productName?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    productImg?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrderItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "productId" | "productName" | "quantity" | "unitPrice" | "totalPrice" | "productImg" | "createdAt" | "updatedAt", ExtArgs["result"]["orderItem"]>
  export type OrderItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $OrderItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderItem"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orderId: number
      productId: number
      productName: string
      quantity: number
      unitPrice: Prisma.Decimal
      totalPrice: Prisma.Decimal
      productImg: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["orderItem"]>
    composites: {}
  }

  type OrderItemGetPayload<S extends boolean | null | undefined | OrderItemDefaultArgs> = $Result.GetResult<Prisma.$OrderItemPayload, S>

  type OrderItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderItemCountAggregateInputType | true
    }

  export interface OrderItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderItem'], meta: { name: 'OrderItem' } }
    /**
     * Find zero or one OrderItem that matches the filter.
     * @param {OrderItemFindUniqueArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderItemFindUniqueArgs>(args: SelectSubset<T, OrderItemFindUniqueArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderItemFindUniqueOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderItemFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderItemFindFirstArgs>(args?: SelectSubset<T, OrderItemFindFirstArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderItemFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderItems
     * const orderItems = await prisma.orderItem.findMany()
     * 
     * // Get first 10 OrderItems
     * const orderItems = await prisma.orderItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderItemFindManyArgs>(args?: SelectSubset<T, OrderItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderItem.
     * @param {OrderItemCreateArgs} args - Arguments to create a OrderItem.
     * @example
     * // Create one OrderItem
     * const OrderItem = await prisma.orderItem.create({
     *   data: {
     *     // ... data to create a OrderItem
     *   }
     * })
     * 
     */
    create<T extends OrderItemCreateArgs>(args: SelectSubset<T, OrderItemCreateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderItems.
     * @param {OrderItemCreateManyArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderItemCreateManyArgs>(args?: SelectSubset<T, OrderItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OrderItem.
     * @param {OrderItemDeleteArgs} args - Arguments to delete one OrderItem.
     * @example
     * // Delete one OrderItem
     * const OrderItem = await prisma.orderItem.delete({
     *   where: {
     *     // ... filter to delete one OrderItem
     *   }
     * })
     * 
     */
    delete<T extends OrderItemDeleteArgs>(args: SelectSubset<T, OrderItemDeleteArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderItem.
     * @param {OrderItemUpdateArgs} args - Arguments to update one OrderItem.
     * @example
     * // Update one OrderItem
     * const orderItem = await prisma.orderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderItemUpdateArgs>(args: SelectSubset<T, OrderItemUpdateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderItems.
     * @param {OrderItemDeleteManyArgs} args - Arguments to filter OrderItems to delete.
     * @example
     * // Delete a few OrderItems
     * const { count } = await prisma.orderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderItemDeleteManyArgs>(args?: SelectSubset<T, OrderItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderItemUpdateManyArgs>(args: SelectSubset<T, OrderItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrderItem.
     * @param {OrderItemUpsertArgs} args - Arguments to update or create a OrderItem.
     * @example
     * // Update or create a OrderItem
     * const orderItem = await prisma.orderItem.upsert({
     *   create: {
     *     // ... data to create a OrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderItem we want to update
     *   }
     * })
     */
    upsert<T extends OrderItemUpsertArgs>(args: SelectSubset<T, OrderItemUpsertArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemCountArgs} args - Arguments to filter OrderItems to count.
     * @example
     * // Count the number of OrderItems
     * const count = await prisma.orderItem.count({
     *   where: {
     *     // ... the filter for the OrderItems we want to count
     *   }
     * })
    **/
    count<T extends OrderItemCountArgs>(
      args?: Subset<T, OrderItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderItemAggregateArgs>(args: Subset<T, OrderItemAggregateArgs>): Prisma.PrismaPromise<GetOrderItemAggregateType<T>>

    /**
     * Group by OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderItemGroupByArgs['orderBy'] }
        : { orderBy?: OrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderItem model
   */
  readonly fields: OrderItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderItem model
   */
  interface OrderItemFieldRefs {
    readonly id: FieldRef<"OrderItem", 'Int'>
    readonly orderId: FieldRef<"OrderItem", 'Int'>
    readonly productId: FieldRef<"OrderItem", 'Int'>
    readonly productName: FieldRef<"OrderItem", 'String'>
    readonly quantity: FieldRef<"OrderItem", 'Int'>
    readonly unitPrice: FieldRef<"OrderItem", 'Decimal'>
    readonly totalPrice: FieldRef<"OrderItem", 'Decimal'>
    readonly productImg: FieldRef<"OrderItem", 'String'>
    readonly createdAt: FieldRef<"OrderItem", 'DateTime'>
    readonly updatedAt: FieldRef<"OrderItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OrderItem findUnique
   */
  export type OrderItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findUniqueOrThrow
   */
  export type OrderItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findFirst
   */
  export type OrderItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findFirstOrThrow
   */
  export type OrderItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findMany
   */
  export type OrderItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItems to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem create
   */
  export type OrderItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderItem.
     */
    data: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
  }

  /**
   * OrderItem createMany
   */
  export type OrderItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderItem update
   */
  export type OrderItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderItem.
     */
    data: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
    /**
     * Choose, which OrderItem to update.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem updateMany
   */
  export type OrderItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
  }

  /**
   * OrderItem upsert
   */
  export type OrderItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderItem to update in case it exists.
     */
    where: OrderItemWhereUniqueInput
    /**
     * In case the OrderItem found by the `where` argument doesn't exist, create a new OrderItem with this data.
     */
    create: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
    /**
     * In case the OrderItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
  }

  /**
   * OrderItem delete
   */
  export type OrderItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter which OrderItem to delete.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem deleteMany
   */
  export type OrderItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItems to delete
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to delete.
     */
    limit?: number
  }

  /**
   * OrderItem without action
   */
  export type OrderItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
  }


  /**
   * Model CustomerInfo
   */

  export type AggregateCustomerInfo = {
    _count: CustomerInfoCountAggregateOutputType | null
    _avg: CustomerInfoAvgAggregateOutputType | null
    _sum: CustomerInfoSumAggregateOutputType | null
    _min: CustomerInfoMinAggregateOutputType | null
    _max: CustomerInfoMaxAggregateOutputType | null
  }

  export type CustomerInfoAvgAggregateOutputType = {
    id: number | null
    orderId: number | null
  }

  export type CustomerInfoSumAggregateOutputType = {
    id: number | null
    orderId: number | null
  }

  export type CustomerInfoMinAggregateOutputType = {
    id: number | null
    orderId: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    note: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerInfoMaxAggregateOutputType = {
    id: number | null
    orderId: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    note: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerInfoCountAggregateOutputType = {
    id: number
    orderId: number
    firstName: number
    lastName: number
    email: number
    phone: number
    note: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerInfoAvgAggregateInputType = {
    id?: true
    orderId?: true
  }

  export type CustomerInfoSumAggregateInputType = {
    id?: true
    orderId?: true
  }

  export type CustomerInfoMinAggregateInputType = {
    id?: true
    orderId?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    note?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerInfoMaxAggregateInputType = {
    id?: true
    orderId?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    note?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerInfoCountAggregateInputType = {
    id?: true
    orderId?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    note?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerInfo to aggregate.
     */
    where?: CustomerInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerInfos to fetch.
     */
    orderBy?: CustomerInfoOrderByWithRelationInput | CustomerInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerInfos
    **/
    _count?: true | CustomerInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerInfoMaxAggregateInputType
  }

  export type GetCustomerInfoAggregateType<T extends CustomerInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerInfo[P]>
      : GetScalarType<T[P], AggregateCustomerInfo[P]>
  }




  export type CustomerInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerInfoWhereInput
    orderBy?: CustomerInfoOrderByWithAggregationInput | CustomerInfoOrderByWithAggregationInput[]
    by: CustomerInfoScalarFieldEnum[] | CustomerInfoScalarFieldEnum
    having?: CustomerInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerInfoCountAggregateInputType | true
    _avg?: CustomerInfoAvgAggregateInputType
    _sum?: CustomerInfoSumAggregateInputType
    _min?: CustomerInfoMinAggregateInputType
    _max?: CustomerInfoMaxAggregateInputType
  }

  export type CustomerInfoGroupByOutputType = {
    id: number
    orderId: number
    firstName: string
    lastName: string
    email: string
    phone: string
    note: string | null
    createdAt: Date
    updatedAt: Date
    _count: CustomerInfoCountAggregateOutputType | null
    _avg: CustomerInfoAvgAggregateOutputType | null
    _sum: CustomerInfoSumAggregateOutputType | null
    _min: CustomerInfoMinAggregateOutputType | null
    _max: CustomerInfoMaxAggregateOutputType | null
  }

  type GetCustomerInfoGroupByPayload<T extends CustomerInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerInfoGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerInfoGroupByOutputType[P]>
        }
      >
    >


  export type CustomerInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    note?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerInfo"]>



  export type CustomerInfoSelectScalar = {
    id?: boolean
    orderId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    note?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerInfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "firstName" | "lastName" | "email" | "phone" | "note" | "createdAt" | "updatedAt", ExtArgs["result"]["customerInfo"]>
  export type CustomerInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }

  export type $CustomerInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerInfo"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orderId: number
      firstName: string
      lastName: string
      email: string
      phone: string
      note: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customerInfo"]>
    composites: {}
  }

  type CustomerInfoGetPayload<S extends boolean | null | undefined | CustomerInfoDefaultArgs> = $Result.GetResult<Prisma.$CustomerInfoPayload, S>

  type CustomerInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerInfoCountAggregateInputType | true
    }

  export interface CustomerInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerInfo'], meta: { name: 'CustomerInfo' } }
    /**
     * Find zero or one CustomerInfo that matches the filter.
     * @param {CustomerInfoFindUniqueArgs} args - Arguments to find a CustomerInfo
     * @example
     * // Get one CustomerInfo
     * const customerInfo = await prisma.customerInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerInfoFindUniqueArgs>(args: SelectSubset<T, CustomerInfoFindUniqueArgs<ExtArgs>>): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CustomerInfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerInfoFindUniqueOrThrowArgs} args - Arguments to find a CustomerInfo
     * @example
     * // Get one CustomerInfo
     * const customerInfo = await prisma.customerInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerInfoFindFirstArgs} args - Arguments to find a CustomerInfo
     * @example
     * // Get one CustomerInfo
     * const customerInfo = await prisma.customerInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerInfoFindFirstArgs>(args?: SelectSubset<T, CustomerInfoFindFirstArgs<ExtArgs>>): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerInfoFindFirstOrThrowArgs} args - Arguments to find a CustomerInfo
     * @example
     * // Get one CustomerInfo
     * const customerInfo = await prisma.customerInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CustomerInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerInfos
     * const customerInfos = await prisma.customerInfo.findMany()
     * 
     * // Get first 10 CustomerInfos
     * const customerInfos = await prisma.customerInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerInfoWithIdOnly = await prisma.customerInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerInfoFindManyArgs>(args?: SelectSubset<T, CustomerInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CustomerInfo.
     * @param {CustomerInfoCreateArgs} args - Arguments to create a CustomerInfo.
     * @example
     * // Create one CustomerInfo
     * const CustomerInfo = await prisma.customerInfo.create({
     *   data: {
     *     // ... data to create a CustomerInfo
     *   }
     * })
     * 
     */
    create<T extends CustomerInfoCreateArgs>(args: SelectSubset<T, CustomerInfoCreateArgs<ExtArgs>>): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CustomerInfos.
     * @param {CustomerInfoCreateManyArgs} args - Arguments to create many CustomerInfos.
     * @example
     * // Create many CustomerInfos
     * const customerInfo = await prisma.customerInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerInfoCreateManyArgs>(args?: SelectSubset<T, CustomerInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CustomerInfo.
     * @param {CustomerInfoDeleteArgs} args - Arguments to delete one CustomerInfo.
     * @example
     * // Delete one CustomerInfo
     * const CustomerInfo = await prisma.customerInfo.delete({
     *   where: {
     *     // ... filter to delete one CustomerInfo
     *   }
     * })
     * 
     */
    delete<T extends CustomerInfoDeleteArgs>(args: SelectSubset<T, CustomerInfoDeleteArgs<ExtArgs>>): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CustomerInfo.
     * @param {CustomerInfoUpdateArgs} args - Arguments to update one CustomerInfo.
     * @example
     * // Update one CustomerInfo
     * const customerInfo = await prisma.customerInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerInfoUpdateArgs>(args: SelectSubset<T, CustomerInfoUpdateArgs<ExtArgs>>): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CustomerInfos.
     * @param {CustomerInfoDeleteManyArgs} args - Arguments to filter CustomerInfos to delete.
     * @example
     * // Delete a few CustomerInfos
     * const { count } = await prisma.customerInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerInfoDeleteManyArgs>(args?: SelectSubset<T, CustomerInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerInfos
     * const customerInfo = await prisma.customerInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerInfoUpdateManyArgs>(args: SelectSubset<T, CustomerInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CustomerInfo.
     * @param {CustomerInfoUpsertArgs} args - Arguments to update or create a CustomerInfo.
     * @example
     * // Update or create a CustomerInfo
     * const customerInfo = await prisma.customerInfo.upsert({
     *   create: {
     *     // ... data to create a CustomerInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerInfo we want to update
     *   }
     * })
     */
    upsert<T extends CustomerInfoUpsertArgs>(args: SelectSubset<T, CustomerInfoUpsertArgs<ExtArgs>>): Prisma__CustomerInfoClient<$Result.GetResult<Prisma.$CustomerInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CustomerInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerInfoCountArgs} args - Arguments to filter CustomerInfos to count.
     * @example
     * // Count the number of CustomerInfos
     * const count = await prisma.customerInfo.count({
     *   where: {
     *     // ... the filter for the CustomerInfos we want to count
     *   }
     * })
    **/
    count<T extends CustomerInfoCountArgs>(
      args?: Subset<T, CustomerInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerInfoAggregateArgs>(args: Subset<T, CustomerInfoAggregateArgs>): Prisma.PrismaPromise<GetCustomerInfoAggregateType<T>>

    /**
     * Group by CustomerInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerInfoGroupByArgs['orderBy'] }
        : { orderBy?: CustomerInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerInfo model
   */
  readonly fields: CustomerInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomerInfo model
   */
  interface CustomerInfoFieldRefs {
    readonly id: FieldRef<"CustomerInfo", 'Int'>
    readonly orderId: FieldRef<"CustomerInfo", 'Int'>
    readonly firstName: FieldRef<"CustomerInfo", 'String'>
    readonly lastName: FieldRef<"CustomerInfo", 'String'>
    readonly email: FieldRef<"CustomerInfo", 'String'>
    readonly phone: FieldRef<"CustomerInfo", 'String'>
    readonly note: FieldRef<"CustomerInfo", 'String'>
    readonly createdAt: FieldRef<"CustomerInfo", 'DateTime'>
    readonly updatedAt: FieldRef<"CustomerInfo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CustomerInfo findUnique
   */
  export type CustomerInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerInfo
     */
    omit?: CustomerInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    /**
     * Filter, which CustomerInfo to fetch.
     */
    where: CustomerInfoWhereUniqueInput
  }

  /**
   * CustomerInfo findUniqueOrThrow
   */
  export type CustomerInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerInfo
     */
    omit?: CustomerInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    /**
     * Filter, which CustomerInfo to fetch.
     */
    where: CustomerInfoWhereUniqueInput
  }

  /**
   * CustomerInfo findFirst
   */
  export type CustomerInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerInfo
     */
    omit?: CustomerInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    /**
     * Filter, which CustomerInfo to fetch.
     */
    where?: CustomerInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerInfos to fetch.
     */
    orderBy?: CustomerInfoOrderByWithRelationInput | CustomerInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerInfos.
     */
    cursor?: CustomerInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerInfos.
     */
    distinct?: CustomerInfoScalarFieldEnum | CustomerInfoScalarFieldEnum[]
  }

  /**
   * CustomerInfo findFirstOrThrow
   */
  export type CustomerInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerInfo
     */
    omit?: CustomerInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    /**
     * Filter, which CustomerInfo to fetch.
     */
    where?: CustomerInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerInfos to fetch.
     */
    orderBy?: CustomerInfoOrderByWithRelationInput | CustomerInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerInfos.
     */
    cursor?: CustomerInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerInfos.
     */
    distinct?: CustomerInfoScalarFieldEnum | CustomerInfoScalarFieldEnum[]
  }

  /**
   * CustomerInfo findMany
   */
  export type CustomerInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerInfo
     */
    omit?: CustomerInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    /**
     * Filter, which CustomerInfos to fetch.
     */
    where?: CustomerInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerInfos to fetch.
     */
    orderBy?: CustomerInfoOrderByWithRelationInput | CustomerInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerInfos.
     */
    cursor?: CustomerInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerInfos.
     */
    skip?: number
    distinct?: CustomerInfoScalarFieldEnum | CustomerInfoScalarFieldEnum[]
  }

  /**
   * CustomerInfo create
   */
  export type CustomerInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerInfo
     */
    omit?: CustomerInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerInfo.
     */
    data: XOR<CustomerInfoCreateInput, CustomerInfoUncheckedCreateInput>
  }

  /**
   * CustomerInfo createMany
   */
  export type CustomerInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerInfos.
     */
    data: CustomerInfoCreateManyInput | CustomerInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomerInfo update
   */
  export type CustomerInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerInfo
     */
    omit?: CustomerInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerInfo.
     */
    data: XOR<CustomerInfoUpdateInput, CustomerInfoUncheckedUpdateInput>
    /**
     * Choose, which CustomerInfo to update.
     */
    where: CustomerInfoWhereUniqueInput
  }

  /**
   * CustomerInfo updateMany
   */
  export type CustomerInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerInfos.
     */
    data: XOR<CustomerInfoUpdateManyMutationInput, CustomerInfoUncheckedUpdateManyInput>
    /**
     * Filter which CustomerInfos to update
     */
    where?: CustomerInfoWhereInput
    /**
     * Limit how many CustomerInfos to update.
     */
    limit?: number
  }

  /**
   * CustomerInfo upsert
   */
  export type CustomerInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerInfo
     */
    omit?: CustomerInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerInfo to update in case it exists.
     */
    where: CustomerInfoWhereUniqueInput
    /**
     * In case the CustomerInfo found by the `where` argument doesn't exist, create a new CustomerInfo with this data.
     */
    create: XOR<CustomerInfoCreateInput, CustomerInfoUncheckedCreateInput>
    /**
     * In case the CustomerInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerInfoUpdateInput, CustomerInfoUncheckedUpdateInput>
  }

  /**
   * CustomerInfo delete
   */
  export type CustomerInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerInfo
     */
    omit?: CustomerInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInfoInclude<ExtArgs> | null
    /**
     * Filter which CustomerInfo to delete.
     */
    where: CustomerInfoWhereUniqueInput
  }

  /**
   * CustomerInfo deleteMany
   */
  export type CustomerInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerInfos to delete
     */
    where?: CustomerInfoWhereInput
    /**
     * Limit how many CustomerInfos to delete.
     */
    limit?: number
  }

  /**
   * CustomerInfo without action
   */
  export type CustomerInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerInfo
     */
    select?: CustomerInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerInfo
     */
    omit?: CustomerInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInfoInclude<ExtArgs> | null
  }


  /**
   * Model ShippingInfo
   */

  export type AggregateShippingInfo = {
    _count: ShippingInfoCountAggregateOutputType | null
    _avg: ShippingInfoAvgAggregateOutputType | null
    _sum: ShippingInfoSumAggregateOutputType | null
    _min: ShippingInfoMinAggregateOutputType | null
    _max: ShippingInfoMaxAggregateOutputType | null
  }

  export type ShippingInfoAvgAggregateOutputType = {
    id: number | null
    orderId: number | null
    provinceId: number | null
    amphureId: number | null
    tambonId: number | null
  }

  export type ShippingInfoSumAggregateOutputType = {
    id: number | null
    orderId: number | null
    provinceId: number | null
    amphureId: number | null
    tambonId: number | null
  }

  export type ShippingInfoMinAggregateOutputType = {
    id: number | null
    orderId: number | null
    receiverName: string | null
    receiverLastname: string | null
    receiverPhone: string | null
    addressLine: string | null
    addressLine2: string | null
    provinceId: number | null
    provinceName: string | null
    amphureId: number | null
    amphureName: string | null
    tambonId: number | null
    tambonName: string | null
    zipCode: string | null
    deliveryDate: Date | null
    deliveryTime: string | null
    cardMessage: string | null
    additionalNote: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShippingInfoMaxAggregateOutputType = {
    id: number | null
    orderId: number | null
    receiverName: string | null
    receiverLastname: string | null
    receiverPhone: string | null
    addressLine: string | null
    addressLine2: string | null
    provinceId: number | null
    provinceName: string | null
    amphureId: number | null
    amphureName: string | null
    tambonId: number | null
    tambonName: string | null
    zipCode: string | null
    deliveryDate: Date | null
    deliveryTime: string | null
    cardMessage: string | null
    additionalNote: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShippingInfoCountAggregateOutputType = {
    id: number
    orderId: number
    receiverName: number
    receiverLastname: number
    receiverPhone: number
    addressLine: number
    addressLine2: number
    provinceId: number
    provinceName: number
    amphureId: number
    amphureName: number
    tambonId: number
    tambonName: number
    zipCode: number
    deliveryDate: number
    deliveryTime: number
    cardMessage: number
    additionalNote: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ShippingInfoAvgAggregateInputType = {
    id?: true
    orderId?: true
    provinceId?: true
    amphureId?: true
    tambonId?: true
  }

  export type ShippingInfoSumAggregateInputType = {
    id?: true
    orderId?: true
    provinceId?: true
    amphureId?: true
    tambonId?: true
  }

  export type ShippingInfoMinAggregateInputType = {
    id?: true
    orderId?: true
    receiverName?: true
    receiverLastname?: true
    receiverPhone?: true
    addressLine?: true
    addressLine2?: true
    provinceId?: true
    provinceName?: true
    amphureId?: true
    amphureName?: true
    tambonId?: true
    tambonName?: true
    zipCode?: true
    deliveryDate?: true
    deliveryTime?: true
    cardMessage?: true
    additionalNote?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShippingInfoMaxAggregateInputType = {
    id?: true
    orderId?: true
    receiverName?: true
    receiverLastname?: true
    receiverPhone?: true
    addressLine?: true
    addressLine2?: true
    provinceId?: true
    provinceName?: true
    amphureId?: true
    amphureName?: true
    tambonId?: true
    tambonName?: true
    zipCode?: true
    deliveryDate?: true
    deliveryTime?: true
    cardMessage?: true
    additionalNote?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShippingInfoCountAggregateInputType = {
    id?: true
    orderId?: true
    receiverName?: true
    receiverLastname?: true
    receiverPhone?: true
    addressLine?: true
    addressLine2?: true
    provinceId?: true
    provinceName?: true
    amphureId?: true
    amphureName?: true
    tambonId?: true
    tambonName?: true
    zipCode?: true
    deliveryDate?: true
    deliveryTime?: true
    cardMessage?: true
    additionalNote?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ShippingInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShippingInfo to aggregate.
     */
    where?: ShippingInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShippingInfos to fetch.
     */
    orderBy?: ShippingInfoOrderByWithRelationInput | ShippingInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShippingInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShippingInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShippingInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShippingInfos
    **/
    _count?: true | ShippingInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShippingInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShippingInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShippingInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShippingInfoMaxAggregateInputType
  }

  export type GetShippingInfoAggregateType<T extends ShippingInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateShippingInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShippingInfo[P]>
      : GetScalarType<T[P], AggregateShippingInfo[P]>
  }




  export type ShippingInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShippingInfoWhereInput
    orderBy?: ShippingInfoOrderByWithAggregationInput | ShippingInfoOrderByWithAggregationInput[]
    by: ShippingInfoScalarFieldEnum[] | ShippingInfoScalarFieldEnum
    having?: ShippingInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShippingInfoCountAggregateInputType | true
    _avg?: ShippingInfoAvgAggregateInputType
    _sum?: ShippingInfoSumAggregateInputType
    _min?: ShippingInfoMinAggregateInputType
    _max?: ShippingInfoMaxAggregateInputType
  }

  export type ShippingInfoGroupByOutputType = {
    id: number
    orderId: number
    receiverName: string
    receiverLastname: string
    receiverPhone: string
    addressLine: string
    addressLine2: string | null
    provinceId: number
    provinceName: string
    amphureId: number
    amphureName: string
    tambonId: number
    tambonName: string
    zipCode: string
    deliveryDate: Date | null
    deliveryTime: string | null
    cardMessage: string | null
    additionalNote: string | null
    createdAt: Date
    updatedAt: Date
    _count: ShippingInfoCountAggregateOutputType | null
    _avg: ShippingInfoAvgAggregateOutputType | null
    _sum: ShippingInfoSumAggregateOutputType | null
    _min: ShippingInfoMinAggregateOutputType | null
    _max: ShippingInfoMaxAggregateOutputType | null
  }

  type GetShippingInfoGroupByPayload<T extends ShippingInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShippingInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShippingInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShippingInfoGroupByOutputType[P]>
            : GetScalarType<T[P], ShippingInfoGroupByOutputType[P]>
        }
      >
    >


  export type ShippingInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    receiverName?: boolean
    receiverLastname?: boolean
    receiverPhone?: boolean
    addressLine?: boolean
    addressLine2?: boolean
    provinceId?: boolean
    provinceName?: boolean
    amphureId?: boolean
    amphureName?: boolean
    tambonId?: boolean
    tambonName?: boolean
    zipCode?: boolean
    deliveryDate?: boolean
    deliveryTime?: boolean
    cardMessage?: boolean
    additionalNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    amphure?: boolean | thaiamphuresDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
    province?: boolean | thaiprovincesDefaultArgs<ExtArgs>
    tambon?: boolean | thaitambonsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shippingInfo"]>



  export type ShippingInfoSelectScalar = {
    id?: boolean
    orderId?: boolean
    receiverName?: boolean
    receiverLastname?: boolean
    receiverPhone?: boolean
    addressLine?: boolean
    addressLine2?: boolean
    provinceId?: boolean
    provinceName?: boolean
    amphureId?: boolean
    amphureName?: boolean
    tambonId?: boolean
    tambonName?: boolean
    zipCode?: boolean
    deliveryDate?: boolean
    deliveryTime?: boolean
    cardMessage?: boolean
    additionalNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ShippingInfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "receiverName" | "receiverLastname" | "receiverPhone" | "addressLine" | "addressLine2" | "provinceId" | "provinceName" | "amphureId" | "amphureName" | "tambonId" | "tambonName" | "zipCode" | "deliveryDate" | "deliveryTime" | "cardMessage" | "additionalNote" | "createdAt" | "updatedAt", ExtArgs["result"]["shippingInfo"]>
  export type ShippingInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    amphure?: boolean | thaiamphuresDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
    province?: boolean | thaiprovincesDefaultArgs<ExtArgs>
    tambon?: boolean | thaitambonsDefaultArgs<ExtArgs>
  }

  export type $ShippingInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShippingInfo"
    objects: {
      amphure: Prisma.$thaiamphuresPayload<ExtArgs>
      order: Prisma.$OrderPayload<ExtArgs>
      province: Prisma.$thaiprovincesPayload<ExtArgs>
      tambon: Prisma.$thaitambonsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orderId: number
      receiverName: string
      receiverLastname: string
      receiverPhone: string
      addressLine: string
      addressLine2: string | null
      provinceId: number
      provinceName: string
      amphureId: number
      amphureName: string
      tambonId: number
      tambonName: string
      zipCode: string
      deliveryDate: Date | null
      deliveryTime: string | null
      cardMessage: string | null
      additionalNote: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["shippingInfo"]>
    composites: {}
  }

  type ShippingInfoGetPayload<S extends boolean | null | undefined | ShippingInfoDefaultArgs> = $Result.GetResult<Prisma.$ShippingInfoPayload, S>

  type ShippingInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShippingInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShippingInfoCountAggregateInputType | true
    }

  export interface ShippingInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShippingInfo'], meta: { name: 'ShippingInfo' } }
    /**
     * Find zero or one ShippingInfo that matches the filter.
     * @param {ShippingInfoFindUniqueArgs} args - Arguments to find a ShippingInfo
     * @example
     * // Get one ShippingInfo
     * const shippingInfo = await prisma.shippingInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShippingInfoFindUniqueArgs>(args: SelectSubset<T, ShippingInfoFindUniqueArgs<ExtArgs>>): Prisma__ShippingInfoClient<$Result.GetResult<Prisma.$ShippingInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ShippingInfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShippingInfoFindUniqueOrThrowArgs} args - Arguments to find a ShippingInfo
     * @example
     * // Get one ShippingInfo
     * const shippingInfo = await prisma.shippingInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShippingInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, ShippingInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShippingInfoClient<$Result.GetResult<Prisma.$ShippingInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShippingInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingInfoFindFirstArgs} args - Arguments to find a ShippingInfo
     * @example
     * // Get one ShippingInfo
     * const shippingInfo = await prisma.shippingInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShippingInfoFindFirstArgs>(args?: SelectSubset<T, ShippingInfoFindFirstArgs<ExtArgs>>): Prisma__ShippingInfoClient<$Result.GetResult<Prisma.$ShippingInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShippingInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingInfoFindFirstOrThrowArgs} args - Arguments to find a ShippingInfo
     * @example
     * // Get one ShippingInfo
     * const shippingInfo = await prisma.shippingInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShippingInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, ShippingInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShippingInfoClient<$Result.GetResult<Prisma.$ShippingInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ShippingInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShippingInfos
     * const shippingInfos = await prisma.shippingInfo.findMany()
     * 
     * // Get first 10 ShippingInfos
     * const shippingInfos = await prisma.shippingInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shippingInfoWithIdOnly = await prisma.shippingInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShippingInfoFindManyArgs>(args?: SelectSubset<T, ShippingInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShippingInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ShippingInfo.
     * @param {ShippingInfoCreateArgs} args - Arguments to create a ShippingInfo.
     * @example
     * // Create one ShippingInfo
     * const ShippingInfo = await prisma.shippingInfo.create({
     *   data: {
     *     // ... data to create a ShippingInfo
     *   }
     * })
     * 
     */
    create<T extends ShippingInfoCreateArgs>(args: SelectSubset<T, ShippingInfoCreateArgs<ExtArgs>>): Prisma__ShippingInfoClient<$Result.GetResult<Prisma.$ShippingInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ShippingInfos.
     * @param {ShippingInfoCreateManyArgs} args - Arguments to create many ShippingInfos.
     * @example
     * // Create many ShippingInfos
     * const shippingInfo = await prisma.shippingInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShippingInfoCreateManyArgs>(args?: SelectSubset<T, ShippingInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ShippingInfo.
     * @param {ShippingInfoDeleteArgs} args - Arguments to delete one ShippingInfo.
     * @example
     * // Delete one ShippingInfo
     * const ShippingInfo = await prisma.shippingInfo.delete({
     *   where: {
     *     // ... filter to delete one ShippingInfo
     *   }
     * })
     * 
     */
    delete<T extends ShippingInfoDeleteArgs>(args: SelectSubset<T, ShippingInfoDeleteArgs<ExtArgs>>): Prisma__ShippingInfoClient<$Result.GetResult<Prisma.$ShippingInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ShippingInfo.
     * @param {ShippingInfoUpdateArgs} args - Arguments to update one ShippingInfo.
     * @example
     * // Update one ShippingInfo
     * const shippingInfo = await prisma.shippingInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShippingInfoUpdateArgs>(args: SelectSubset<T, ShippingInfoUpdateArgs<ExtArgs>>): Prisma__ShippingInfoClient<$Result.GetResult<Prisma.$ShippingInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ShippingInfos.
     * @param {ShippingInfoDeleteManyArgs} args - Arguments to filter ShippingInfos to delete.
     * @example
     * // Delete a few ShippingInfos
     * const { count } = await prisma.shippingInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShippingInfoDeleteManyArgs>(args?: SelectSubset<T, ShippingInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShippingInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShippingInfos
     * const shippingInfo = await prisma.shippingInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShippingInfoUpdateManyArgs>(args: SelectSubset<T, ShippingInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ShippingInfo.
     * @param {ShippingInfoUpsertArgs} args - Arguments to update or create a ShippingInfo.
     * @example
     * // Update or create a ShippingInfo
     * const shippingInfo = await prisma.shippingInfo.upsert({
     *   create: {
     *     // ... data to create a ShippingInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShippingInfo we want to update
     *   }
     * })
     */
    upsert<T extends ShippingInfoUpsertArgs>(args: SelectSubset<T, ShippingInfoUpsertArgs<ExtArgs>>): Prisma__ShippingInfoClient<$Result.GetResult<Prisma.$ShippingInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ShippingInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingInfoCountArgs} args - Arguments to filter ShippingInfos to count.
     * @example
     * // Count the number of ShippingInfos
     * const count = await prisma.shippingInfo.count({
     *   where: {
     *     // ... the filter for the ShippingInfos we want to count
     *   }
     * })
    **/
    count<T extends ShippingInfoCountArgs>(
      args?: Subset<T, ShippingInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShippingInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShippingInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShippingInfoAggregateArgs>(args: Subset<T, ShippingInfoAggregateArgs>): Prisma.PrismaPromise<GetShippingInfoAggregateType<T>>

    /**
     * Group by ShippingInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShippingInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShippingInfoGroupByArgs['orderBy'] }
        : { orderBy?: ShippingInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShippingInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShippingInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShippingInfo model
   */
  readonly fields: ShippingInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShippingInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShippingInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    amphure<T extends thaiamphuresDefaultArgs<ExtArgs> = {}>(args?: Subset<T, thaiamphuresDefaultArgs<ExtArgs>>): Prisma__thaiamphuresClient<$Result.GetResult<Prisma.$thaiamphuresPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    province<T extends thaiprovincesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, thaiprovincesDefaultArgs<ExtArgs>>): Prisma__thaiprovincesClient<$Result.GetResult<Prisma.$thaiprovincesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tambon<T extends thaitambonsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, thaitambonsDefaultArgs<ExtArgs>>): Prisma__thaitambonsClient<$Result.GetResult<Prisma.$thaitambonsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShippingInfo model
   */
  interface ShippingInfoFieldRefs {
    readonly id: FieldRef<"ShippingInfo", 'Int'>
    readonly orderId: FieldRef<"ShippingInfo", 'Int'>
    readonly receiverName: FieldRef<"ShippingInfo", 'String'>
    readonly receiverLastname: FieldRef<"ShippingInfo", 'String'>
    readonly receiverPhone: FieldRef<"ShippingInfo", 'String'>
    readonly addressLine: FieldRef<"ShippingInfo", 'String'>
    readonly addressLine2: FieldRef<"ShippingInfo", 'String'>
    readonly provinceId: FieldRef<"ShippingInfo", 'Int'>
    readonly provinceName: FieldRef<"ShippingInfo", 'String'>
    readonly amphureId: FieldRef<"ShippingInfo", 'Int'>
    readonly amphureName: FieldRef<"ShippingInfo", 'String'>
    readonly tambonId: FieldRef<"ShippingInfo", 'Int'>
    readonly tambonName: FieldRef<"ShippingInfo", 'String'>
    readonly zipCode: FieldRef<"ShippingInfo", 'String'>
    readonly deliveryDate: FieldRef<"ShippingInfo", 'DateTime'>
    readonly deliveryTime: FieldRef<"ShippingInfo", 'String'>
    readonly cardMessage: FieldRef<"ShippingInfo", 'String'>
    readonly additionalNote: FieldRef<"ShippingInfo", 'String'>
    readonly createdAt: FieldRef<"ShippingInfo", 'DateTime'>
    readonly updatedAt: FieldRef<"ShippingInfo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ShippingInfo findUnique
   */
  export type ShippingInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingInfo
     */
    select?: ShippingInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShippingInfo
     */
    omit?: ShippingInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShippingInfoInclude<ExtArgs> | null
    /**
     * Filter, which ShippingInfo to fetch.
     */
    where: ShippingInfoWhereUniqueInput
  }

  /**
   * ShippingInfo findUniqueOrThrow
   */
  export type ShippingInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingInfo
     */
    select?: ShippingInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShippingInfo
     */
    omit?: ShippingInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShippingInfoInclude<ExtArgs> | null
    /**
     * Filter, which ShippingInfo to fetch.
     */
    where: ShippingInfoWhereUniqueInput
  }

  /**
   * ShippingInfo findFirst
   */
  export type ShippingInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingInfo
     */
    select?: ShippingInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShippingInfo
     */
    omit?: ShippingInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShippingInfoInclude<ExtArgs> | null
    /**
     * Filter, which ShippingInfo to fetch.
     */
    where?: ShippingInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShippingInfos to fetch.
     */
    orderBy?: ShippingInfoOrderByWithRelationInput | ShippingInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShippingInfos.
     */
    cursor?: ShippingInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShippingInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShippingInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShippingInfos.
     */
    distinct?: ShippingInfoScalarFieldEnum | ShippingInfoScalarFieldEnum[]
  }

  /**
   * ShippingInfo findFirstOrThrow
   */
  export type ShippingInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingInfo
     */
    select?: ShippingInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShippingInfo
     */
    omit?: ShippingInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShippingInfoInclude<ExtArgs> | null
    /**
     * Filter, which ShippingInfo to fetch.
     */
    where?: ShippingInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShippingInfos to fetch.
     */
    orderBy?: ShippingInfoOrderByWithRelationInput | ShippingInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShippingInfos.
     */
    cursor?: ShippingInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShippingInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShippingInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShippingInfos.
     */
    distinct?: ShippingInfoScalarFieldEnum | ShippingInfoScalarFieldEnum[]
  }

  /**
   * ShippingInfo findMany
   */
  export type ShippingInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingInfo
     */
    select?: ShippingInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShippingInfo
     */
    omit?: ShippingInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShippingInfoInclude<ExtArgs> | null
    /**
     * Filter, which ShippingInfos to fetch.
     */
    where?: ShippingInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShippingInfos to fetch.
     */
    orderBy?: ShippingInfoOrderByWithRelationInput | ShippingInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShippingInfos.
     */
    cursor?: ShippingInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShippingInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShippingInfos.
     */
    skip?: number
    distinct?: ShippingInfoScalarFieldEnum | ShippingInfoScalarFieldEnum[]
  }

  /**
   * ShippingInfo create
   */
  export type ShippingInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingInfo
     */
    select?: ShippingInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShippingInfo
     */
    omit?: ShippingInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShippingInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a ShippingInfo.
     */
    data: XOR<ShippingInfoCreateInput, ShippingInfoUncheckedCreateInput>
  }

  /**
   * ShippingInfo createMany
   */
  export type ShippingInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShippingInfos.
     */
    data: ShippingInfoCreateManyInput | ShippingInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShippingInfo update
   */
  export type ShippingInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingInfo
     */
    select?: ShippingInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShippingInfo
     */
    omit?: ShippingInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShippingInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a ShippingInfo.
     */
    data: XOR<ShippingInfoUpdateInput, ShippingInfoUncheckedUpdateInput>
    /**
     * Choose, which ShippingInfo to update.
     */
    where: ShippingInfoWhereUniqueInput
  }

  /**
   * ShippingInfo updateMany
   */
  export type ShippingInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShippingInfos.
     */
    data: XOR<ShippingInfoUpdateManyMutationInput, ShippingInfoUncheckedUpdateManyInput>
    /**
     * Filter which ShippingInfos to update
     */
    where?: ShippingInfoWhereInput
    /**
     * Limit how many ShippingInfos to update.
     */
    limit?: number
  }

  /**
   * ShippingInfo upsert
   */
  export type ShippingInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingInfo
     */
    select?: ShippingInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShippingInfo
     */
    omit?: ShippingInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShippingInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the ShippingInfo to update in case it exists.
     */
    where: ShippingInfoWhereUniqueInput
    /**
     * In case the ShippingInfo found by the `where` argument doesn't exist, create a new ShippingInfo with this data.
     */
    create: XOR<ShippingInfoCreateInput, ShippingInfoUncheckedCreateInput>
    /**
     * In case the ShippingInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShippingInfoUpdateInput, ShippingInfoUncheckedUpdateInput>
  }

  /**
   * ShippingInfo delete
   */
  export type ShippingInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingInfo
     */
    select?: ShippingInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShippingInfo
     */
    omit?: ShippingInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShippingInfoInclude<ExtArgs> | null
    /**
     * Filter which ShippingInfo to delete.
     */
    where: ShippingInfoWhereUniqueInput
  }

  /**
   * ShippingInfo deleteMany
   */
  export type ShippingInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShippingInfos to delete
     */
    where?: ShippingInfoWhereInput
    /**
     * Limit how many ShippingInfos to delete.
     */
    limit?: number
  }

  /**
   * ShippingInfo without action
   */
  export type ShippingInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShippingInfo
     */
    select?: ShippingInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShippingInfo
     */
    omit?: ShippingInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShippingInfoInclude<ExtArgs> | null
  }


  /**
   * Model PaymentInfo
   */

  export type AggregatePaymentInfo = {
    _count: PaymentInfoCountAggregateOutputType | null
    _avg: PaymentInfoAvgAggregateOutputType | null
    _sum: PaymentInfoSumAggregateOutputType | null
    _min: PaymentInfoMinAggregateOutputType | null
    _max: PaymentInfoMaxAggregateOutputType | null
  }

  export type PaymentInfoAvgAggregateOutputType = {
    id: number | null
    orderId: number | null
    amount: Decimal | null
    verifiedBy: number | null
  }

  export type PaymentInfoSumAggregateOutputType = {
    id: number | null
    orderId: number | null
    amount: Decimal | null
    verifiedBy: number | null
  }

  export type PaymentInfoMinAggregateOutputType = {
    id: number | null
    orderId: number | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentDate: Date | null
    transactionId: string | null
    amount: Decimal | null
    bankName: string | null
    slipUrl: string | null
    status: $Enums.PaymentStatus | null
    verifiedBy: number | null
    verifiedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentInfoMaxAggregateOutputType = {
    id: number | null
    orderId: number | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentDate: Date | null
    transactionId: string | null
    amount: Decimal | null
    bankName: string | null
    slipUrl: string | null
    status: $Enums.PaymentStatus | null
    verifiedBy: number | null
    verifiedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentInfoCountAggregateOutputType = {
    id: number
    orderId: number
    paymentMethod: number
    paymentDate: number
    transactionId: number
    amount: number
    bankName: number
    slipUrl: number
    status: number
    verifiedBy: number
    verifiedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentInfoAvgAggregateInputType = {
    id?: true
    orderId?: true
    amount?: true
    verifiedBy?: true
  }

  export type PaymentInfoSumAggregateInputType = {
    id?: true
    orderId?: true
    amount?: true
    verifiedBy?: true
  }

  export type PaymentInfoMinAggregateInputType = {
    id?: true
    orderId?: true
    paymentMethod?: true
    paymentDate?: true
    transactionId?: true
    amount?: true
    bankName?: true
    slipUrl?: true
    status?: true
    verifiedBy?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentInfoMaxAggregateInputType = {
    id?: true
    orderId?: true
    paymentMethod?: true
    paymentDate?: true
    transactionId?: true
    amount?: true
    bankName?: true
    slipUrl?: true
    status?: true
    verifiedBy?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentInfoCountAggregateInputType = {
    id?: true
    orderId?: true
    paymentMethod?: true
    paymentDate?: true
    transactionId?: true
    amount?: true
    bankName?: true
    slipUrl?: true
    status?: true
    verifiedBy?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentInfo to aggregate.
     */
    where?: PaymentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentInfos to fetch.
     */
    orderBy?: PaymentInfoOrderByWithRelationInput | PaymentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentInfos
    **/
    _count?: true | PaymentInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentInfoMaxAggregateInputType
  }

  export type GetPaymentInfoAggregateType<T extends PaymentInfoAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentInfo[P]>
      : GetScalarType<T[P], AggregatePaymentInfo[P]>
  }




  export type PaymentInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentInfoWhereInput
    orderBy?: PaymentInfoOrderByWithAggregationInput | PaymentInfoOrderByWithAggregationInput[]
    by: PaymentInfoScalarFieldEnum[] | PaymentInfoScalarFieldEnum
    having?: PaymentInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentInfoCountAggregateInputType | true
    _avg?: PaymentInfoAvgAggregateInputType
    _sum?: PaymentInfoSumAggregateInputType
    _min?: PaymentInfoMinAggregateInputType
    _max?: PaymentInfoMaxAggregateInputType
  }

  export type PaymentInfoGroupByOutputType = {
    id: number
    orderId: number
    paymentMethod: $Enums.PaymentMethod
    paymentDate: Date | null
    transactionId: string | null
    amount: Decimal
    bankName: string | null
    slipUrl: string | null
    status: $Enums.PaymentStatus
    verifiedBy: number | null
    verifiedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: PaymentInfoCountAggregateOutputType | null
    _avg: PaymentInfoAvgAggregateOutputType | null
    _sum: PaymentInfoSumAggregateOutputType | null
    _min: PaymentInfoMinAggregateOutputType | null
    _max: PaymentInfoMaxAggregateOutputType | null
  }

  type GetPaymentInfoGroupByPayload<T extends PaymentInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentInfoGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentInfoGroupByOutputType[P]>
        }
      >
    >


  export type PaymentInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    paymentMethod?: boolean
    paymentDate?: boolean
    transactionId?: boolean
    amount?: boolean
    bankName?: boolean
    slipUrl?: boolean
    status?: boolean
    verifiedBy?: boolean
    verifiedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentInfo"]>



  export type PaymentInfoSelectScalar = {
    id?: boolean
    orderId?: boolean
    paymentMethod?: boolean
    paymentDate?: boolean
    transactionId?: boolean
    amount?: boolean
    bankName?: boolean
    slipUrl?: boolean
    status?: boolean
    verifiedBy?: boolean
    verifiedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentInfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "paymentMethod" | "paymentDate" | "transactionId" | "amount" | "bankName" | "slipUrl" | "status" | "verifiedBy" | "verifiedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["paymentInfo"]>
  export type PaymentInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }

  export type $PaymentInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentInfo"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orderId: number
      paymentMethod: $Enums.PaymentMethod
      paymentDate: Date | null
      transactionId: string | null
      amount: Prisma.Decimal
      bankName: string | null
      slipUrl: string | null
      status: $Enums.PaymentStatus
      verifiedBy: number | null
      verifiedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["paymentInfo"]>
    composites: {}
  }

  type PaymentInfoGetPayload<S extends boolean | null | undefined | PaymentInfoDefaultArgs> = $Result.GetResult<Prisma.$PaymentInfoPayload, S>

  type PaymentInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentInfoCountAggregateInputType | true
    }

  export interface PaymentInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentInfo'], meta: { name: 'PaymentInfo' } }
    /**
     * Find zero or one PaymentInfo that matches the filter.
     * @param {PaymentInfoFindUniqueArgs} args - Arguments to find a PaymentInfo
     * @example
     * // Get one PaymentInfo
     * const paymentInfo = await prisma.paymentInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentInfoFindUniqueArgs>(args: SelectSubset<T, PaymentInfoFindUniqueArgs<ExtArgs>>): Prisma__PaymentInfoClient<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PaymentInfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentInfoFindUniqueOrThrowArgs} args - Arguments to find a PaymentInfo
     * @example
     * // Get one PaymentInfo
     * const paymentInfo = await prisma.paymentInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentInfoClient<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInfoFindFirstArgs} args - Arguments to find a PaymentInfo
     * @example
     * // Get one PaymentInfo
     * const paymentInfo = await prisma.paymentInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentInfoFindFirstArgs>(args?: SelectSubset<T, PaymentInfoFindFirstArgs<ExtArgs>>): Prisma__PaymentInfoClient<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInfoFindFirstOrThrowArgs} args - Arguments to find a PaymentInfo
     * @example
     * // Get one PaymentInfo
     * const paymentInfo = await prisma.paymentInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentInfoClient<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PaymentInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentInfos
     * const paymentInfos = await prisma.paymentInfo.findMany()
     * 
     * // Get first 10 PaymentInfos
     * const paymentInfos = await prisma.paymentInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentInfoWithIdOnly = await prisma.paymentInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentInfoFindManyArgs>(args?: SelectSubset<T, PaymentInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PaymentInfo.
     * @param {PaymentInfoCreateArgs} args - Arguments to create a PaymentInfo.
     * @example
     * // Create one PaymentInfo
     * const PaymentInfo = await prisma.paymentInfo.create({
     *   data: {
     *     // ... data to create a PaymentInfo
     *   }
     * })
     * 
     */
    create<T extends PaymentInfoCreateArgs>(args: SelectSubset<T, PaymentInfoCreateArgs<ExtArgs>>): Prisma__PaymentInfoClient<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PaymentInfos.
     * @param {PaymentInfoCreateManyArgs} args - Arguments to create many PaymentInfos.
     * @example
     * // Create many PaymentInfos
     * const paymentInfo = await prisma.paymentInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentInfoCreateManyArgs>(args?: SelectSubset<T, PaymentInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PaymentInfo.
     * @param {PaymentInfoDeleteArgs} args - Arguments to delete one PaymentInfo.
     * @example
     * // Delete one PaymentInfo
     * const PaymentInfo = await prisma.paymentInfo.delete({
     *   where: {
     *     // ... filter to delete one PaymentInfo
     *   }
     * })
     * 
     */
    delete<T extends PaymentInfoDeleteArgs>(args: SelectSubset<T, PaymentInfoDeleteArgs<ExtArgs>>): Prisma__PaymentInfoClient<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PaymentInfo.
     * @param {PaymentInfoUpdateArgs} args - Arguments to update one PaymentInfo.
     * @example
     * // Update one PaymentInfo
     * const paymentInfo = await prisma.paymentInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentInfoUpdateArgs>(args: SelectSubset<T, PaymentInfoUpdateArgs<ExtArgs>>): Prisma__PaymentInfoClient<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PaymentInfos.
     * @param {PaymentInfoDeleteManyArgs} args - Arguments to filter PaymentInfos to delete.
     * @example
     * // Delete a few PaymentInfos
     * const { count } = await prisma.paymentInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentInfoDeleteManyArgs>(args?: SelectSubset<T, PaymentInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentInfos
     * const paymentInfo = await prisma.paymentInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentInfoUpdateManyArgs>(args: SelectSubset<T, PaymentInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentInfo.
     * @param {PaymentInfoUpsertArgs} args - Arguments to update or create a PaymentInfo.
     * @example
     * // Update or create a PaymentInfo
     * const paymentInfo = await prisma.paymentInfo.upsert({
     *   create: {
     *     // ... data to create a PaymentInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentInfo we want to update
     *   }
     * })
     */
    upsert<T extends PaymentInfoUpsertArgs>(args: SelectSubset<T, PaymentInfoUpsertArgs<ExtArgs>>): Prisma__PaymentInfoClient<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PaymentInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInfoCountArgs} args - Arguments to filter PaymentInfos to count.
     * @example
     * // Count the number of PaymentInfos
     * const count = await prisma.paymentInfo.count({
     *   where: {
     *     // ... the filter for the PaymentInfos we want to count
     *   }
     * })
    **/
    count<T extends PaymentInfoCountArgs>(
      args?: Subset<T, PaymentInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentInfoAggregateArgs>(args: Subset<T, PaymentInfoAggregateArgs>): Prisma.PrismaPromise<GetPaymentInfoAggregateType<T>>

    /**
     * Group by PaymentInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentInfoGroupByArgs['orderBy'] }
        : { orderBy?: PaymentInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentInfo model
   */
  readonly fields: PaymentInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentInfo model
   */
  interface PaymentInfoFieldRefs {
    readonly id: FieldRef<"PaymentInfo", 'Int'>
    readonly orderId: FieldRef<"PaymentInfo", 'Int'>
    readonly paymentMethod: FieldRef<"PaymentInfo", 'PaymentMethod'>
    readonly paymentDate: FieldRef<"PaymentInfo", 'DateTime'>
    readonly transactionId: FieldRef<"PaymentInfo", 'String'>
    readonly amount: FieldRef<"PaymentInfo", 'Decimal'>
    readonly bankName: FieldRef<"PaymentInfo", 'String'>
    readonly slipUrl: FieldRef<"PaymentInfo", 'String'>
    readonly status: FieldRef<"PaymentInfo", 'PaymentStatus'>
    readonly verifiedBy: FieldRef<"PaymentInfo", 'Int'>
    readonly verifiedAt: FieldRef<"PaymentInfo", 'DateTime'>
    readonly createdAt: FieldRef<"PaymentInfo", 'DateTime'>
    readonly updatedAt: FieldRef<"PaymentInfo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PaymentInfo findUnique
   */
  export type PaymentInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInfo
     */
    omit?: PaymentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    /**
     * Filter, which PaymentInfo to fetch.
     */
    where: PaymentInfoWhereUniqueInput
  }

  /**
   * PaymentInfo findUniqueOrThrow
   */
  export type PaymentInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInfo
     */
    omit?: PaymentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    /**
     * Filter, which PaymentInfo to fetch.
     */
    where: PaymentInfoWhereUniqueInput
  }

  /**
   * PaymentInfo findFirst
   */
  export type PaymentInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInfo
     */
    omit?: PaymentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    /**
     * Filter, which PaymentInfo to fetch.
     */
    where?: PaymentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentInfos to fetch.
     */
    orderBy?: PaymentInfoOrderByWithRelationInput | PaymentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentInfos.
     */
    cursor?: PaymentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentInfos.
     */
    distinct?: PaymentInfoScalarFieldEnum | PaymentInfoScalarFieldEnum[]
  }

  /**
   * PaymentInfo findFirstOrThrow
   */
  export type PaymentInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInfo
     */
    omit?: PaymentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    /**
     * Filter, which PaymentInfo to fetch.
     */
    where?: PaymentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentInfos to fetch.
     */
    orderBy?: PaymentInfoOrderByWithRelationInput | PaymentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentInfos.
     */
    cursor?: PaymentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentInfos.
     */
    distinct?: PaymentInfoScalarFieldEnum | PaymentInfoScalarFieldEnum[]
  }

  /**
   * PaymentInfo findMany
   */
  export type PaymentInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInfo
     */
    omit?: PaymentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    /**
     * Filter, which PaymentInfos to fetch.
     */
    where?: PaymentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentInfos to fetch.
     */
    orderBy?: PaymentInfoOrderByWithRelationInput | PaymentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentInfos.
     */
    cursor?: PaymentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentInfos.
     */
    skip?: number
    distinct?: PaymentInfoScalarFieldEnum | PaymentInfoScalarFieldEnum[]
  }

  /**
   * PaymentInfo create
   */
  export type PaymentInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInfo
     */
    omit?: PaymentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentInfo.
     */
    data: XOR<PaymentInfoCreateInput, PaymentInfoUncheckedCreateInput>
  }

  /**
   * PaymentInfo createMany
   */
  export type PaymentInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentInfos.
     */
    data: PaymentInfoCreateManyInput | PaymentInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentInfo update
   */
  export type PaymentInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInfo
     */
    omit?: PaymentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentInfo.
     */
    data: XOR<PaymentInfoUpdateInput, PaymentInfoUncheckedUpdateInput>
    /**
     * Choose, which PaymentInfo to update.
     */
    where: PaymentInfoWhereUniqueInput
  }

  /**
   * PaymentInfo updateMany
   */
  export type PaymentInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentInfos.
     */
    data: XOR<PaymentInfoUpdateManyMutationInput, PaymentInfoUncheckedUpdateManyInput>
    /**
     * Filter which PaymentInfos to update
     */
    where?: PaymentInfoWhereInput
    /**
     * Limit how many PaymentInfos to update.
     */
    limit?: number
  }

  /**
   * PaymentInfo upsert
   */
  export type PaymentInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInfo
     */
    omit?: PaymentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentInfo to update in case it exists.
     */
    where: PaymentInfoWhereUniqueInput
    /**
     * In case the PaymentInfo found by the `where` argument doesn't exist, create a new PaymentInfo with this data.
     */
    create: XOR<PaymentInfoCreateInput, PaymentInfoUncheckedCreateInput>
    /**
     * In case the PaymentInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentInfoUpdateInput, PaymentInfoUncheckedUpdateInput>
  }

  /**
   * PaymentInfo delete
   */
  export type PaymentInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInfo
     */
    omit?: PaymentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    /**
     * Filter which PaymentInfo to delete.
     */
    where: PaymentInfoWhereUniqueInput
  }

  /**
   * PaymentInfo deleteMany
   */
  export type PaymentInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentInfos to delete
     */
    where?: PaymentInfoWhereInput
    /**
     * Limit how many PaymentInfos to delete.
     */
    limit?: number
  }

  /**
   * PaymentInfo without action
   */
  export type PaymentInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInfo
     */
    omit?: PaymentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
  }


  /**
   * Model PaymentConfirmation
   */

  export type AggregatePaymentConfirmation = {
    _count: PaymentConfirmationCountAggregateOutputType | null
    _avg: PaymentConfirmationAvgAggregateOutputType | null
    _sum: PaymentConfirmationSumAggregateOutputType | null
    _min: PaymentConfirmationMinAggregateOutputType | null
    _max: PaymentConfirmationMaxAggregateOutputType | null
  }

  export type PaymentConfirmationAvgAggregateOutputType = {
    amount: Decimal | null
    verifiedBy: number | null
  }

  export type PaymentConfirmationSumAggregateOutputType = {
    amount: Decimal | null
    verifiedBy: number | null
  }

  export type PaymentConfirmationMinAggregateOutputType = {
    id: string | null
    orderNumber: string | null
    amount: Decimal | null
    bankName: string | null
    slipUrl: string | null
    status: string | null
    notes: string | null
    verifiedBy: number | null
    verifiedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentConfirmationMaxAggregateOutputType = {
    id: string | null
    orderNumber: string | null
    amount: Decimal | null
    bankName: string | null
    slipUrl: string | null
    status: string | null
    notes: string | null
    verifiedBy: number | null
    verifiedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentConfirmationCountAggregateOutputType = {
    id: number
    orderNumber: number
    amount: number
    bankName: number
    slipUrl: number
    status: number
    notes: number
    verifiedBy: number
    verifiedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentConfirmationAvgAggregateInputType = {
    amount?: true
    verifiedBy?: true
  }

  export type PaymentConfirmationSumAggregateInputType = {
    amount?: true
    verifiedBy?: true
  }

  export type PaymentConfirmationMinAggregateInputType = {
    id?: true
    orderNumber?: true
    amount?: true
    bankName?: true
    slipUrl?: true
    status?: true
    notes?: true
    verifiedBy?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentConfirmationMaxAggregateInputType = {
    id?: true
    orderNumber?: true
    amount?: true
    bankName?: true
    slipUrl?: true
    status?: true
    notes?: true
    verifiedBy?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentConfirmationCountAggregateInputType = {
    id?: true
    orderNumber?: true
    amount?: true
    bankName?: true
    slipUrl?: true
    status?: true
    notes?: true
    verifiedBy?: true
    verifiedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentConfirmationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentConfirmation to aggregate.
     */
    where?: PaymentConfirmationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentConfirmations to fetch.
     */
    orderBy?: PaymentConfirmationOrderByWithRelationInput | PaymentConfirmationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentConfirmationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentConfirmations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentConfirmations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentConfirmations
    **/
    _count?: true | PaymentConfirmationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentConfirmationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentConfirmationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentConfirmationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentConfirmationMaxAggregateInputType
  }

  export type GetPaymentConfirmationAggregateType<T extends PaymentConfirmationAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentConfirmation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentConfirmation[P]>
      : GetScalarType<T[P], AggregatePaymentConfirmation[P]>
  }




  export type PaymentConfirmationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentConfirmationWhereInput
    orderBy?: PaymentConfirmationOrderByWithAggregationInput | PaymentConfirmationOrderByWithAggregationInput[]
    by: PaymentConfirmationScalarFieldEnum[] | PaymentConfirmationScalarFieldEnum
    having?: PaymentConfirmationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentConfirmationCountAggregateInputType | true
    _avg?: PaymentConfirmationAvgAggregateInputType
    _sum?: PaymentConfirmationSumAggregateInputType
    _min?: PaymentConfirmationMinAggregateInputType
    _max?: PaymentConfirmationMaxAggregateInputType
  }

  export type PaymentConfirmationGroupByOutputType = {
    id: string
    orderNumber: string
    amount: Decimal
    bankName: string | null
    slipUrl: string
    status: string
    notes: string | null
    verifiedBy: number | null
    verifiedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: PaymentConfirmationCountAggregateOutputType | null
    _avg: PaymentConfirmationAvgAggregateOutputType | null
    _sum: PaymentConfirmationSumAggregateOutputType | null
    _min: PaymentConfirmationMinAggregateOutputType | null
    _max: PaymentConfirmationMaxAggregateOutputType | null
  }

  type GetPaymentConfirmationGroupByPayload<T extends PaymentConfirmationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentConfirmationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentConfirmationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentConfirmationGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentConfirmationGroupByOutputType[P]>
        }
      >
    >


  export type PaymentConfirmationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    amount?: boolean
    bankName?: boolean
    slipUrl?: boolean
    status?: boolean
    notes?: boolean
    verifiedBy?: boolean
    verifiedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["paymentConfirmation"]>



  export type PaymentConfirmationSelectScalar = {
    id?: boolean
    orderNumber?: boolean
    amount?: boolean
    bankName?: boolean
    slipUrl?: boolean
    status?: boolean
    notes?: boolean
    verifiedBy?: boolean
    verifiedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentConfirmationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderNumber" | "amount" | "bankName" | "slipUrl" | "status" | "notes" | "verifiedBy" | "verifiedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["paymentConfirmation"]>

  export type $PaymentConfirmationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentConfirmation"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderNumber: string
      amount: Prisma.Decimal
      bankName: string | null
      slipUrl: string
      status: string
      notes: string | null
      verifiedBy: number | null
      verifiedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["paymentConfirmation"]>
    composites: {}
  }

  type PaymentConfirmationGetPayload<S extends boolean | null | undefined | PaymentConfirmationDefaultArgs> = $Result.GetResult<Prisma.$PaymentConfirmationPayload, S>

  type PaymentConfirmationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentConfirmationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentConfirmationCountAggregateInputType | true
    }

  export interface PaymentConfirmationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentConfirmation'], meta: { name: 'PaymentConfirmation' } }
    /**
     * Find zero or one PaymentConfirmation that matches the filter.
     * @param {PaymentConfirmationFindUniqueArgs} args - Arguments to find a PaymentConfirmation
     * @example
     * // Get one PaymentConfirmation
     * const paymentConfirmation = await prisma.paymentConfirmation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentConfirmationFindUniqueArgs>(args: SelectSubset<T, PaymentConfirmationFindUniqueArgs<ExtArgs>>): Prisma__PaymentConfirmationClient<$Result.GetResult<Prisma.$PaymentConfirmationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PaymentConfirmation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentConfirmationFindUniqueOrThrowArgs} args - Arguments to find a PaymentConfirmation
     * @example
     * // Get one PaymentConfirmation
     * const paymentConfirmation = await prisma.paymentConfirmation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentConfirmationFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentConfirmationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentConfirmationClient<$Result.GetResult<Prisma.$PaymentConfirmationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentConfirmation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentConfirmationFindFirstArgs} args - Arguments to find a PaymentConfirmation
     * @example
     * // Get one PaymentConfirmation
     * const paymentConfirmation = await prisma.paymentConfirmation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentConfirmationFindFirstArgs>(args?: SelectSubset<T, PaymentConfirmationFindFirstArgs<ExtArgs>>): Prisma__PaymentConfirmationClient<$Result.GetResult<Prisma.$PaymentConfirmationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentConfirmation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentConfirmationFindFirstOrThrowArgs} args - Arguments to find a PaymentConfirmation
     * @example
     * // Get one PaymentConfirmation
     * const paymentConfirmation = await prisma.paymentConfirmation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentConfirmationFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentConfirmationFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentConfirmationClient<$Result.GetResult<Prisma.$PaymentConfirmationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PaymentConfirmations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentConfirmationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentConfirmations
     * const paymentConfirmations = await prisma.paymentConfirmation.findMany()
     * 
     * // Get first 10 PaymentConfirmations
     * const paymentConfirmations = await prisma.paymentConfirmation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentConfirmationWithIdOnly = await prisma.paymentConfirmation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentConfirmationFindManyArgs>(args?: SelectSubset<T, PaymentConfirmationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentConfirmationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PaymentConfirmation.
     * @param {PaymentConfirmationCreateArgs} args - Arguments to create a PaymentConfirmation.
     * @example
     * // Create one PaymentConfirmation
     * const PaymentConfirmation = await prisma.paymentConfirmation.create({
     *   data: {
     *     // ... data to create a PaymentConfirmation
     *   }
     * })
     * 
     */
    create<T extends PaymentConfirmationCreateArgs>(args: SelectSubset<T, PaymentConfirmationCreateArgs<ExtArgs>>): Prisma__PaymentConfirmationClient<$Result.GetResult<Prisma.$PaymentConfirmationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PaymentConfirmations.
     * @param {PaymentConfirmationCreateManyArgs} args - Arguments to create many PaymentConfirmations.
     * @example
     * // Create many PaymentConfirmations
     * const paymentConfirmation = await prisma.paymentConfirmation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentConfirmationCreateManyArgs>(args?: SelectSubset<T, PaymentConfirmationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PaymentConfirmation.
     * @param {PaymentConfirmationDeleteArgs} args - Arguments to delete one PaymentConfirmation.
     * @example
     * // Delete one PaymentConfirmation
     * const PaymentConfirmation = await prisma.paymentConfirmation.delete({
     *   where: {
     *     // ... filter to delete one PaymentConfirmation
     *   }
     * })
     * 
     */
    delete<T extends PaymentConfirmationDeleteArgs>(args: SelectSubset<T, PaymentConfirmationDeleteArgs<ExtArgs>>): Prisma__PaymentConfirmationClient<$Result.GetResult<Prisma.$PaymentConfirmationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PaymentConfirmation.
     * @param {PaymentConfirmationUpdateArgs} args - Arguments to update one PaymentConfirmation.
     * @example
     * // Update one PaymentConfirmation
     * const paymentConfirmation = await prisma.paymentConfirmation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentConfirmationUpdateArgs>(args: SelectSubset<T, PaymentConfirmationUpdateArgs<ExtArgs>>): Prisma__PaymentConfirmationClient<$Result.GetResult<Prisma.$PaymentConfirmationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PaymentConfirmations.
     * @param {PaymentConfirmationDeleteManyArgs} args - Arguments to filter PaymentConfirmations to delete.
     * @example
     * // Delete a few PaymentConfirmations
     * const { count } = await prisma.paymentConfirmation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentConfirmationDeleteManyArgs>(args?: SelectSubset<T, PaymentConfirmationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentConfirmations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentConfirmationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentConfirmations
     * const paymentConfirmation = await prisma.paymentConfirmation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentConfirmationUpdateManyArgs>(args: SelectSubset<T, PaymentConfirmationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentConfirmation.
     * @param {PaymentConfirmationUpsertArgs} args - Arguments to update or create a PaymentConfirmation.
     * @example
     * // Update or create a PaymentConfirmation
     * const paymentConfirmation = await prisma.paymentConfirmation.upsert({
     *   create: {
     *     // ... data to create a PaymentConfirmation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentConfirmation we want to update
     *   }
     * })
     */
    upsert<T extends PaymentConfirmationUpsertArgs>(args: SelectSubset<T, PaymentConfirmationUpsertArgs<ExtArgs>>): Prisma__PaymentConfirmationClient<$Result.GetResult<Prisma.$PaymentConfirmationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PaymentConfirmations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentConfirmationCountArgs} args - Arguments to filter PaymentConfirmations to count.
     * @example
     * // Count the number of PaymentConfirmations
     * const count = await prisma.paymentConfirmation.count({
     *   where: {
     *     // ... the filter for the PaymentConfirmations we want to count
     *   }
     * })
    **/
    count<T extends PaymentConfirmationCountArgs>(
      args?: Subset<T, PaymentConfirmationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentConfirmationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentConfirmation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentConfirmationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentConfirmationAggregateArgs>(args: Subset<T, PaymentConfirmationAggregateArgs>): Prisma.PrismaPromise<GetPaymentConfirmationAggregateType<T>>

    /**
     * Group by PaymentConfirmation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentConfirmationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentConfirmationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentConfirmationGroupByArgs['orderBy'] }
        : { orderBy?: PaymentConfirmationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentConfirmationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentConfirmationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentConfirmation model
   */
  readonly fields: PaymentConfirmationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentConfirmation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentConfirmationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentConfirmation model
   */
  interface PaymentConfirmationFieldRefs {
    readonly id: FieldRef<"PaymentConfirmation", 'String'>
    readonly orderNumber: FieldRef<"PaymentConfirmation", 'String'>
    readonly amount: FieldRef<"PaymentConfirmation", 'Decimal'>
    readonly bankName: FieldRef<"PaymentConfirmation", 'String'>
    readonly slipUrl: FieldRef<"PaymentConfirmation", 'String'>
    readonly status: FieldRef<"PaymentConfirmation", 'String'>
    readonly notes: FieldRef<"PaymentConfirmation", 'String'>
    readonly verifiedBy: FieldRef<"PaymentConfirmation", 'Int'>
    readonly verifiedAt: FieldRef<"PaymentConfirmation", 'DateTime'>
    readonly createdAt: FieldRef<"PaymentConfirmation", 'DateTime'>
    readonly updatedAt: FieldRef<"PaymentConfirmation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PaymentConfirmation findUnique
   */
  export type PaymentConfirmationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfirmation
     */
    select?: PaymentConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentConfirmation
     */
    omit?: PaymentConfirmationOmit<ExtArgs> | null
    /**
     * Filter, which PaymentConfirmation to fetch.
     */
    where: PaymentConfirmationWhereUniqueInput
  }

  /**
   * PaymentConfirmation findUniqueOrThrow
   */
  export type PaymentConfirmationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfirmation
     */
    select?: PaymentConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentConfirmation
     */
    omit?: PaymentConfirmationOmit<ExtArgs> | null
    /**
     * Filter, which PaymentConfirmation to fetch.
     */
    where: PaymentConfirmationWhereUniqueInput
  }

  /**
   * PaymentConfirmation findFirst
   */
  export type PaymentConfirmationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfirmation
     */
    select?: PaymentConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentConfirmation
     */
    omit?: PaymentConfirmationOmit<ExtArgs> | null
    /**
     * Filter, which PaymentConfirmation to fetch.
     */
    where?: PaymentConfirmationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentConfirmations to fetch.
     */
    orderBy?: PaymentConfirmationOrderByWithRelationInput | PaymentConfirmationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentConfirmations.
     */
    cursor?: PaymentConfirmationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentConfirmations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentConfirmations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentConfirmations.
     */
    distinct?: PaymentConfirmationScalarFieldEnum | PaymentConfirmationScalarFieldEnum[]
  }

  /**
   * PaymentConfirmation findFirstOrThrow
   */
  export type PaymentConfirmationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfirmation
     */
    select?: PaymentConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentConfirmation
     */
    omit?: PaymentConfirmationOmit<ExtArgs> | null
    /**
     * Filter, which PaymentConfirmation to fetch.
     */
    where?: PaymentConfirmationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentConfirmations to fetch.
     */
    orderBy?: PaymentConfirmationOrderByWithRelationInput | PaymentConfirmationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentConfirmations.
     */
    cursor?: PaymentConfirmationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentConfirmations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentConfirmations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentConfirmations.
     */
    distinct?: PaymentConfirmationScalarFieldEnum | PaymentConfirmationScalarFieldEnum[]
  }

  /**
   * PaymentConfirmation findMany
   */
  export type PaymentConfirmationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfirmation
     */
    select?: PaymentConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentConfirmation
     */
    omit?: PaymentConfirmationOmit<ExtArgs> | null
    /**
     * Filter, which PaymentConfirmations to fetch.
     */
    where?: PaymentConfirmationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentConfirmations to fetch.
     */
    orderBy?: PaymentConfirmationOrderByWithRelationInput | PaymentConfirmationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentConfirmations.
     */
    cursor?: PaymentConfirmationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentConfirmations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentConfirmations.
     */
    skip?: number
    distinct?: PaymentConfirmationScalarFieldEnum | PaymentConfirmationScalarFieldEnum[]
  }

  /**
   * PaymentConfirmation create
   */
  export type PaymentConfirmationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfirmation
     */
    select?: PaymentConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentConfirmation
     */
    omit?: PaymentConfirmationOmit<ExtArgs> | null
    /**
     * The data needed to create a PaymentConfirmation.
     */
    data: XOR<PaymentConfirmationCreateInput, PaymentConfirmationUncheckedCreateInput>
  }

  /**
   * PaymentConfirmation createMany
   */
  export type PaymentConfirmationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentConfirmations.
     */
    data: PaymentConfirmationCreateManyInput | PaymentConfirmationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentConfirmation update
   */
  export type PaymentConfirmationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfirmation
     */
    select?: PaymentConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentConfirmation
     */
    omit?: PaymentConfirmationOmit<ExtArgs> | null
    /**
     * The data needed to update a PaymentConfirmation.
     */
    data: XOR<PaymentConfirmationUpdateInput, PaymentConfirmationUncheckedUpdateInput>
    /**
     * Choose, which PaymentConfirmation to update.
     */
    where: PaymentConfirmationWhereUniqueInput
  }

  /**
   * PaymentConfirmation updateMany
   */
  export type PaymentConfirmationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentConfirmations.
     */
    data: XOR<PaymentConfirmationUpdateManyMutationInput, PaymentConfirmationUncheckedUpdateManyInput>
    /**
     * Filter which PaymentConfirmations to update
     */
    where?: PaymentConfirmationWhereInput
    /**
     * Limit how many PaymentConfirmations to update.
     */
    limit?: number
  }

  /**
   * PaymentConfirmation upsert
   */
  export type PaymentConfirmationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfirmation
     */
    select?: PaymentConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentConfirmation
     */
    omit?: PaymentConfirmationOmit<ExtArgs> | null
    /**
     * The filter to search for the PaymentConfirmation to update in case it exists.
     */
    where: PaymentConfirmationWhereUniqueInput
    /**
     * In case the PaymentConfirmation found by the `where` argument doesn't exist, create a new PaymentConfirmation with this data.
     */
    create: XOR<PaymentConfirmationCreateInput, PaymentConfirmationUncheckedCreateInput>
    /**
     * In case the PaymentConfirmation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentConfirmationUpdateInput, PaymentConfirmationUncheckedUpdateInput>
  }

  /**
   * PaymentConfirmation delete
   */
  export type PaymentConfirmationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfirmation
     */
    select?: PaymentConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentConfirmation
     */
    omit?: PaymentConfirmationOmit<ExtArgs> | null
    /**
     * Filter which PaymentConfirmation to delete.
     */
    where: PaymentConfirmationWhereUniqueInput
  }

  /**
   * PaymentConfirmation deleteMany
   */
  export type PaymentConfirmationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentConfirmations to delete
     */
    where?: PaymentConfirmationWhereInput
    /**
     * Limit how many PaymentConfirmations to delete.
     */
    limit?: number
  }

  /**
   * PaymentConfirmation without action
   */
  export type PaymentConfirmationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfirmation
     */
    select?: PaymentConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentConfirmation
     */
    omit?: PaymentConfirmationOmit<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    isAdmin: $Enums.users_isAdmin | null
    emailVerifiedAt: Date | null
    password: string | null
    rememberToken: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lineId: string | null
    avatar: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    isAdmin: $Enums.users_isAdmin | null
    emailVerifiedAt: Date | null
    password: string | null
    rememberToken: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lineId: string | null
    avatar: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    isAdmin: number
    emailVerifiedAt: number
    password: number
    rememberToken: number
    createdAt: number
    updatedAt: number
    lineId: number
    avatar: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    isAdmin?: true
    emailVerifiedAt?: true
    password?: true
    rememberToken?: true
    createdAt?: true
    updatedAt?: true
    lineId?: true
    avatar?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    isAdmin?: true
    emailVerifiedAt?: true
    password?: true
    rememberToken?: true
    createdAt?: true
    updatedAt?: true
    lineId?: true
    avatar?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    isAdmin?: true
    emailVerifiedAt?: true
    password?: true
    rememberToken?: true
    createdAt?: true
    updatedAt?: true
    lineId?: true
    avatar?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    email: string
    isAdmin: $Enums.users_isAdmin
    emailVerifiedAt: Date | null
    password: string
    rememberToken: string | null
    createdAt: Date
    updatedAt: Date
    lineId: string | null
    avatar: string | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    isAdmin?: boolean
    emailVerifiedAt?: boolean
    password?: boolean
    rememberToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lineId?: boolean
    avatar?: boolean
    passwordReset?: boolean | users$passwordResetArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>



  export type usersSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    isAdmin?: boolean
    emailVerifiedAt?: boolean
    password?: boolean
    rememberToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lineId?: boolean
    avatar?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "email" | "isAdmin" | "emailVerifiedAt" | "password" | "rememberToken" | "createdAt" | "updatedAt" | "lineId" | "avatar", ExtArgs["result"]["users"]>
  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passwordReset?: boolean | users$passwordResetArgs<ExtArgs>
  }

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      passwordReset: Prisma.$PasswordResetPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string
      lastName: string
      email: string
      isAdmin: $Enums.users_isAdmin
      emailVerifiedAt: Date | null
      password: string
      rememberToken: string | null
      createdAt: Date
      updatedAt: Date
      lineId: string | null
      avatar: string | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    passwordReset<T extends users$passwordResetArgs<ExtArgs> = {}>(args?: Subset<T, users$passwordResetArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'Int'>
    readonly firstName: FieldRef<"users", 'String'>
    readonly lastName: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly isAdmin: FieldRef<"users", 'users_isAdmin'>
    readonly emailVerifiedAt: FieldRef<"users", 'DateTime'>
    readonly password: FieldRef<"users", 'String'>
    readonly rememberToken: FieldRef<"users", 'String'>
    readonly createdAt: FieldRef<"users", 'DateTime'>
    readonly updatedAt: FieldRef<"users", 'DateTime'>
    readonly lineId: FieldRef<"users", 'String'>
    readonly avatar: FieldRef<"users", 'String'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * users.passwordReset
   */
  export type users$passwordResetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    where?: PasswordResetWhereInput
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model Blog
   */

  export type AggregateBlog = {
    _count: BlogCountAggregateOutputType | null
    _avg: BlogAvgAggregateOutputType | null
    _sum: BlogSumAggregateOutputType | null
    _min: BlogMinAggregateOutputType | null
    _max: BlogMaxAggregateOutputType | null
  }

  export type BlogAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type BlogSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type BlogMinAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    excerpt: string | null
    content: string | null
    image: string | null
    category: string | null
    date: string | null
    published: boolean | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BlogMaxAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    excerpt: string | null
    content: string | null
    image: string | null
    category: string | null
    date: string | null
    published: boolean | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BlogCountAggregateOutputType = {
    id: number
    title: number
    slug: number
    excerpt: number
    content: number
    image: number
    category: number
    date: number
    published: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BlogAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type BlogSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type BlogMinAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    excerpt?: true
    content?: true
    image?: true
    category?: true
    date?: true
    published?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BlogMaxAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    excerpt?: true
    content?: true
    image?: true
    category?: true
    date?: true
    published?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BlogCountAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    excerpt?: true
    content?: true
    image?: true
    category?: true
    date?: true
    published?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BlogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Blog to aggregate.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: BlogOrderByWithRelationInput | BlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Blogs
    **/
    _count?: true | BlogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BlogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BlogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlogMaxAggregateInputType
  }

  export type GetBlogAggregateType<T extends BlogAggregateArgs> = {
        [P in keyof T & keyof AggregateBlog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlog[P]>
      : GetScalarType<T[P], AggregateBlog[P]>
  }




  export type BlogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlogWhereInput
    orderBy?: BlogOrderByWithAggregationInput | BlogOrderByWithAggregationInput[]
    by: BlogScalarFieldEnum[] | BlogScalarFieldEnum
    having?: BlogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlogCountAggregateInputType | true
    _avg?: BlogAvgAggregateInputType
    _sum?: BlogSumAggregateInputType
    _min?: BlogMinAggregateInputType
    _max?: BlogMaxAggregateInputType
  }

  export type BlogGroupByOutputType = {
    id: number
    title: string
    slug: string
    excerpt: string
    content: string
    image: string
    category: string
    date: string
    published: boolean
    userId: number | null
    createdAt: Date
    updatedAt: Date
    _count: BlogCountAggregateOutputType | null
    _avg: BlogAvgAggregateOutputType | null
    _sum: BlogSumAggregateOutputType | null
    _min: BlogMinAggregateOutputType | null
    _max: BlogMaxAggregateOutputType | null
  }

  type GetBlogGroupByPayload<T extends BlogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BlogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlogGroupByOutputType[P]>
            : GetScalarType<T[P], BlogGroupByOutputType[P]>
        }
      >
    >


  export type BlogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    excerpt?: boolean
    content?: boolean
    image?: boolean
    category?: boolean
    date?: boolean
    published?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["blog"]>



  export type BlogSelectScalar = {
    id?: boolean
    title?: boolean
    slug?: boolean
    excerpt?: boolean
    content?: boolean
    image?: boolean
    category?: boolean
    date?: boolean
    published?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BlogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "slug" | "excerpt" | "content" | "image" | "category" | "date" | "published" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["blog"]>

  export type $BlogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Blog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      slug: string
      excerpt: string
      content: string
      image: string
      category: string
      date: string
      published: boolean
      userId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["blog"]>
    composites: {}
  }

  type BlogGetPayload<S extends boolean | null | undefined | BlogDefaultArgs> = $Result.GetResult<Prisma.$BlogPayload, S>

  type BlogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BlogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BlogCountAggregateInputType | true
    }

  export interface BlogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Blog'], meta: { name: 'Blog' } }
    /**
     * Find zero or one Blog that matches the filter.
     * @param {BlogFindUniqueArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BlogFindUniqueArgs>(args: SelectSubset<T, BlogFindUniqueArgs<ExtArgs>>): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Blog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BlogFindUniqueOrThrowArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BlogFindUniqueOrThrowArgs>(args: SelectSubset<T, BlogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Blog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogFindFirstArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BlogFindFirstArgs>(args?: SelectSubset<T, BlogFindFirstArgs<ExtArgs>>): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Blog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogFindFirstOrThrowArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BlogFindFirstOrThrowArgs>(args?: SelectSubset<T, BlogFindFirstOrThrowArgs<ExtArgs>>): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Blogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Blogs
     * const blogs = await prisma.blog.findMany()
     * 
     * // Get first 10 Blogs
     * const blogs = await prisma.blog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const blogWithIdOnly = await prisma.blog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BlogFindManyArgs>(args?: SelectSubset<T, BlogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Blog.
     * @param {BlogCreateArgs} args - Arguments to create a Blog.
     * @example
     * // Create one Blog
     * const Blog = await prisma.blog.create({
     *   data: {
     *     // ... data to create a Blog
     *   }
     * })
     * 
     */
    create<T extends BlogCreateArgs>(args: SelectSubset<T, BlogCreateArgs<ExtArgs>>): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Blogs.
     * @param {BlogCreateManyArgs} args - Arguments to create many Blogs.
     * @example
     * // Create many Blogs
     * const blog = await prisma.blog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BlogCreateManyArgs>(args?: SelectSubset<T, BlogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Blog.
     * @param {BlogDeleteArgs} args - Arguments to delete one Blog.
     * @example
     * // Delete one Blog
     * const Blog = await prisma.blog.delete({
     *   where: {
     *     // ... filter to delete one Blog
     *   }
     * })
     * 
     */
    delete<T extends BlogDeleteArgs>(args: SelectSubset<T, BlogDeleteArgs<ExtArgs>>): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Blog.
     * @param {BlogUpdateArgs} args - Arguments to update one Blog.
     * @example
     * // Update one Blog
     * const blog = await prisma.blog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BlogUpdateArgs>(args: SelectSubset<T, BlogUpdateArgs<ExtArgs>>): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Blogs.
     * @param {BlogDeleteManyArgs} args - Arguments to filter Blogs to delete.
     * @example
     * // Delete a few Blogs
     * const { count } = await prisma.blog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BlogDeleteManyArgs>(args?: SelectSubset<T, BlogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Blogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Blogs
     * const blog = await prisma.blog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BlogUpdateManyArgs>(args: SelectSubset<T, BlogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Blog.
     * @param {BlogUpsertArgs} args - Arguments to update or create a Blog.
     * @example
     * // Update or create a Blog
     * const blog = await prisma.blog.upsert({
     *   create: {
     *     // ... data to create a Blog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Blog we want to update
     *   }
     * })
     */
    upsert<T extends BlogUpsertArgs>(args: SelectSubset<T, BlogUpsertArgs<ExtArgs>>): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Blogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogCountArgs} args - Arguments to filter Blogs to count.
     * @example
     * // Count the number of Blogs
     * const count = await prisma.blog.count({
     *   where: {
     *     // ... the filter for the Blogs we want to count
     *   }
     * })
    **/
    count<T extends BlogCountArgs>(
      args?: Subset<T, BlogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Blog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlogAggregateArgs>(args: Subset<T, BlogAggregateArgs>): Prisma.PrismaPromise<GetBlogAggregateType<T>>

    /**
     * Group by Blog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlogGroupByArgs['orderBy'] }
        : { orderBy?: BlogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Blog model
   */
  readonly fields: BlogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Blog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BlogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Blog model
   */
  interface BlogFieldRefs {
    readonly id: FieldRef<"Blog", 'Int'>
    readonly title: FieldRef<"Blog", 'String'>
    readonly slug: FieldRef<"Blog", 'String'>
    readonly excerpt: FieldRef<"Blog", 'String'>
    readonly content: FieldRef<"Blog", 'String'>
    readonly image: FieldRef<"Blog", 'String'>
    readonly category: FieldRef<"Blog", 'String'>
    readonly date: FieldRef<"Blog", 'String'>
    readonly published: FieldRef<"Blog", 'Boolean'>
    readonly userId: FieldRef<"Blog", 'Int'>
    readonly createdAt: FieldRef<"Blog", 'DateTime'>
    readonly updatedAt: FieldRef<"Blog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Blog findUnique
   */
  export type BlogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Blog
     */
    omit?: BlogOmit<ExtArgs> | null
    /**
     * Filter, which Blog to fetch.
     */
    where: BlogWhereUniqueInput
  }

  /**
   * Blog findUniqueOrThrow
   */
  export type BlogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Blog
     */
    omit?: BlogOmit<ExtArgs> | null
    /**
     * Filter, which Blog to fetch.
     */
    where: BlogWhereUniqueInput
  }

  /**
   * Blog findFirst
   */
  export type BlogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Blog
     */
    omit?: BlogOmit<ExtArgs> | null
    /**
     * Filter, which Blog to fetch.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: BlogOrderByWithRelationInput | BlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Blogs.
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Blogs.
     */
    distinct?: BlogScalarFieldEnum | BlogScalarFieldEnum[]
  }

  /**
   * Blog findFirstOrThrow
   */
  export type BlogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Blog
     */
    omit?: BlogOmit<ExtArgs> | null
    /**
     * Filter, which Blog to fetch.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: BlogOrderByWithRelationInput | BlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Blogs.
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Blogs.
     */
    distinct?: BlogScalarFieldEnum | BlogScalarFieldEnum[]
  }

  /**
   * Blog findMany
   */
  export type BlogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Blog
     */
    omit?: BlogOmit<ExtArgs> | null
    /**
     * Filter, which Blogs to fetch.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: BlogOrderByWithRelationInput | BlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Blogs.
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    distinct?: BlogScalarFieldEnum | BlogScalarFieldEnum[]
  }

  /**
   * Blog create
   */
  export type BlogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Blog
     */
    omit?: BlogOmit<ExtArgs> | null
    /**
     * The data needed to create a Blog.
     */
    data: XOR<BlogCreateInput, BlogUncheckedCreateInput>
  }

  /**
   * Blog createMany
   */
  export type BlogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Blogs.
     */
    data: BlogCreateManyInput | BlogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Blog update
   */
  export type BlogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Blog
     */
    omit?: BlogOmit<ExtArgs> | null
    /**
     * The data needed to update a Blog.
     */
    data: XOR<BlogUpdateInput, BlogUncheckedUpdateInput>
    /**
     * Choose, which Blog to update.
     */
    where: BlogWhereUniqueInput
  }

  /**
   * Blog updateMany
   */
  export type BlogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Blogs.
     */
    data: XOR<BlogUpdateManyMutationInput, BlogUncheckedUpdateManyInput>
    /**
     * Filter which Blogs to update
     */
    where?: BlogWhereInput
    /**
     * Limit how many Blogs to update.
     */
    limit?: number
  }

  /**
   * Blog upsert
   */
  export type BlogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Blog
     */
    omit?: BlogOmit<ExtArgs> | null
    /**
     * The filter to search for the Blog to update in case it exists.
     */
    where: BlogWhereUniqueInput
    /**
     * In case the Blog found by the `where` argument doesn't exist, create a new Blog with this data.
     */
    create: XOR<BlogCreateInput, BlogUncheckedCreateInput>
    /**
     * In case the Blog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BlogUpdateInput, BlogUncheckedUpdateInput>
  }

  /**
   * Blog delete
   */
  export type BlogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Blog
     */
    omit?: BlogOmit<ExtArgs> | null
    /**
     * Filter which Blog to delete.
     */
    where: BlogWhereUniqueInput
  }

  /**
   * Blog deleteMany
   */
  export type BlogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Blogs to delete
     */
    where?: BlogWhereInput
    /**
     * Limit how many Blogs to delete.
     */
    limit?: number
  }

  /**
   * Blog without action
   */
  export type BlogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Blog
     */
    omit?: BlogOmit<ExtArgs> | null
  }


  /**
   * Model DiscountCode
   */

  export type AggregateDiscountCode = {
    _count: DiscountCodeCountAggregateOutputType | null
    _avg: DiscountCodeAvgAggregateOutputType | null
    _sum: DiscountCodeSumAggregateOutputType | null
    _min: DiscountCodeMinAggregateOutputType | null
    _max: DiscountCodeMaxAggregateOutputType | null
  }

  export type DiscountCodeAvgAggregateOutputType = {
    id: number | null
    value: Decimal | null
    minAmount: Decimal | null
    maxDiscount: Decimal | null
    maxUses: number | null
    usedCount: number | null
    createdBy: number | null
  }

  export type DiscountCodeSumAggregateOutputType = {
    id: number | null
    value: Decimal | null
    minAmount: Decimal | null
    maxDiscount: Decimal | null
    maxUses: number | null
    usedCount: number | null
    createdBy: number | null
  }

  export type DiscountCodeMinAggregateOutputType = {
    id: number | null
    code: string | null
    type: string | null
    value: Decimal | null
    minAmount: Decimal | null
    maxDiscount: Decimal | null
    description: string | null
    maxUses: number | null
    usedCount: number | null
    status: string | null
    startDate: Date | null
    endDate: Date | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DiscountCodeMaxAggregateOutputType = {
    id: number | null
    code: string | null
    type: string | null
    value: Decimal | null
    minAmount: Decimal | null
    maxDiscount: Decimal | null
    description: string | null
    maxUses: number | null
    usedCount: number | null
    status: string | null
    startDate: Date | null
    endDate: Date | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DiscountCodeCountAggregateOutputType = {
    id: number
    code: number
    type: number
    value: number
    minAmount: number
    maxDiscount: number
    description: number
    maxUses: number
    usedCount: number
    status: number
    startDate: number
    endDate: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DiscountCodeAvgAggregateInputType = {
    id?: true
    value?: true
    minAmount?: true
    maxDiscount?: true
    maxUses?: true
    usedCount?: true
    createdBy?: true
  }

  export type DiscountCodeSumAggregateInputType = {
    id?: true
    value?: true
    minAmount?: true
    maxDiscount?: true
    maxUses?: true
    usedCount?: true
    createdBy?: true
  }

  export type DiscountCodeMinAggregateInputType = {
    id?: true
    code?: true
    type?: true
    value?: true
    minAmount?: true
    maxDiscount?: true
    description?: true
    maxUses?: true
    usedCount?: true
    status?: true
    startDate?: true
    endDate?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DiscountCodeMaxAggregateInputType = {
    id?: true
    code?: true
    type?: true
    value?: true
    minAmount?: true
    maxDiscount?: true
    description?: true
    maxUses?: true
    usedCount?: true
    status?: true
    startDate?: true
    endDate?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DiscountCodeCountAggregateInputType = {
    id?: true
    code?: true
    type?: true
    value?: true
    minAmount?: true
    maxDiscount?: true
    description?: true
    maxUses?: true
    usedCount?: true
    status?: true
    startDate?: true
    endDate?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DiscountCodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiscountCode to aggregate.
     */
    where?: DiscountCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscountCodes to fetch.
     */
    orderBy?: DiscountCodeOrderByWithRelationInput | DiscountCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiscountCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscountCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscountCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DiscountCodes
    **/
    _count?: true | DiscountCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DiscountCodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DiscountCodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiscountCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiscountCodeMaxAggregateInputType
  }

  export type GetDiscountCodeAggregateType<T extends DiscountCodeAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscountCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscountCode[P]>
      : GetScalarType<T[P], AggregateDiscountCode[P]>
  }




  export type DiscountCodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscountCodeWhereInput
    orderBy?: DiscountCodeOrderByWithAggregationInput | DiscountCodeOrderByWithAggregationInput[]
    by: DiscountCodeScalarFieldEnum[] | DiscountCodeScalarFieldEnum
    having?: DiscountCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiscountCodeCountAggregateInputType | true
    _avg?: DiscountCodeAvgAggregateInputType
    _sum?: DiscountCodeSumAggregateInputType
    _min?: DiscountCodeMinAggregateInputType
    _max?: DiscountCodeMaxAggregateInputType
  }

  export type DiscountCodeGroupByOutputType = {
    id: number
    code: string
    type: string
    value: Decimal
    minAmount: Decimal
    maxDiscount: Decimal | null
    description: string
    maxUses: number
    usedCount: number
    status: string
    startDate: Date | null
    endDate: Date | null
    createdBy: number | null
    createdAt: Date
    updatedAt: Date
    _count: DiscountCodeCountAggregateOutputType | null
    _avg: DiscountCodeAvgAggregateOutputType | null
    _sum: DiscountCodeSumAggregateOutputType | null
    _min: DiscountCodeMinAggregateOutputType | null
    _max: DiscountCodeMaxAggregateOutputType | null
  }

  type GetDiscountCodeGroupByPayload<T extends DiscountCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiscountCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiscountCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiscountCodeGroupByOutputType[P]>
            : GetScalarType<T[P], DiscountCodeGroupByOutputType[P]>
        }
      >
    >


  export type DiscountCodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    type?: boolean
    value?: boolean
    minAmount?: boolean
    maxDiscount?: boolean
    description?: boolean
    maxUses?: boolean
    usedCount?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["discountCode"]>



  export type DiscountCodeSelectScalar = {
    id?: boolean
    code?: boolean
    type?: boolean
    value?: boolean
    minAmount?: boolean
    maxDiscount?: boolean
    description?: boolean
    maxUses?: boolean
    usedCount?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DiscountCodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "type" | "value" | "minAmount" | "maxDiscount" | "description" | "maxUses" | "usedCount" | "status" | "startDate" | "endDate" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["discountCode"]>

  export type $DiscountCodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DiscountCode"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      type: string
      value: Prisma.Decimal
      minAmount: Prisma.Decimal
      maxDiscount: Prisma.Decimal | null
      description: string
      maxUses: number
      usedCount: number
      status: string
      startDate: Date | null
      endDate: Date | null
      createdBy: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["discountCode"]>
    composites: {}
  }

  type DiscountCodeGetPayload<S extends boolean | null | undefined | DiscountCodeDefaultArgs> = $Result.GetResult<Prisma.$DiscountCodePayload, S>

  type DiscountCodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DiscountCodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DiscountCodeCountAggregateInputType | true
    }

  export interface DiscountCodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DiscountCode'], meta: { name: 'DiscountCode' } }
    /**
     * Find zero or one DiscountCode that matches the filter.
     * @param {DiscountCodeFindUniqueArgs} args - Arguments to find a DiscountCode
     * @example
     * // Get one DiscountCode
     * const discountCode = await prisma.discountCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DiscountCodeFindUniqueArgs>(args: SelectSubset<T, DiscountCodeFindUniqueArgs<ExtArgs>>): Prisma__DiscountCodeClient<$Result.GetResult<Prisma.$DiscountCodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DiscountCode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DiscountCodeFindUniqueOrThrowArgs} args - Arguments to find a DiscountCode
     * @example
     * // Get one DiscountCode
     * const discountCode = await prisma.discountCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DiscountCodeFindUniqueOrThrowArgs>(args: SelectSubset<T, DiscountCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DiscountCodeClient<$Result.GetResult<Prisma.$DiscountCodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DiscountCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountCodeFindFirstArgs} args - Arguments to find a DiscountCode
     * @example
     * // Get one DiscountCode
     * const discountCode = await prisma.discountCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DiscountCodeFindFirstArgs>(args?: SelectSubset<T, DiscountCodeFindFirstArgs<ExtArgs>>): Prisma__DiscountCodeClient<$Result.GetResult<Prisma.$DiscountCodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DiscountCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountCodeFindFirstOrThrowArgs} args - Arguments to find a DiscountCode
     * @example
     * // Get one DiscountCode
     * const discountCode = await prisma.discountCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DiscountCodeFindFirstOrThrowArgs>(args?: SelectSubset<T, DiscountCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__DiscountCodeClient<$Result.GetResult<Prisma.$DiscountCodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DiscountCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountCodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DiscountCodes
     * const discountCodes = await prisma.discountCode.findMany()
     * 
     * // Get first 10 DiscountCodes
     * const discountCodes = await prisma.discountCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const discountCodeWithIdOnly = await prisma.discountCode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DiscountCodeFindManyArgs>(args?: SelectSubset<T, DiscountCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscountCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DiscountCode.
     * @param {DiscountCodeCreateArgs} args - Arguments to create a DiscountCode.
     * @example
     * // Create one DiscountCode
     * const DiscountCode = await prisma.discountCode.create({
     *   data: {
     *     // ... data to create a DiscountCode
     *   }
     * })
     * 
     */
    create<T extends DiscountCodeCreateArgs>(args: SelectSubset<T, DiscountCodeCreateArgs<ExtArgs>>): Prisma__DiscountCodeClient<$Result.GetResult<Prisma.$DiscountCodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DiscountCodes.
     * @param {DiscountCodeCreateManyArgs} args - Arguments to create many DiscountCodes.
     * @example
     * // Create many DiscountCodes
     * const discountCode = await prisma.discountCode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DiscountCodeCreateManyArgs>(args?: SelectSubset<T, DiscountCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DiscountCode.
     * @param {DiscountCodeDeleteArgs} args - Arguments to delete one DiscountCode.
     * @example
     * // Delete one DiscountCode
     * const DiscountCode = await prisma.discountCode.delete({
     *   where: {
     *     // ... filter to delete one DiscountCode
     *   }
     * })
     * 
     */
    delete<T extends DiscountCodeDeleteArgs>(args: SelectSubset<T, DiscountCodeDeleteArgs<ExtArgs>>): Prisma__DiscountCodeClient<$Result.GetResult<Prisma.$DiscountCodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DiscountCode.
     * @param {DiscountCodeUpdateArgs} args - Arguments to update one DiscountCode.
     * @example
     * // Update one DiscountCode
     * const discountCode = await prisma.discountCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DiscountCodeUpdateArgs>(args: SelectSubset<T, DiscountCodeUpdateArgs<ExtArgs>>): Prisma__DiscountCodeClient<$Result.GetResult<Prisma.$DiscountCodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DiscountCodes.
     * @param {DiscountCodeDeleteManyArgs} args - Arguments to filter DiscountCodes to delete.
     * @example
     * // Delete a few DiscountCodes
     * const { count } = await prisma.discountCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DiscountCodeDeleteManyArgs>(args?: SelectSubset<T, DiscountCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiscountCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DiscountCodes
     * const discountCode = await prisma.discountCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DiscountCodeUpdateManyArgs>(args: SelectSubset<T, DiscountCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DiscountCode.
     * @param {DiscountCodeUpsertArgs} args - Arguments to update or create a DiscountCode.
     * @example
     * // Update or create a DiscountCode
     * const discountCode = await prisma.discountCode.upsert({
     *   create: {
     *     // ... data to create a DiscountCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DiscountCode we want to update
     *   }
     * })
     */
    upsert<T extends DiscountCodeUpsertArgs>(args: SelectSubset<T, DiscountCodeUpsertArgs<ExtArgs>>): Prisma__DiscountCodeClient<$Result.GetResult<Prisma.$DiscountCodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DiscountCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountCodeCountArgs} args - Arguments to filter DiscountCodes to count.
     * @example
     * // Count the number of DiscountCodes
     * const count = await prisma.discountCode.count({
     *   where: {
     *     // ... the filter for the DiscountCodes we want to count
     *   }
     * })
    **/
    count<T extends DiscountCodeCountArgs>(
      args?: Subset<T, DiscountCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiscountCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DiscountCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiscountCodeAggregateArgs>(args: Subset<T, DiscountCodeAggregateArgs>): Prisma.PrismaPromise<GetDiscountCodeAggregateType<T>>

    /**
     * Group by DiscountCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiscountCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiscountCodeGroupByArgs['orderBy'] }
        : { orderBy?: DiscountCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiscountCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscountCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DiscountCode model
   */
  readonly fields: DiscountCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DiscountCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiscountCodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DiscountCode model
   */
  interface DiscountCodeFieldRefs {
    readonly id: FieldRef<"DiscountCode", 'Int'>
    readonly code: FieldRef<"DiscountCode", 'String'>
    readonly type: FieldRef<"DiscountCode", 'String'>
    readonly value: FieldRef<"DiscountCode", 'Decimal'>
    readonly minAmount: FieldRef<"DiscountCode", 'Decimal'>
    readonly maxDiscount: FieldRef<"DiscountCode", 'Decimal'>
    readonly description: FieldRef<"DiscountCode", 'String'>
    readonly maxUses: FieldRef<"DiscountCode", 'Int'>
    readonly usedCount: FieldRef<"DiscountCode", 'Int'>
    readonly status: FieldRef<"DiscountCode", 'String'>
    readonly startDate: FieldRef<"DiscountCode", 'DateTime'>
    readonly endDate: FieldRef<"DiscountCode", 'DateTime'>
    readonly createdBy: FieldRef<"DiscountCode", 'Int'>
    readonly createdAt: FieldRef<"DiscountCode", 'DateTime'>
    readonly updatedAt: FieldRef<"DiscountCode", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DiscountCode findUnique
   */
  export type DiscountCodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscountCode
     */
    select?: DiscountCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscountCode
     */
    omit?: DiscountCodeOmit<ExtArgs> | null
    /**
     * Filter, which DiscountCode to fetch.
     */
    where: DiscountCodeWhereUniqueInput
  }

  /**
   * DiscountCode findUniqueOrThrow
   */
  export type DiscountCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscountCode
     */
    select?: DiscountCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscountCode
     */
    omit?: DiscountCodeOmit<ExtArgs> | null
    /**
     * Filter, which DiscountCode to fetch.
     */
    where: DiscountCodeWhereUniqueInput
  }

  /**
   * DiscountCode findFirst
   */
  export type DiscountCodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscountCode
     */
    select?: DiscountCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscountCode
     */
    omit?: DiscountCodeOmit<ExtArgs> | null
    /**
     * Filter, which DiscountCode to fetch.
     */
    where?: DiscountCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscountCodes to fetch.
     */
    orderBy?: DiscountCodeOrderByWithRelationInput | DiscountCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiscountCodes.
     */
    cursor?: DiscountCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscountCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscountCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiscountCodes.
     */
    distinct?: DiscountCodeScalarFieldEnum | DiscountCodeScalarFieldEnum[]
  }

  /**
   * DiscountCode findFirstOrThrow
   */
  export type DiscountCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscountCode
     */
    select?: DiscountCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscountCode
     */
    omit?: DiscountCodeOmit<ExtArgs> | null
    /**
     * Filter, which DiscountCode to fetch.
     */
    where?: DiscountCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscountCodes to fetch.
     */
    orderBy?: DiscountCodeOrderByWithRelationInput | DiscountCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiscountCodes.
     */
    cursor?: DiscountCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscountCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscountCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiscountCodes.
     */
    distinct?: DiscountCodeScalarFieldEnum | DiscountCodeScalarFieldEnum[]
  }

  /**
   * DiscountCode findMany
   */
  export type DiscountCodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscountCode
     */
    select?: DiscountCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscountCode
     */
    omit?: DiscountCodeOmit<ExtArgs> | null
    /**
     * Filter, which DiscountCodes to fetch.
     */
    where?: DiscountCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscountCodes to fetch.
     */
    orderBy?: DiscountCodeOrderByWithRelationInput | DiscountCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DiscountCodes.
     */
    cursor?: DiscountCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscountCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscountCodes.
     */
    skip?: number
    distinct?: DiscountCodeScalarFieldEnum | DiscountCodeScalarFieldEnum[]
  }

  /**
   * DiscountCode create
   */
  export type DiscountCodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscountCode
     */
    select?: DiscountCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscountCode
     */
    omit?: DiscountCodeOmit<ExtArgs> | null
    /**
     * The data needed to create a DiscountCode.
     */
    data: XOR<DiscountCodeCreateInput, DiscountCodeUncheckedCreateInput>
  }

  /**
   * DiscountCode createMany
   */
  export type DiscountCodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DiscountCodes.
     */
    data: DiscountCodeCreateManyInput | DiscountCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DiscountCode update
   */
  export type DiscountCodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscountCode
     */
    select?: DiscountCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscountCode
     */
    omit?: DiscountCodeOmit<ExtArgs> | null
    /**
     * The data needed to update a DiscountCode.
     */
    data: XOR<DiscountCodeUpdateInput, DiscountCodeUncheckedUpdateInput>
    /**
     * Choose, which DiscountCode to update.
     */
    where: DiscountCodeWhereUniqueInput
  }

  /**
   * DiscountCode updateMany
   */
  export type DiscountCodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DiscountCodes.
     */
    data: XOR<DiscountCodeUpdateManyMutationInput, DiscountCodeUncheckedUpdateManyInput>
    /**
     * Filter which DiscountCodes to update
     */
    where?: DiscountCodeWhereInput
    /**
     * Limit how many DiscountCodes to update.
     */
    limit?: number
  }

  /**
   * DiscountCode upsert
   */
  export type DiscountCodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscountCode
     */
    select?: DiscountCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscountCode
     */
    omit?: DiscountCodeOmit<ExtArgs> | null
    /**
     * The filter to search for the DiscountCode to update in case it exists.
     */
    where: DiscountCodeWhereUniqueInput
    /**
     * In case the DiscountCode found by the `where` argument doesn't exist, create a new DiscountCode with this data.
     */
    create: XOR<DiscountCodeCreateInput, DiscountCodeUncheckedCreateInput>
    /**
     * In case the DiscountCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiscountCodeUpdateInput, DiscountCodeUncheckedUpdateInput>
  }

  /**
   * DiscountCode delete
   */
  export type DiscountCodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscountCode
     */
    select?: DiscountCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscountCode
     */
    omit?: DiscountCodeOmit<ExtArgs> | null
    /**
     * Filter which DiscountCode to delete.
     */
    where: DiscountCodeWhereUniqueInput
  }

  /**
   * DiscountCode deleteMany
   */
  export type DiscountCodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiscountCodes to delete
     */
    where?: DiscountCodeWhereInput
    /**
     * Limit how many DiscountCodes to delete.
     */
    limit?: number
  }

  /**
   * DiscountCode without action
   */
  export type DiscountCodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscountCode
     */
    select?: DiscountCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscountCode
     */
    omit?: DiscountCodeOmit<ExtArgs> | null
  }


  /**
   * Model PasswordReset
   */

  export type AggregatePasswordReset = {
    _count: PasswordResetCountAggregateOutputType | null
    _avg: PasswordResetAvgAggregateOutputType | null
    _sum: PasswordResetSumAggregateOutputType | null
    _min: PasswordResetMinAggregateOutputType | null
    _max: PasswordResetMaxAggregateOutputType | null
  }

  export type PasswordResetAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PasswordResetSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PasswordResetMinAggregateOutputType = {
    id: number | null
    userId: number | null
    token: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PasswordResetMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    token: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PasswordResetCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PasswordResetAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PasswordResetSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PasswordResetMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PasswordResetMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PasswordResetCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PasswordResetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordReset to aggregate.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordResets
    **/
    _count?: true | PasswordResetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PasswordResetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PasswordResetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordResetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordResetMaxAggregateInputType
  }

  export type GetPasswordResetAggregateType<T extends PasswordResetAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordReset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordReset[P]>
      : GetScalarType<T[P], AggregatePasswordReset[P]>
  }




  export type PasswordResetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetWhereInput
    orderBy?: PasswordResetOrderByWithAggregationInput | PasswordResetOrderByWithAggregationInput[]
    by: PasswordResetScalarFieldEnum[] | PasswordResetScalarFieldEnum
    having?: PasswordResetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordResetCountAggregateInputType | true
    _avg?: PasswordResetAvgAggregateInputType
    _sum?: PasswordResetSumAggregateInputType
    _min?: PasswordResetMinAggregateInputType
    _max?: PasswordResetMaxAggregateInputType
  }

  export type PasswordResetGroupByOutputType = {
    id: number
    userId: number
    token: string
    expiresAt: Date
    createdAt: Date
    updatedAt: Date
    _count: PasswordResetCountAggregateOutputType | null
    _avg: PasswordResetAvgAggregateOutputType | null
    _sum: PasswordResetSumAggregateOutputType | null
    _min: PasswordResetMinAggregateOutputType | null
    _max: PasswordResetMaxAggregateOutputType | null
  }

  type GetPasswordResetGroupByPayload<T extends PasswordResetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordResetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordResetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordResetGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordResetGroupByOutputType[P]>
        }
      >
    >


  export type PasswordResetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordReset"]>



  export type PasswordResetSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PasswordResetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "token" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["passwordReset"]>
  export type PasswordResetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $PasswordResetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PasswordReset"
    objects: {
      user: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      token: string
      expiresAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["passwordReset"]>
    composites: {}
  }

  type PasswordResetGetPayload<S extends boolean | null | undefined | PasswordResetDefaultArgs> = $Result.GetResult<Prisma.$PasswordResetPayload, S>

  type PasswordResetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PasswordResetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PasswordResetCountAggregateInputType | true
    }

  export interface PasswordResetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordReset'], meta: { name: 'PasswordReset' } }
    /**
     * Find zero or one PasswordReset that matches the filter.
     * @param {PasswordResetFindUniqueArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PasswordResetFindUniqueArgs>(args: SelectSubset<T, PasswordResetFindUniqueArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PasswordReset that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PasswordResetFindUniqueOrThrowArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PasswordResetFindUniqueOrThrowArgs>(args: SelectSubset<T, PasswordResetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordReset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindFirstArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PasswordResetFindFirstArgs>(args?: SelectSubset<T, PasswordResetFindFirstArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordReset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindFirstOrThrowArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PasswordResetFindFirstOrThrowArgs>(args?: SelectSubset<T, PasswordResetFindFirstOrThrowArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PasswordResets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordResets
     * const passwordResets = await prisma.passwordReset.findMany()
     * 
     * // Get first 10 PasswordResets
     * const passwordResets = await prisma.passwordReset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordResetWithIdOnly = await prisma.passwordReset.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PasswordResetFindManyArgs>(args?: SelectSubset<T, PasswordResetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PasswordReset.
     * @param {PasswordResetCreateArgs} args - Arguments to create a PasswordReset.
     * @example
     * // Create one PasswordReset
     * const PasswordReset = await prisma.passwordReset.create({
     *   data: {
     *     // ... data to create a PasswordReset
     *   }
     * })
     * 
     */
    create<T extends PasswordResetCreateArgs>(args: SelectSubset<T, PasswordResetCreateArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PasswordResets.
     * @param {PasswordResetCreateManyArgs} args - Arguments to create many PasswordResets.
     * @example
     * // Create many PasswordResets
     * const passwordReset = await prisma.passwordReset.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PasswordResetCreateManyArgs>(args?: SelectSubset<T, PasswordResetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PasswordReset.
     * @param {PasswordResetDeleteArgs} args - Arguments to delete one PasswordReset.
     * @example
     * // Delete one PasswordReset
     * const PasswordReset = await prisma.passwordReset.delete({
     *   where: {
     *     // ... filter to delete one PasswordReset
     *   }
     * })
     * 
     */
    delete<T extends PasswordResetDeleteArgs>(args: SelectSubset<T, PasswordResetDeleteArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PasswordReset.
     * @param {PasswordResetUpdateArgs} args - Arguments to update one PasswordReset.
     * @example
     * // Update one PasswordReset
     * const passwordReset = await prisma.passwordReset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PasswordResetUpdateArgs>(args: SelectSubset<T, PasswordResetUpdateArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PasswordResets.
     * @param {PasswordResetDeleteManyArgs} args - Arguments to filter PasswordResets to delete.
     * @example
     * // Delete a few PasswordResets
     * const { count } = await prisma.passwordReset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PasswordResetDeleteManyArgs>(args?: SelectSubset<T, PasswordResetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordResets
     * const passwordReset = await prisma.passwordReset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PasswordResetUpdateManyArgs>(args: SelectSubset<T, PasswordResetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PasswordReset.
     * @param {PasswordResetUpsertArgs} args - Arguments to update or create a PasswordReset.
     * @example
     * // Update or create a PasswordReset
     * const passwordReset = await prisma.passwordReset.upsert({
     *   create: {
     *     // ... data to create a PasswordReset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordReset we want to update
     *   }
     * })
     */
    upsert<T extends PasswordResetUpsertArgs>(args: SelectSubset<T, PasswordResetUpsertArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PasswordResets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetCountArgs} args - Arguments to filter PasswordResets to count.
     * @example
     * // Count the number of PasswordResets
     * const count = await prisma.passwordReset.count({
     *   where: {
     *     // ... the filter for the PasswordResets we want to count
     *   }
     * })
    **/
    count<T extends PasswordResetCountArgs>(
      args?: Subset<T, PasswordResetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordResetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordReset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordResetAggregateArgs>(args: Subset<T, PasswordResetAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetAggregateType<T>>

    /**
     * Group by PasswordReset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordResetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordResetGroupByArgs['orderBy'] }
        : { orderBy?: PasswordResetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordResetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordReset model
   */
  readonly fields: PasswordResetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordReset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordResetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PasswordReset model
   */
  interface PasswordResetFieldRefs {
    readonly id: FieldRef<"PasswordReset", 'Int'>
    readonly userId: FieldRef<"PasswordReset", 'Int'>
    readonly token: FieldRef<"PasswordReset", 'String'>
    readonly expiresAt: FieldRef<"PasswordReset", 'DateTime'>
    readonly createdAt: FieldRef<"PasswordReset", 'DateTime'>
    readonly updatedAt: FieldRef<"PasswordReset", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PasswordReset findUnique
   */
  export type PasswordResetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset findUniqueOrThrow
   */
  export type PasswordResetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset findFirst
   */
  export type PasswordResetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResets.
     */
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * PasswordReset findFirstOrThrow
   */
  export type PasswordResetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResets.
     */
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * PasswordReset findMany
   */
  export type PasswordResetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResets to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * PasswordReset create
   */
  export type PasswordResetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * The data needed to create a PasswordReset.
     */
    data: XOR<PasswordResetCreateInput, PasswordResetUncheckedCreateInput>
  }

  /**
   * PasswordReset createMany
   */
  export type PasswordResetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordResets.
     */
    data: PasswordResetCreateManyInput | PasswordResetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordReset update
   */
  export type PasswordResetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * The data needed to update a PasswordReset.
     */
    data: XOR<PasswordResetUpdateInput, PasswordResetUncheckedUpdateInput>
    /**
     * Choose, which PasswordReset to update.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset updateMany
   */
  export type PasswordResetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordResets.
     */
    data: XOR<PasswordResetUpdateManyMutationInput, PasswordResetUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResets to update
     */
    where?: PasswordResetWhereInput
    /**
     * Limit how many PasswordResets to update.
     */
    limit?: number
  }

  /**
   * PasswordReset upsert
   */
  export type PasswordResetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * The filter to search for the PasswordReset to update in case it exists.
     */
    where: PasswordResetWhereUniqueInput
    /**
     * In case the PasswordReset found by the `where` argument doesn't exist, create a new PasswordReset with this data.
     */
    create: XOR<PasswordResetCreateInput, PasswordResetUncheckedCreateInput>
    /**
     * In case the PasswordReset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordResetUpdateInput, PasswordResetUncheckedUpdateInput>
  }

  /**
   * PasswordReset delete
   */
  export type PasswordResetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter which PasswordReset to delete.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset deleteMany
   */
  export type PasswordResetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResets to delete
     */
    where?: PasswordResetWhereInput
    /**
     * Limit how many PasswordResets to delete.
     */
    limit?: number
  }

  /**
   * PasswordReset without action
   */
  export type PasswordResetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
  }


  /**
   * Model PendingPayment
   */

  export type AggregatePendingPayment = {
    _count: PendingPaymentCountAggregateOutputType | null
    _avg: PendingPaymentAvgAggregateOutputType | null
    _sum: PendingPaymentSumAggregateOutputType | null
    _min: PendingPaymentMinAggregateOutputType | null
    _max: PendingPaymentMaxAggregateOutputType | null
  }

  export type PendingPaymentAvgAggregateOutputType = {
    id: number | null
    amount: Decimal | null
    order_id: number | null
  }

  export type PendingPaymentSumAggregateOutputType = {
    id: number | null
    amount: Decimal | null
    order_id: number | null
  }

  export type PendingPaymentMinAggregateOutputType = {
    id: number | null
    charge_id: string | null
    amount: Decimal | null
    payment_method: string | null
    status: string | null
    order_id: number | null
    processed: boolean | null
    processed_at: Date | null
    customer_email: string | null
    customer_name: string | null
    customer_phone: string | null
    deliveryDate: string | null
    deliveryTime: string | null
    cardMessage: string | null
    additionalNote: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PendingPaymentMaxAggregateOutputType = {
    id: number | null
    charge_id: string | null
    amount: Decimal | null
    payment_method: string | null
    status: string | null
    order_id: number | null
    processed: boolean | null
    processed_at: Date | null
    customer_email: string | null
    customer_name: string | null
    customer_phone: string | null
    deliveryDate: string | null
    deliveryTime: string | null
    cardMessage: string | null
    additionalNote: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PendingPaymentCountAggregateOutputType = {
    id: number
    charge_id: number
    amount: number
    payment_method: number
    status: number
    metadata: number
    order_id: number
    processed: number
    processed_at: number
    customer_email: number
    customer_name: number
    customer_phone: number
    deliveryDate: number
    deliveryTime: number
    cardMessage: number
    additionalNote: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type PendingPaymentAvgAggregateInputType = {
    id?: true
    amount?: true
    order_id?: true
  }

  export type PendingPaymentSumAggregateInputType = {
    id?: true
    amount?: true
    order_id?: true
  }

  export type PendingPaymentMinAggregateInputType = {
    id?: true
    charge_id?: true
    amount?: true
    payment_method?: true
    status?: true
    order_id?: true
    processed?: true
    processed_at?: true
    customer_email?: true
    customer_name?: true
    customer_phone?: true
    deliveryDate?: true
    deliveryTime?: true
    cardMessage?: true
    additionalNote?: true
    created_at?: true
    updated_at?: true
  }

  export type PendingPaymentMaxAggregateInputType = {
    id?: true
    charge_id?: true
    amount?: true
    payment_method?: true
    status?: true
    order_id?: true
    processed?: true
    processed_at?: true
    customer_email?: true
    customer_name?: true
    customer_phone?: true
    deliveryDate?: true
    deliveryTime?: true
    cardMessage?: true
    additionalNote?: true
    created_at?: true
    updated_at?: true
  }

  export type PendingPaymentCountAggregateInputType = {
    id?: true
    charge_id?: true
    amount?: true
    payment_method?: true
    status?: true
    metadata?: true
    order_id?: true
    processed?: true
    processed_at?: true
    customer_email?: true
    customer_name?: true
    customer_phone?: true
    deliveryDate?: true
    deliveryTime?: true
    cardMessage?: true
    additionalNote?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type PendingPaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PendingPayment to aggregate.
     */
    where?: PendingPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PendingPayments to fetch.
     */
    orderBy?: PendingPaymentOrderByWithRelationInput | PendingPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PendingPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PendingPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PendingPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PendingPayments
    **/
    _count?: true | PendingPaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PendingPaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PendingPaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PendingPaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PendingPaymentMaxAggregateInputType
  }

  export type GetPendingPaymentAggregateType<T extends PendingPaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePendingPayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePendingPayment[P]>
      : GetScalarType<T[P], AggregatePendingPayment[P]>
  }




  export type PendingPaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PendingPaymentWhereInput
    orderBy?: PendingPaymentOrderByWithAggregationInput | PendingPaymentOrderByWithAggregationInput[]
    by: PendingPaymentScalarFieldEnum[] | PendingPaymentScalarFieldEnum
    having?: PendingPaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PendingPaymentCountAggregateInputType | true
    _avg?: PendingPaymentAvgAggregateInputType
    _sum?: PendingPaymentSumAggregateInputType
    _min?: PendingPaymentMinAggregateInputType
    _max?: PendingPaymentMaxAggregateInputType
  }

  export type PendingPaymentGroupByOutputType = {
    id: number
    charge_id: string
    amount: Decimal
    payment_method: string
    status: string
    metadata: JsonValue | null
    order_id: number | null
    processed: boolean
    processed_at: Date | null
    customer_email: string | null
    customer_name: string | null
    customer_phone: string | null
    deliveryDate: string | null
    deliveryTime: string | null
    cardMessage: string | null
    additionalNote: string | null
    created_at: Date
    updated_at: Date
    _count: PendingPaymentCountAggregateOutputType | null
    _avg: PendingPaymentAvgAggregateOutputType | null
    _sum: PendingPaymentSumAggregateOutputType | null
    _min: PendingPaymentMinAggregateOutputType | null
    _max: PendingPaymentMaxAggregateOutputType | null
  }

  type GetPendingPaymentGroupByPayload<T extends PendingPaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PendingPaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PendingPaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PendingPaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PendingPaymentGroupByOutputType[P]>
        }
      >
    >


  export type PendingPaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    charge_id?: boolean
    amount?: boolean
    payment_method?: boolean
    status?: boolean
    metadata?: boolean
    order_id?: boolean
    processed?: boolean
    processed_at?: boolean
    customer_email?: boolean
    customer_name?: boolean
    customer_phone?: boolean
    deliveryDate?: boolean
    deliveryTime?: boolean
    cardMessage?: boolean
    additionalNote?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["pendingPayment"]>



  export type PendingPaymentSelectScalar = {
    id?: boolean
    charge_id?: boolean
    amount?: boolean
    payment_method?: boolean
    status?: boolean
    metadata?: boolean
    order_id?: boolean
    processed?: boolean
    processed_at?: boolean
    customer_email?: boolean
    customer_name?: boolean
    customer_phone?: boolean
    deliveryDate?: boolean
    deliveryTime?: boolean
    cardMessage?: boolean
    additionalNote?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type PendingPaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "charge_id" | "amount" | "payment_method" | "status" | "metadata" | "order_id" | "processed" | "processed_at" | "customer_email" | "customer_name" | "customer_phone" | "deliveryDate" | "deliveryTime" | "cardMessage" | "additionalNote" | "created_at" | "updated_at", ExtArgs["result"]["pendingPayment"]>

  export type $PendingPaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PendingPayment"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      charge_id: string
      amount: Prisma.Decimal
      payment_method: string
      status: string
      metadata: Prisma.JsonValue | null
      order_id: number | null
      processed: boolean
      processed_at: Date | null
      customer_email: string | null
      customer_name: string | null
      customer_phone: string | null
      deliveryDate: string | null
      deliveryTime: string | null
      cardMessage: string | null
      additionalNote: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["pendingPayment"]>
    composites: {}
  }

  type PendingPaymentGetPayload<S extends boolean | null | undefined | PendingPaymentDefaultArgs> = $Result.GetResult<Prisma.$PendingPaymentPayload, S>

  type PendingPaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PendingPaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PendingPaymentCountAggregateInputType | true
    }

  export interface PendingPaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PendingPayment'], meta: { name: 'PendingPayment' } }
    /**
     * Find zero or one PendingPayment that matches the filter.
     * @param {PendingPaymentFindUniqueArgs} args - Arguments to find a PendingPayment
     * @example
     * // Get one PendingPayment
     * const pendingPayment = await prisma.pendingPayment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PendingPaymentFindUniqueArgs>(args: SelectSubset<T, PendingPaymentFindUniqueArgs<ExtArgs>>): Prisma__PendingPaymentClient<$Result.GetResult<Prisma.$PendingPaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PendingPayment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PendingPaymentFindUniqueOrThrowArgs} args - Arguments to find a PendingPayment
     * @example
     * // Get one PendingPayment
     * const pendingPayment = await prisma.pendingPayment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PendingPaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PendingPaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PendingPaymentClient<$Result.GetResult<Prisma.$PendingPaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PendingPayment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingPaymentFindFirstArgs} args - Arguments to find a PendingPayment
     * @example
     * // Get one PendingPayment
     * const pendingPayment = await prisma.pendingPayment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PendingPaymentFindFirstArgs>(args?: SelectSubset<T, PendingPaymentFindFirstArgs<ExtArgs>>): Prisma__PendingPaymentClient<$Result.GetResult<Prisma.$PendingPaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PendingPayment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingPaymentFindFirstOrThrowArgs} args - Arguments to find a PendingPayment
     * @example
     * // Get one PendingPayment
     * const pendingPayment = await prisma.pendingPayment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PendingPaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PendingPaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PendingPaymentClient<$Result.GetResult<Prisma.$PendingPaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PendingPayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingPaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PendingPayments
     * const pendingPayments = await prisma.pendingPayment.findMany()
     * 
     * // Get first 10 PendingPayments
     * const pendingPayments = await prisma.pendingPayment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pendingPaymentWithIdOnly = await prisma.pendingPayment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PendingPaymentFindManyArgs>(args?: SelectSubset<T, PendingPaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PendingPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PendingPayment.
     * @param {PendingPaymentCreateArgs} args - Arguments to create a PendingPayment.
     * @example
     * // Create one PendingPayment
     * const PendingPayment = await prisma.pendingPayment.create({
     *   data: {
     *     // ... data to create a PendingPayment
     *   }
     * })
     * 
     */
    create<T extends PendingPaymentCreateArgs>(args: SelectSubset<T, PendingPaymentCreateArgs<ExtArgs>>): Prisma__PendingPaymentClient<$Result.GetResult<Prisma.$PendingPaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PendingPayments.
     * @param {PendingPaymentCreateManyArgs} args - Arguments to create many PendingPayments.
     * @example
     * // Create many PendingPayments
     * const pendingPayment = await prisma.pendingPayment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PendingPaymentCreateManyArgs>(args?: SelectSubset<T, PendingPaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PendingPayment.
     * @param {PendingPaymentDeleteArgs} args - Arguments to delete one PendingPayment.
     * @example
     * // Delete one PendingPayment
     * const PendingPayment = await prisma.pendingPayment.delete({
     *   where: {
     *     // ... filter to delete one PendingPayment
     *   }
     * })
     * 
     */
    delete<T extends PendingPaymentDeleteArgs>(args: SelectSubset<T, PendingPaymentDeleteArgs<ExtArgs>>): Prisma__PendingPaymentClient<$Result.GetResult<Prisma.$PendingPaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PendingPayment.
     * @param {PendingPaymentUpdateArgs} args - Arguments to update one PendingPayment.
     * @example
     * // Update one PendingPayment
     * const pendingPayment = await prisma.pendingPayment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PendingPaymentUpdateArgs>(args: SelectSubset<T, PendingPaymentUpdateArgs<ExtArgs>>): Prisma__PendingPaymentClient<$Result.GetResult<Prisma.$PendingPaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PendingPayments.
     * @param {PendingPaymentDeleteManyArgs} args - Arguments to filter PendingPayments to delete.
     * @example
     * // Delete a few PendingPayments
     * const { count } = await prisma.pendingPayment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PendingPaymentDeleteManyArgs>(args?: SelectSubset<T, PendingPaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PendingPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingPaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PendingPayments
     * const pendingPayment = await prisma.pendingPayment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PendingPaymentUpdateManyArgs>(args: SelectSubset<T, PendingPaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PendingPayment.
     * @param {PendingPaymentUpsertArgs} args - Arguments to update or create a PendingPayment.
     * @example
     * // Update or create a PendingPayment
     * const pendingPayment = await prisma.pendingPayment.upsert({
     *   create: {
     *     // ... data to create a PendingPayment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PendingPayment we want to update
     *   }
     * })
     */
    upsert<T extends PendingPaymentUpsertArgs>(args: SelectSubset<T, PendingPaymentUpsertArgs<ExtArgs>>): Prisma__PendingPaymentClient<$Result.GetResult<Prisma.$PendingPaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PendingPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingPaymentCountArgs} args - Arguments to filter PendingPayments to count.
     * @example
     * // Count the number of PendingPayments
     * const count = await prisma.pendingPayment.count({
     *   where: {
     *     // ... the filter for the PendingPayments we want to count
     *   }
     * })
    **/
    count<T extends PendingPaymentCountArgs>(
      args?: Subset<T, PendingPaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PendingPaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PendingPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingPaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PendingPaymentAggregateArgs>(args: Subset<T, PendingPaymentAggregateArgs>): Prisma.PrismaPromise<GetPendingPaymentAggregateType<T>>

    /**
     * Group by PendingPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingPaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PendingPaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PendingPaymentGroupByArgs['orderBy'] }
        : { orderBy?: PendingPaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PendingPaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPendingPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PendingPayment model
   */
  readonly fields: PendingPaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PendingPayment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PendingPaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PendingPayment model
   */
  interface PendingPaymentFieldRefs {
    readonly id: FieldRef<"PendingPayment", 'Int'>
    readonly charge_id: FieldRef<"PendingPayment", 'String'>
    readonly amount: FieldRef<"PendingPayment", 'Decimal'>
    readonly payment_method: FieldRef<"PendingPayment", 'String'>
    readonly status: FieldRef<"PendingPayment", 'String'>
    readonly metadata: FieldRef<"PendingPayment", 'Json'>
    readonly order_id: FieldRef<"PendingPayment", 'Int'>
    readonly processed: FieldRef<"PendingPayment", 'Boolean'>
    readonly processed_at: FieldRef<"PendingPayment", 'DateTime'>
    readonly customer_email: FieldRef<"PendingPayment", 'String'>
    readonly customer_name: FieldRef<"PendingPayment", 'String'>
    readonly customer_phone: FieldRef<"PendingPayment", 'String'>
    readonly deliveryDate: FieldRef<"PendingPayment", 'String'>
    readonly deliveryTime: FieldRef<"PendingPayment", 'String'>
    readonly cardMessage: FieldRef<"PendingPayment", 'String'>
    readonly additionalNote: FieldRef<"PendingPayment", 'String'>
    readonly created_at: FieldRef<"PendingPayment", 'DateTime'>
    readonly updated_at: FieldRef<"PendingPayment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PendingPayment findUnique
   */
  export type PendingPaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingPayment
     */
    select?: PendingPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingPayment
     */
    omit?: PendingPaymentOmit<ExtArgs> | null
    /**
     * Filter, which PendingPayment to fetch.
     */
    where: PendingPaymentWhereUniqueInput
  }

  /**
   * PendingPayment findUniqueOrThrow
   */
  export type PendingPaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingPayment
     */
    select?: PendingPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingPayment
     */
    omit?: PendingPaymentOmit<ExtArgs> | null
    /**
     * Filter, which PendingPayment to fetch.
     */
    where: PendingPaymentWhereUniqueInput
  }

  /**
   * PendingPayment findFirst
   */
  export type PendingPaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingPayment
     */
    select?: PendingPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingPayment
     */
    omit?: PendingPaymentOmit<ExtArgs> | null
    /**
     * Filter, which PendingPayment to fetch.
     */
    where?: PendingPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PendingPayments to fetch.
     */
    orderBy?: PendingPaymentOrderByWithRelationInput | PendingPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PendingPayments.
     */
    cursor?: PendingPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PendingPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PendingPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PendingPayments.
     */
    distinct?: PendingPaymentScalarFieldEnum | PendingPaymentScalarFieldEnum[]
  }

  /**
   * PendingPayment findFirstOrThrow
   */
  export type PendingPaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingPayment
     */
    select?: PendingPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingPayment
     */
    omit?: PendingPaymentOmit<ExtArgs> | null
    /**
     * Filter, which PendingPayment to fetch.
     */
    where?: PendingPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PendingPayments to fetch.
     */
    orderBy?: PendingPaymentOrderByWithRelationInput | PendingPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PendingPayments.
     */
    cursor?: PendingPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PendingPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PendingPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PendingPayments.
     */
    distinct?: PendingPaymentScalarFieldEnum | PendingPaymentScalarFieldEnum[]
  }

  /**
   * PendingPayment findMany
   */
  export type PendingPaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingPayment
     */
    select?: PendingPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingPayment
     */
    omit?: PendingPaymentOmit<ExtArgs> | null
    /**
     * Filter, which PendingPayments to fetch.
     */
    where?: PendingPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PendingPayments to fetch.
     */
    orderBy?: PendingPaymentOrderByWithRelationInput | PendingPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PendingPayments.
     */
    cursor?: PendingPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PendingPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PendingPayments.
     */
    skip?: number
    distinct?: PendingPaymentScalarFieldEnum | PendingPaymentScalarFieldEnum[]
  }

  /**
   * PendingPayment create
   */
  export type PendingPaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingPayment
     */
    select?: PendingPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingPayment
     */
    omit?: PendingPaymentOmit<ExtArgs> | null
    /**
     * The data needed to create a PendingPayment.
     */
    data: XOR<PendingPaymentCreateInput, PendingPaymentUncheckedCreateInput>
  }

  /**
   * PendingPayment createMany
   */
  export type PendingPaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PendingPayments.
     */
    data: PendingPaymentCreateManyInput | PendingPaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PendingPayment update
   */
  export type PendingPaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingPayment
     */
    select?: PendingPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingPayment
     */
    omit?: PendingPaymentOmit<ExtArgs> | null
    /**
     * The data needed to update a PendingPayment.
     */
    data: XOR<PendingPaymentUpdateInput, PendingPaymentUncheckedUpdateInput>
    /**
     * Choose, which PendingPayment to update.
     */
    where: PendingPaymentWhereUniqueInput
  }

  /**
   * PendingPayment updateMany
   */
  export type PendingPaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PendingPayments.
     */
    data: XOR<PendingPaymentUpdateManyMutationInput, PendingPaymentUncheckedUpdateManyInput>
    /**
     * Filter which PendingPayments to update
     */
    where?: PendingPaymentWhereInput
    /**
     * Limit how many PendingPayments to update.
     */
    limit?: number
  }

  /**
   * PendingPayment upsert
   */
  export type PendingPaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingPayment
     */
    select?: PendingPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingPayment
     */
    omit?: PendingPaymentOmit<ExtArgs> | null
    /**
     * The filter to search for the PendingPayment to update in case it exists.
     */
    where: PendingPaymentWhereUniqueInput
    /**
     * In case the PendingPayment found by the `where` argument doesn't exist, create a new PendingPayment with this data.
     */
    create: XOR<PendingPaymentCreateInput, PendingPaymentUncheckedCreateInput>
    /**
     * In case the PendingPayment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PendingPaymentUpdateInput, PendingPaymentUncheckedUpdateInput>
  }

  /**
   * PendingPayment delete
   */
  export type PendingPaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingPayment
     */
    select?: PendingPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingPayment
     */
    omit?: PendingPaymentOmit<ExtArgs> | null
    /**
     * Filter which PendingPayment to delete.
     */
    where: PendingPaymentWhereUniqueInput
  }

  /**
   * PendingPayment deleteMany
   */
  export type PendingPaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PendingPayments to delete
     */
    where?: PendingPaymentWhereInput
    /**
     * Limit how many PendingPayments to delete.
     */
    limit?: number
  }

  /**
   * PendingPayment without action
   */
  export type PendingPaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingPayment
     */
    select?: PendingPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingPayment
     */
    omit?: PendingPaymentOmit<ExtArgs> | null
  }


  /**
   * Model NotificationLog
   */

  export type AggregateNotificationLog = {
    _count: NotificationLogCountAggregateOutputType | null
    _avg: NotificationLogAvgAggregateOutputType | null
    _sum: NotificationLogSumAggregateOutputType | null
    _min: NotificationLogMinAggregateOutputType | null
    _max: NotificationLogMaxAggregateOutputType | null
  }

  export type NotificationLogAvgAggregateOutputType = {
    id: number | null
    orderId: number | null
  }

  export type NotificationLogSumAggregateOutputType = {
    id: number | null
    orderId: number | null
  }

  export type NotificationLogMinAggregateOutputType = {
    id: number | null
    orderId: number | null
    type: string | null
    eventType: string | null
    sent: boolean | null
    transactionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationLogMaxAggregateOutputType = {
    id: number | null
    orderId: number | null
    type: string | null
    eventType: string | null
    sent: boolean | null
    transactionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationLogCountAggregateOutputType = {
    id: number
    orderId: number
    type: number
    eventType: number
    sent: number
    transactionId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationLogAvgAggregateInputType = {
    id?: true
    orderId?: true
  }

  export type NotificationLogSumAggregateInputType = {
    id?: true
    orderId?: true
  }

  export type NotificationLogMinAggregateInputType = {
    id?: true
    orderId?: true
    type?: true
    eventType?: true
    sent?: true
    transactionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationLogMaxAggregateInputType = {
    id?: true
    orderId?: true
    type?: true
    eventType?: true
    sent?: true
    transactionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationLogCountAggregateInputType = {
    id?: true
    orderId?: true
    type?: true
    eventType?: true
    sent?: true
    transactionId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationLog to aggregate.
     */
    where?: NotificationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationLogs to fetch.
     */
    orderBy?: NotificationLogOrderByWithRelationInput | NotificationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationLogs
    **/
    _count?: true | NotificationLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationLogMaxAggregateInputType
  }

  export type GetNotificationLogAggregateType<T extends NotificationLogAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationLog[P]>
      : GetScalarType<T[P], AggregateNotificationLog[P]>
  }




  export type NotificationLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationLogWhereInput
    orderBy?: NotificationLogOrderByWithAggregationInput | NotificationLogOrderByWithAggregationInput[]
    by: NotificationLogScalarFieldEnum[] | NotificationLogScalarFieldEnum
    having?: NotificationLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationLogCountAggregateInputType | true
    _avg?: NotificationLogAvgAggregateInputType
    _sum?: NotificationLogSumAggregateInputType
    _min?: NotificationLogMinAggregateInputType
    _max?: NotificationLogMaxAggregateInputType
  }

  export type NotificationLogGroupByOutputType = {
    id: number
    orderId: number
    type: string
    eventType: string
    sent: boolean
    transactionId: string | null
    createdAt: Date
    updatedAt: Date
    _count: NotificationLogCountAggregateOutputType | null
    _avg: NotificationLogAvgAggregateOutputType | null
    _sum: NotificationLogSumAggregateOutputType | null
    _min: NotificationLogMinAggregateOutputType | null
    _max: NotificationLogMaxAggregateOutputType | null
  }

  type GetNotificationLogGroupByPayload<T extends NotificationLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationLogGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationLogGroupByOutputType[P]>
        }
      >
    >


  export type NotificationLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    type?: boolean
    eventType?: boolean
    sent?: boolean
    transactionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["notificationLog"]>



  export type NotificationLogSelectScalar = {
    id?: boolean
    orderId?: boolean
    type?: boolean
    eventType?: boolean
    sent?: boolean
    transactionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "type" | "eventType" | "sent" | "transactionId" | "createdAt" | "updatedAt", ExtArgs["result"]["notificationLog"]>

  export type $NotificationLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orderId: number
      type: string
      eventType: string
      sent: boolean
      transactionId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notificationLog"]>
    composites: {}
  }

  type NotificationLogGetPayload<S extends boolean | null | undefined | NotificationLogDefaultArgs> = $Result.GetResult<Prisma.$NotificationLogPayload, S>

  type NotificationLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationLogCountAggregateInputType | true
    }

  export interface NotificationLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationLog'], meta: { name: 'NotificationLog' } }
    /**
     * Find zero or one NotificationLog that matches the filter.
     * @param {NotificationLogFindUniqueArgs} args - Arguments to find a NotificationLog
     * @example
     * // Get one NotificationLog
     * const notificationLog = await prisma.notificationLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationLogFindUniqueArgs>(args: SelectSubset<T, NotificationLogFindUniqueArgs<ExtArgs>>): Prisma__NotificationLogClient<$Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NotificationLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationLogFindUniqueOrThrowArgs} args - Arguments to find a NotificationLog
     * @example
     * // Get one NotificationLog
     * const notificationLog = await prisma.notificationLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationLogFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationLogClient<$Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationLogFindFirstArgs} args - Arguments to find a NotificationLog
     * @example
     * // Get one NotificationLog
     * const notificationLog = await prisma.notificationLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationLogFindFirstArgs>(args?: SelectSubset<T, NotificationLogFindFirstArgs<ExtArgs>>): Prisma__NotificationLogClient<$Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationLogFindFirstOrThrowArgs} args - Arguments to find a NotificationLog
     * @example
     * // Get one NotificationLog
     * const notificationLog = await prisma.notificationLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationLogFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationLogClient<$Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NotificationLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationLogs
     * const notificationLogs = await prisma.notificationLog.findMany()
     * 
     * // Get first 10 NotificationLogs
     * const notificationLogs = await prisma.notificationLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationLogWithIdOnly = await prisma.notificationLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationLogFindManyArgs>(args?: SelectSubset<T, NotificationLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NotificationLog.
     * @param {NotificationLogCreateArgs} args - Arguments to create a NotificationLog.
     * @example
     * // Create one NotificationLog
     * const NotificationLog = await prisma.notificationLog.create({
     *   data: {
     *     // ... data to create a NotificationLog
     *   }
     * })
     * 
     */
    create<T extends NotificationLogCreateArgs>(args: SelectSubset<T, NotificationLogCreateArgs<ExtArgs>>): Prisma__NotificationLogClient<$Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NotificationLogs.
     * @param {NotificationLogCreateManyArgs} args - Arguments to create many NotificationLogs.
     * @example
     * // Create many NotificationLogs
     * const notificationLog = await prisma.notificationLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationLogCreateManyArgs>(args?: SelectSubset<T, NotificationLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NotificationLog.
     * @param {NotificationLogDeleteArgs} args - Arguments to delete one NotificationLog.
     * @example
     * // Delete one NotificationLog
     * const NotificationLog = await prisma.notificationLog.delete({
     *   where: {
     *     // ... filter to delete one NotificationLog
     *   }
     * })
     * 
     */
    delete<T extends NotificationLogDeleteArgs>(args: SelectSubset<T, NotificationLogDeleteArgs<ExtArgs>>): Prisma__NotificationLogClient<$Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NotificationLog.
     * @param {NotificationLogUpdateArgs} args - Arguments to update one NotificationLog.
     * @example
     * // Update one NotificationLog
     * const notificationLog = await prisma.notificationLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationLogUpdateArgs>(args: SelectSubset<T, NotificationLogUpdateArgs<ExtArgs>>): Prisma__NotificationLogClient<$Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NotificationLogs.
     * @param {NotificationLogDeleteManyArgs} args - Arguments to filter NotificationLogs to delete.
     * @example
     * // Delete a few NotificationLogs
     * const { count } = await prisma.notificationLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationLogDeleteManyArgs>(args?: SelectSubset<T, NotificationLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationLogs
     * const notificationLog = await prisma.notificationLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationLogUpdateManyArgs>(args: SelectSubset<T, NotificationLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NotificationLog.
     * @param {NotificationLogUpsertArgs} args - Arguments to update or create a NotificationLog.
     * @example
     * // Update or create a NotificationLog
     * const notificationLog = await prisma.notificationLog.upsert({
     *   create: {
     *     // ... data to create a NotificationLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationLog we want to update
     *   }
     * })
     */
    upsert<T extends NotificationLogUpsertArgs>(args: SelectSubset<T, NotificationLogUpsertArgs<ExtArgs>>): Prisma__NotificationLogClient<$Result.GetResult<Prisma.$NotificationLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NotificationLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationLogCountArgs} args - Arguments to filter NotificationLogs to count.
     * @example
     * // Count the number of NotificationLogs
     * const count = await prisma.notificationLog.count({
     *   where: {
     *     // ... the filter for the NotificationLogs we want to count
     *   }
     * })
    **/
    count<T extends NotificationLogCountArgs>(
      args?: Subset<T, NotificationLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationLogAggregateArgs>(args: Subset<T, NotificationLogAggregateArgs>): Prisma.PrismaPromise<GetNotificationLogAggregateType<T>>

    /**
     * Group by NotificationLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationLogGroupByArgs['orderBy'] }
        : { orderBy?: NotificationLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationLog model
   */
  readonly fields: NotificationLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationLog model
   */
  interface NotificationLogFieldRefs {
    readonly id: FieldRef<"NotificationLog", 'Int'>
    readonly orderId: FieldRef<"NotificationLog", 'Int'>
    readonly type: FieldRef<"NotificationLog", 'String'>
    readonly eventType: FieldRef<"NotificationLog", 'String'>
    readonly sent: FieldRef<"NotificationLog", 'Boolean'>
    readonly transactionId: FieldRef<"NotificationLog", 'String'>
    readonly createdAt: FieldRef<"NotificationLog", 'DateTime'>
    readonly updatedAt: FieldRef<"NotificationLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NotificationLog findUnique
   */
  export type NotificationLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationLog
     */
    select?: NotificationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationLog
     */
    omit?: NotificationLogOmit<ExtArgs> | null
    /**
     * Filter, which NotificationLog to fetch.
     */
    where: NotificationLogWhereUniqueInput
  }

  /**
   * NotificationLog findUniqueOrThrow
   */
  export type NotificationLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationLog
     */
    select?: NotificationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationLog
     */
    omit?: NotificationLogOmit<ExtArgs> | null
    /**
     * Filter, which NotificationLog to fetch.
     */
    where: NotificationLogWhereUniqueInput
  }

  /**
   * NotificationLog findFirst
   */
  export type NotificationLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationLog
     */
    select?: NotificationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationLog
     */
    omit?: NotificationLogOmit<ExtArgs> | null
    /**
     * Filter, which NotificationLog to fetch.
     */
    where?: NotificationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationLogs to fetch.
     */
    orderBy?: NotificationLogOrderByWithRelationInput | NotificationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationLogs.
     */
    cursor?: NotificationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationLogs.
     */
    distinct?: NotificationLogScalarFieldEnum | NotificationLogScalarFieldEnum[]
  }

  /**
   * NotificationLog findFirstOrThrow
   */
  export type NotificationLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationLog
     */
    select?: NotificationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationLog
     */
    omit?: NotificationLogOmit<ExtArgs> | null
    /**
     * Filter, which NotificationLog to fetch.
     */
    where?: NotificationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationLogs to fetch.
     */
    orderBy?: NotificationLogOrderByWithRelationInput | NotificationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationLogs.
     */
    cursor?: NotificationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationLogs.
     */
    distinct?: NotificationLogScalarFieldEnum | NotificationLogScalarFieldEnum[]
  }

  /**
   * NotificationLog findMany
   */
  export type NotificationLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationLog
     */
    select?: NotificationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationLog
     */
    omit?: NotificationLogOmit<ExtArgs> | null
    /**
     * Filter, which NotificationLogs to fetch.
     */
    where?: NotificationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationLogs to fetch.
     */
    orderBy?: NotificationLogOrderByWithRelationInput | NotificationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationLogs.
     */
    cursor?: NotificationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationLogs.
     */
    skip?: number
    distinct?: NotificationLogScalarFieldEnum | NotificationLogScalarFieldEnum[]
  }

  /**
   * NotificationLog create
   */
  export type NotificationLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationLog
     */
    select?: NotificationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationLog
     */
    omit?: NotificationLogOmit<ExtArgs> | null
    /**
     * The data needed to create a NotificationLog.
     */
    data: XOR<NotificationLogCreateInput, NotificationLogUncheckedCreateInput>
  }

  /**
   * NotificationLog createMany
   */
  export type NotificationLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationLogs.
     */
    data: NotificationLogCreateManyInput | NotificationLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationLog update
   */
  export type NotificationLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationLog
     */
    select?: NotificationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationLog
     */
    omit?: NotificationLogOmit<ExtArgs> | null
    /**
     * The data needed to update a NotificationLog.
     */
    data: XOR<NotificationLogUpdateInput, NotificationLogUncheckedUpdateInput>
    /**
     * Choose, which NotificationLog to update.
     */
    where: NotificationLogWhereUniqueInput
  }

  /**
   * NotificationLog updateMany
   */
  export type NotificationLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationLogs.
     */
    data: XOR<NotificationLogUpdateManyMutationInput, NotificationLogUncheckedUpdateManyInput>
    /**
     * Filter which NotificationLogs to update
     */
    where?: NotificationLogWhereInput
    /**
     * Limit how many NotificationLogs to update.
     */
    limit?: number
  }

  /**
   * NotificationLog upsert
   */
  export type NotificationLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationLog
     */
    select?: NotificationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationLog
     */
    omit?: NotificationLogOmit<ExtArgs> | null
    /**
     * The filter to search for the NotificationLog to update in case it exists.
     */
    where: NotificationLogWhereUniqueInput
    /**
     * In case the NotificationLog found by the `where` argument doesn't exist, create a new NotificationLog with this data.
     */
    create: XOR<NotificationLogCreateInput, NotificationLogUncheckedCreateInput>
    /**
     * In case the NotificationLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationLogUpdateInput, NotificationLogUncheckedUpdateInput>
  }

  /**
   * NotificationLog delete
   */
  export type NotificationLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationLog
     */
    select?: NotificationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationLog
     */
    omit?: NotificationLogOmit<ExtArgs> | null
    /**
     * Filter which NotificationLog to delete.
     */
    where: NotificationLogWhereUniqueInput
  }

  /**
   * NotificationLog deleteMany
   */
  export type NotificationLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationLogs to delete
     */
    where?: NotificationLogWhereInput
    /**
     * Limit how many NotificationLogs to delete.
     */
    limit?: number
  }

  /**
   * NotificationLog without action
   */
  export type NotificationLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationLog
     */
    select?: NotificationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationLog
     */
    omit?: NotificationLogOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    categoryName: 'categoryName',
    categoryDesc: 'categoryDesc',
    priority: 'priority',
    status: 'status',
    bestseller: 'bestseller',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    sku: 'sku',
    productImg: 'productImg',
    productName: 'productName',
    slug: 'slug',
    productDesc: 'productDesc',
    salesPrice: 'salesPrice',
    originalPrice: 'originalPrice',
    discount: 'discount',
    potSize: 'potSize',
    plantHeight: 'plantHeight',
    preparationTime: 'preparationTime',
    stock: 'stock',
    stockStatus: 'stockStatus',
    category: 'category',
    categoryId: 'categoryId',
    productStatus: 'productStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const StatusmasterScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    desc: 'desc',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StatusmasterScalarFieldEnum = (typeof StatusmasterScalarFieldEnum)[keyof typeof StatusmasterScalarFieldEnum]


  export const ProductimageScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    imageName: 'imageName',
    imageDesc: 'imageDesc',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductimageScalarFieldEnum = (typeof ProductimageScalarFieldEnum)[keyof typeof ProductimageScalarFieldEnum]


  export const ThaiamphuresScalarFieldEnum: {
    id: 'id',
    nameTh: 'nameTh',
    nameEn: 'nameEn',
    provinceId: 'provinceId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type ThaiamphuresScalarFieldEnum = (typeof ThaiamphuresScalarFieldEnum)[keyof typeof ThaiamphuresScalarFieldEnum]


  export const ThaigeographiesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ThaigeographiesScalarFieldEnum = (typeof ThaigeographiesScalarFieldEnum)[keyof typeof ThaigeographiesScalarFieldEnum]


  export const ThaiprovincesScalarFieldEnum: {
    id: 'id',
    nameTh: 'nameTh',
    nameEn: 'nameEn',
    geographyId: 'geographyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type ThaiprovincesScalarFieldEnum = (typeof ThaiprovincesScalarFieldEnum)[keyof typeof ThaiprovincesScalarFieldEnum]


  export const ThaitambonsScalarFieldEnum: {
    id: 'id',
    zipCode: 'zipCode',
    nameTh: 'nameTh',
    nameEn: 'nameEn',
    amphureId: 'amphureId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type ThaitambonsScalarFieldEnum = (typeof ThaitambonsScalarFieldEnum)[keyof typeof ThaitambonsScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    orderNumber: 'orderNumber',
    userId: 'userId',
    status: 'status',
    totalAmount: 'totalAmount',
    shippingCost: 'shippingCost',
    discount: 'discount',
    discountCode: 'discountCode',
    finalAmount: 'finalAmount',
    paymentMethod: 'paymentMethod',
    paymentStatus: 'paymentStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    adminComment: 'adminComment',
    stripeSessionId: 'stripeSessionId',
    stripePaymentMethodType: 'stripePaymentMethodType'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderItemScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    productId: 'productId',
    productName: 'productName',
    quantity: 'quantity',
    unitPrice: 'unitPrice',
    totalPrice: 'totalPrice',
    productImg: 'productImg',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderItemScalarFieldEnum = (typeof OrderItemScalarFieldEnum)[keyof typeof OrderItemScalarFieldEnum]


  export const CustomerInfoScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phone: 'phone',
    note: 'note',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerInfoScalarFieldEnum = (typeof CustomerInfoScalarFieldEnum)[keyof typeof CustomerInfoScalarFieldEnum]


  export const ShippingInfoScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    receiverName: 'receiverName',
    receiverLastname: 'receiverLastname',
    receiverPhone: 'receiverPhone',
    addressLine: 'addressLine',
    addressLine2: 'addressLine2',
    provinceId: 'provinceId',
    provinceName: 'provinceName',
    amphureId: 'amphureId',
    amphureName: 'amphureName',
    tambonId: 'tambonId',
    tambonName: 'tambonName',
    zipCode: 'zipCode',
    deliveryDate: 'deliveryDate',
    deliveryTime: 'deliveryTime',
    cardMessage: 'cardMessage',
    additionalNote: 'additionalNote',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ShippingInfoScalarFieldEnum = (typeof ShippingInfoScalarFieldEnum)[keyof typeof ShippingInfoScalarFieldEnum]


  export const PaymentInfoScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    paymentMethod: 'paymentMethod',
    paymentDate: 'paymentDate',
    transactionId: 'transactionId',
    amount: 'amount',
    bankName: 'bankName',
    slipUrl: 'slipUrl',
    status: 'status',
    verifiedBy: 'verifiedBy',
    verifiedAt: 'verifiedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentInfoScalarFieldEnum = (typeof PaymentInfoScalarFieldEnum)[keyof typeof PaymentInfoScalarFieldEnum]


  export const PaymentConfirmationScalarFieldEnum: {
    id: 'id',
    orderNumber: 'orderNumber',
    amount: 'amount',
    bankName: 'bankName',
    slipUrl: 'slipUrl',
    status: 'status',
    notes: 'notes',
    verifiedBy: 'verifiedBy',
    verifiedAt: 'verifiedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentConfirmationScalarFieldEnum = (typeof PaymentConfirmationScalarFieldEnum)[keyof typeof PaymentConfirmationScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    isAdmin: 'isAdmin',
    emailVerifiedAt: 'emailVerifiedAt',
    password: 'password',
    rememberToken: 'rememberToken',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lineId: 'lineId',
    avatar: 'avatar'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const BlogScalarFieldEnum: {
    id: 'id',
    title: 'title',
    slug: 'slug',
    excerpt: 'excerpt',
    content: 'content',
    image: 'image',
    category: 'category',
    date: 'date',
    published: 'published',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BlogScalarFieldEnum = (typeof BlogScalarFieldEnum)[keyof typeof BlogScalarFieldEnum]


  export const DiscountCodeScalarFieldEnum: {
    id: 'id',
    code: 'code',
    type: 'type',
    value: 'value',
    minAmount: 'minAmount',
    maxDiscount: 'maxDiscount',
    description: 'description',
    maxUses: 'maxUses',
    usedCount: 'usedCount',
    status: 'status',
    startDate: 'startDate',
    endDate: 'endDate',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DiscountCodeScalarFieldEnum = (typeof DiscountCodeScalarFieldEnum)[keyof typeof DiscountCodeScalarFieldEnum]


  export const PasswordResetScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PasswordResetScalarFieldEnum = (typeof PasswordResetScalarFieldEnum)[keyof typeof PasswordResetScalarFieldEnum]


  export const PendingPaymentScalarFieldEnum: {
    id: 'id',
    charge_id: 'charge_id',
    amount: 'amount',
    payment_method: 'payment_method',
    status: 'status',
    metadata: 'metadata',
    order_id: 'order_id',
    processed: 'processed',
    processed_at: 'processed_at',
    customer_email: 'customer_email',
    customer_name: 'customer_name',
    customer_phone: 'customer_phone',
    deliveryDate: 'deliveryDate',
    deliveryTime: 'deliveryTime',
    cardMessage: 'cardMessage',
    additionalNote: 'additionalNote',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type PendingPaymentScalarFieldEnum = (typeof PendingPaymentScalarFieldEnum)[keyof typeof PendingPaymentScalarFieldEnum]


  export const NotificationLogScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    type: 'type',
    eventType: 'eventType',
    sent: 'sent',
    transactionId: 'transactionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationLogScalarFieldEnum = (typeof NotificationLogScalarFieldEnum)[keyof typeof NotificationLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const CategoryOrderByRelevanceFieldEnum: {
    categoryName: 'categoryName',
    categoryDesc: 'categoryDesc',
    status: 'status',
    bestseller: 'bestseller'
  };

  export type CategoryOrderByRelevanceFieldEnum = (typeof CategoryOrderByRelevanceFieldEnum)[keyof typeof CategoryOrderByRelevanceFieldEnum]


  export const ProductOrderByRelevanceFieldEnum: {
    sku: 'sku',
    productImg: 'productImg',
    productName: 'productName',
    slug: 'slug',
    productDesc: 'productDesc',
    potSize: 'potSize',
    plantHeight: 'plantHeight',
    preparationTime: 'preparationTime',
    stockStatus: 'stockStatus',
    category: 'category',
    productStatus: 'productStatus'
  };

  export type ProductOrderByRelevanceFieldEnum = (typeof ProductOrderByRelevanceFieldEnum)[keyof typeof ProductOrderByRelevanceFieldEnum]


  export const statusmasterOrderByRelevanceFieldEnum: {
    code: 'code',
    name: 'name',
    desc: 'desc',
    type: 'type'
  };

  export type statusmasterOrderByRelevanceFieldEnum = (typeof statusmasterOrderByRelevanceFieldEnum)[keyof typeof statusmasterOrderByRelevanceFieldEnum]


  export const productimageOrderByRelevanceFieldEnum: {
    imageName: 'imageName',
    imageDesc: 'imageDesc'
  };

  export type productimageOrderByRelevanceFieldEnum = (typeof productimageOrderByRelevanceFieldEnum)[keyof typeof productimageOrderByRelevanceFieldEnum]


  export const thaiamphuresOrderByRelevanceFieldEnum: {
    nameTh: 'nameTh',
    nameEn: 'nameEn'
  };

  export type thaiamphuresOrderByRelevanceFieldEnum = (typeof thaiamphuresOrderByRelevanceFieldEnum)[keyof typeof thaiamphuresOrderByRelevanceFieldEnum]


  export const thaigeographiesOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type thaigeographiesOrderByRelevanceFieldEnum = (typeof thaigeographiesOrderByRelevanceFieldEnum)[keyof typeof thaigeographiesOrderByRelevanceFieldEnum]


  export const thaiprovincesOrderByRelevanceFieldEnum: {
    nameTh: 'nameTh',
    nameEn: 'nameEn'
  };

  export type thaiprovincesOrderByRelevanceFieldEnum = (typeof thaiprovincesOrderByRelevanceFieldEnum)[keyof typeof thaiprovincesOrderByRelevanceFieldEnum]


  export const thaitambonsOrderByRelevanceFieldEnum: {
    nameTh: 'nameTh',
    nameEn: 'nameEn'
  };

  export type thaitambonsOrderByRelevanceFieldEnum = (typeof thaitambonsOrderByRelevanceFieldEnum)[keyof typeof thaitambonsOrderByRelevanceFieldEnum]


  export const OrderOrderByRelevanceFieldEnum: {
    orderNumber: 'orderNumber',
    discountCode: 'discountCode',
    adminComment: 'adminComment',
    stripeSessionId: 'stripeSessionId',
    stripePaymentMethodType: 'stripePaymentMethodType'
  };

  export type OrderOrderByRelevanceFieldEnum = (typeof OrderOrderByRelevanceFieldEnum)[keyof typeof OrderOrderByRelevanceFieldEnum]


  export const OrderItemOrderByRelevanceFieldEnum: {
    productName: 'productName',
    productImg: 'productImg'
  };

  export type OrderItemOrderByRelevanceFieldEnum = (typeof OrderItemOrderByRelevanceFieldEnum)[keyof typeof OrderItemOrderByRelevanceFieldEnum]


  export const CustomerInfoOrderByRelevanceFieldEnum: {
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phone: 'phone',
    note: 'note'
  };

  export type CustomerInfoOrderByRelevanceFieldEnum = (typeof CustomerInfoOrderByRelevanceFieldEnum)[keyof typeof CustomerInfoOrderByRelevanceFieldEnum]


  export const ShippingInfoOrderByRelevanceFieldEnum: {
    receiverName: 'receiverName',
    receiverLastname: 'receiverLastname',
    receiverPhone: 'receiverPhone',
    addressLine: 'addressLine',
    addressLine2: 'addressLine2',
    provinceName: 'provinceName',
    amphureName: 'amphureName',
    tambonName: 'tambonName',
    zipCode: 'zipCode',
    deliveryTime: 'deliveryTime',
    cardMessage: 'cardMessage',
    additionalNote: 'additionalNote'
  };

  export type ShippingInfoOrderByRelevanceFieldEnum = (typeof ShippingInfoOrderByRelevanceFieldEnum)[keyof typeof ShippingInfoOrderByRelevanceFieldEnum]


  export const PaymentInfoOrderByRelevanceFieldEnum: {
    transactionId: 'transactionId',
    bankName: 'bankName',
    slipUrl: 'slipUrl'
  };

  export type PaymentInfoOrderByRelevanceFieldEnum = (typeof PaymentInfoOrderByRelevanceFieldEnum)[keyof typeof PaymentInfoOrderByRelevanceFieldEnum]


  export const PaymentConfirmationOrderByRelevanceFieldEnum: {
    id: 'id',
    orderNumber: 'orderNumber',
    bankName: 'bankName',
    slipUrl: 'slipUrl',
    status: 'status',
    notes: 'notes'
  };

  export type PaymentConfirmationOrderByRelevanceFieldEnum = (typeof PaymentConfirmationOrderByRelevanceFieldEnum)[keyof typeof PaymentConfirmationOrderByRelevanceFieldEnum]


  export const usersOrderByRelevanceFieldEnum: {
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    password: 'password',
    rememberToken: 'rememberToken',
    lineId: 'lineId',
    avatar: 'avatar'
  };

  export type usersOrderByRelevanceFieldEnum = (typeof usersOrderByRelevanceFieldEnum)[keyof typeof usersOrderByRelevanceFieldEnum]


  export const BlogOrderByRelevanceFieldEnum: {
    title: 'title',
    slug: 'slug',
    excerpt: 'excerpt',
    content: 'content',
    image: 'image',
    category: 'category',
    date: 'date'
  };

  export type BlogOrderByRelevanceFieldEnum = (typeof BlogOrderByRelevanceFieldEnum)[keyof typeof BlogOrderByRelevanceFieldEnum]


  export const DiscountCodeOrderByRelevanceFieldEnum: {
    code: 'code',
    type: 'type',
    description: 'description',
    status: 'status'
  };

  export type DiscountCodeOrderByRelevanceFieldEnum = (typeof DiscountCodeOrderByRelevanceFieldEnum)[keyof typeof DiscountCodeOrderByRelevanceFieldEnum]


  export const PasswordResetOrderByRelevanceFieldEnum: {
    token: 'token'
  };

  export type PasswordResetOrderByRelevanceFieldEnum = (typeof PasswordResetOrderByRelevanceFieldEnum)[keyof typeof PasswordResetOrderByRelevanceFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const PendingPaymentOrderByRelevanceFieldEnum: {
    charge_id: 'charge_id',
    payment_method: 'payment_method',
    status: 'status',
    customer_email: 'customer_email',
    customer_name: 'customer_name',
    customer_phone: 'customer_phone',
    deliveryDate: 'deliveryDate',
    deliveryTime: 'deliveryTime',
    cardMessage: 'cardMessage',
    additionalNote: 'additionalNote'
  };

  export type PendingPaymentOrderByRelevanceFieldEnum = (typeof PendingPaymentOrderByRelevanceFieldEnum)[keyof typeof PendingPaymentOrderByRelevanceFieldEnum]


  export const NotificationLogOrderByRelevanceFieldEnum: {
    type: 'type',
    eventType: 'eventType',
    transactionId: 'transactionId'
  };

  export type NotificationLogOrderByRelevanceFieldEnum = (typeof NotificationLogOrderByRelevanceFieldEnum)[keyof typeof NotificationLogOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'users_isAdmin'
   */
  export type Enumusers_isAdminFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'users_isAdmin'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    categoryName?: StringNullableFilter<"Category"> | string | null
    categoryDesc?: StringNullableFilter<"Category"> | string | null
    priority?: IntNullableFilter<"Category"> | number | null
    status?: StringNullableFilter<"Category"> | string | null
    bestseller?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeNullableFilter<"Category"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Category"> | Date | string | null
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    categoryName?: SortOrderInput | SortOrder
    categoryDesc?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    bestseller?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _relevance?: CategoryOrderByRelevanceInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    categoryName?: StringNullableFilter<"Category"> | string | null
    categoryDesc?: StringNullableFilter<"Category"> | string | null
    priority?: IntNullableFilter<"Category"> | number | null
    status?: StringNullableFilter<"Category"> | string | null
    bestseller?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeNullableFilter<"Category"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Category"> | Date | string | null
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    categoryName?: SortOrderInput | SortOrder
    categoryDesc?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    bestseller?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    categoryName?: StringNullableWithAggregatesFilter<"Category"> | string | null
    categoryDesc?: StringNullableWithAggregatesFilter<"Category"> | string | null
    priority?: IntNullableWithAggregatesFilter<"Category"> | number | null
    status?: StringNullableWithAggregatesFilter<"Category"> | string | null
    bestseller?: StringNullableWithAggregatesFilter<"Category"> | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"Category"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Category"> | Date | string | null
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: IntFilter<"Product"> | number
    sku?: StringNullableFilter<"Product"> | string | null
    productImg?: StringNullableFilter<"Product"> | string | null
    productName?: StringNullableFilter<"Product"> | string | null
    slug?: StringNullableFilter<"Product"> | string | null
    productDesc?: StringNullableFilter<"Product"> | string | null
    salesPrice?: DecimalNullableFilter<"Product"> | Decimal | DecimalJsLike | number | string | null
    originalPrice?: DecimalNullableFilter<"Product"> | Decimal | DecimalJsLike | number | string | null
    discount?: IntNullableFilter<"Product"> | number | null
    potSize?: StringNullableFilter<"Product"> | string | null
    plantHeight?: StringNullableFilter<"Product"> | string | null
    preparationTime?: StringNullableFilter<"Product"> | string | null
    stock?: IntNullableFilter<"Product"> | number | null
    stockStatus?: StringNullableFilter<"Product"> | string | null
    category?: StringNullableFilter<"Product"> | string | null
    categoryId?: IntNullableFilter<"Product"> | number | null
    productStatus?: StringNullableFilter<"Product"> | string | null
    createdAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    orderItems?: OrderItemListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    sku?: SortOrderInput | SortOrder
    productImg?: SortOrderInput | SortOrder
    productName?: SortOrderInput | SortOrder
    slug?: SortOrderInput | SortOrder
    productDesc?: SortOrderInput | SortOrder
    salesPrice?: SortOrderInput | SortOrder
    originalPrice?: SortOrderInput | SortOrder
    discount?: SortOrderInput | SortOrder
    potSize?: SortOrderInput | SortOrder
    plantHeight?: SortOrderInput | SortOrder
    preparationTime?: SortOrderInput | SortOrder
    stock?: SortOrderInput | SortOrder
    stockStatus?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    productStatus?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    orderItems?: OrderItemOrderByRelationAggregateInput
    _relevance?: ProductOrderByRelevanceInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sku?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    productImg?: StringNullableFilter<"Product"> | string | null
    productName?: StringNullableFilter<"Product"> | string | null
    slug?: StringNullableFilter<"Product"> | string | null
    productDesc?: StringNullableFilter<"Product"> | string | null
    salesPrice?: DecimalNullableFilter<"Product"> | Decimal | DecimalJsLike | number | string | null
    originalPrice?: DecimalNullableFilter<"Product"> | Decimal | DecimalJsLike | number | string | null
    discount?: IntNullableFilter<"Product"> | number | null
    potSize?: StringNullableFilter<"Product"> | string | null
    plantHeight?: StringNullableFilter<"Product"> | string | null
    preparationTime?: StringNullableFilter<"Product"> | string | null
    stock?: IntNullableFilter<"Product"> | number | null
    stockStatus?: StringNullableFilter<"Product"> | string | null
    category?: StringNullableFilter<"Product"> | string | null
    categoryId?: IntNullableFilter<"Product"> | number | null
    productStatus?: StringNullableFilter<"Product"> | string | null
    createdAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    orderItems?: OrderItemListRelationFilter
  }, "id" | "sku">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    sku?: SortOrderInput | SortOrder
    productImg?: SortOrderInput | SortOrder
    productName?: SortOrderInput | SortOrder
    slug?: SortOrderInput | SortOrder
    productDesc?: SortOrderInput | SortOrder
    salesPrice?: SortOrderInput | SortOrder
    originalPrice?: SortOrderInput | SortOrder
    discount?: SortOrderInput | SortOrder
    potSize?: SortOrderInput | SortOrder
    plantHeight?: SortOrderInput | SortOrder
    preparationTime?: SortOrderInput | SortOrder
    stock?: SortOrderInput | SortOrder
    stockStatus?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    productStatus?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Product"> | number
    sku?: StringNullableWithAggregatesFilter<"Product"> | string | null
    productImg?: StringNullableWithAggregatesFilter<"Product"> | string | null
    productName?: StringNullableWithAggregatesFilter<"Product"> | string | null
    slug?: StringNullableWithAggregatesFilter<"Product"> | string | null
    productDesc?: StringNullableWithAggregatesFilter<"Product"> | string | null
    salesPrice?: DecimalNullableWithAggregatesFilter<"Product"> | Decimal | DecimalJsLike | number | string | null
    originalPrice?: DecimalNullableWithAggregatesFilter<"Product"> | Decimal | DecimalJsLike | number | string | null
    discount?: IntNullableWithAggregatesFilter<"Product"> | number | null
    potSize?: StringNullableWithAggregatesFilter<"Product"> | string | null
    plantHeight?: StringNullableWithAggregatesFilter<"Product"> | string | null
    preparationTime?: StringNullableWithAggregatesFilter<"Product"> | string | null
    stock?: IntNullableWithAggregatesFilter<"Product"> | number | null
    stockStatus?: StringNullableWithAggregatesFilter<"Product"> | string | null
    category?: StringNullableWithAggregatesFilter<"Product"> | string | null
    categoryId?: IntNullableWithAggregatesFilter<"Product"> | number | null
    productStatus?: StringNullableWithAggregatesFilter<"Product"> | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"Product"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Product"> | Date | string | null
  }

  export type statusmasterWhereInput = {
    AND?: statusmasterWhereInput | statusmasterWhereInput[]
    OR?: statusmasterWhereInput[]
    NOT?: statusmasterWhereInput | statusmasterWhereInput[]
    id?: IntFilter<"statusmaster"> | number
    code?: StringNullableFilter<"statusmaster"> | string | null
    name?: StringNullableFilter<"statusmaster"> | string | null
    desc?: StringNullableFilter<"statusmaster"> | string | null
    type?: StringNullableFilter<"statusmaster"> | string | null
    createdAt?: DateTimeNullableFilter<"statusmaster"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"statusmaster"> | Date | string | null
  }

  export type statusmasterOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    desc?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _relevance?: statusmasterOrderByRelevanceInput
  }

  export type statusmasterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: statusmasterWhereInput | statusmasterWhereInput[]
    OR?: statusmasterWhereInput[]
    NOT?: statusmasterWhereInput | statusmasterWhereInput[]
    code?: StringNullableFilter<"statusmaster"> | string | null
    name?: StringNullableFilter<"statusmaster"> | string | null
    desc?: StringNullableFilter<"statusmaster"> | string | null
    type?: StringNullableFilter<"statusmaster"> | string | null
    createdAt?: DateTimeNullableFilter<"statusmaster"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"statusmaster"> | Date | string | null
  }, "id">

  export type statusmasterOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    desc?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: statusmasterCountOrderByAggregateInput
    _avg?: statusmasterAvgOrderByAggregateInput
    _max?: statusmasterMaxOrderByAggregateInput
    _min?: statusmasterMinOrderByAggregateInput
    _sum?: statusmasterSumOrderByAggregateInput
  }

  export type statusmasterScalarWhereWithAggregatesInput = {
    AND?: statusmasterScalarWhereWithAggregatesInput | statusmasterScalarWhereWithAggregatesInput[]
    OR?: statusmasterScalarWhereWithAggregatesInput[]
    NOT?: statusmasterScalarWhereWithAggregatesInput | statusmasterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"statusmaster"> | number
    code?: StringNullableWithAggregatesFilter<"statusmaster"> | string | null
    name?: StringNullableWithAggregatesFilter<"statusmaster"> | string | null
    desc?: StringNullableWithAggregatesFilter<"statusmaster"> | string | null
    type?: StringNullableWithAggregatesFilter<"statusmaster"> | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"statusmaster"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"statusmaster"> | Date | string | null
  }

  export type productimageWhereInput = {
    AND?: productimageWhereInput | productimageWhereInput[]
    OR?: productimageWhereInput[]
    NOT?: productimageWhereInput | productimageWhereInput[]
    id?: IntFilter<"productimage"> | number
    productId?: IntNullableFilter<"productimage"> | number | null
    imageName?: StringNullableFilter<"productimage"> | string | null
    imageDesc?: StringNullableFilter<"productimage"> | string | null
    createdAt?: DateTimeNullableFilter<"productimage"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"productimage"> | Date | string | null
  }

  export type productimageOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrderInput | SortOrder
    imageName?: SortOrderInput | SortOrder
    imageDesc?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _relevance?: productimageOrderByRelevanceInput
  }

  export type productimageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: productimageWhereInput | productimageWhereInput[]
    OR?: productimageWhereInput[]
    NOT?: productimageWhereInput | productimageWhereInput[]
    productId?: IntNullableFilter<"productimage"> | number | null
    imageName?: StringNullableFilter<"productimage"> | string | null
    imageDesc?: StringNullableFilter<"productimage"> | string | null
    createdAt?: DateTimeNullableFilter<"productimage"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"productimage"> | Date | string | null
  }, "id">

  export type productimageOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrderInput | SortOrder
    imageName?: SortOrderInput | SortOrder
    imageDesc?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: productimageCountOrderByAggregateInput
    _avg?: productimageAvgOrderByAggregateInput
    _max?: productimageMaxOrderByAggregateInput
    _min?: productimageMinOrderByAggregateInput
    _sum?: productimageSumOrderByAggregateInput
  }

  export type productimageScalarWhereWithAggregatesInput = {
    AND?: productimageScalarWhereWithAggregatesInput | productimageScalarWhereWithAggregatesInput[]
    OR?: productimageScalarWhereWithAggregatesInput[]
    NOT?: productimageScalarWhereWithAggregatesInput | productimageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"productimage"> | number
    productId?: IntNullableWithAggregatesFilter<"productimage"> | number | null
    imageName?: StringNullableWithAggregatesFilter<"productimage"> | string | null
    imageDesc?: StringNullableWithAggregatesFilter<"productimage"> | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"productimage"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"productimage"> | Date | string | null
  }

  export type thaiamphuresWhereInput = {
    AND?: thaiamphuresWhereInput | thaiamphuresWhereInput[]
    OR?: thaiamphuresWhereInput[]
    NOT?: thaiamphuresWhereInput | thaiamphuresWhereInput[]
    id?: IntFilter<"thaiamphures"> | number
    nameTh?: StringFilter<"thaiamphures"> | string
    nameEn?: StringFilter<"thaiamphures"> | string
    provinceId?: IntFilter<"thaiamphures"> | number
    createdAt?: DateTimeNullableFilter<"thaiamphures"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"thaiamphures"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"thaiamphures"> | Date | string | null
    shippingAddresses?: ShippingInfoListRelationFilter
  }

  export type thaiamphuresOrderByWithRelationInput = {
    id?: SortOrder
    nameTh?: SortOrder
    nameEn?: SortOrder
    provinceId?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    shippingAddresses?: ShippingInfoOrderByRelationAggregateInput
    _relevance?: thaiamphuresOrderByRelevanceInput
  }

  export type thaiamphuresWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: thaiamphuresWhereInput | thaiamphuresWhereInput[]
    OR?: thaiamphuresWhereInput[]
    NOT?: thaiamphuresWhereInput | thaiamphuresWhereInput[]
    nameTh?: StringFilter<"thaiamphures"> | string
    nameEn?: StringFilter<"thaiamphures"> | string
    provinceId?: IntFilter<"thaiamphures"> | number
    createdAt?: DateTimeNullableFilter<"thaiamphures"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"thaiamphures"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"thaiamphures"> | Date | string | null
    shippingAddresses?: ShippingInfoListRelationFilter
  }, "id">

  export type thaiamphuresOrderByWithAggregationInput = {
    id?: SortOrder
    nameTh?: SortOrder
    nameEn?: SortOrder
    provinceId?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: thaiamphuresCountOrderByAggregateInput
    _avg?: thaiamphuresAvgOrderByAggregateInput
    _max?: thaiamphuresMaxOrderByAggregateInput
    _min?: thaiamphuresMinOrderByAggregateInput
    _sum?: thaiamphuresSumOrderByAggregateInput
  }

  export type thaiamphuresScalarWhereWithAggregatesInput = {
    AND?: thaiamphuresScalarWhereWithAggregatesInput | thaiamphuresScalarWhereWithAggregatesInput[]
    OR?: thaiamphuresScalarWhereWithAggregatesInput[]
    NOT?: thaiamphuresScalarWhereWithAggregatesInput | thaiamphuresScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"thaiamphures"> | number
    nameTh?: StringWithAggregatesFilter<"thaiamphures"> | string
    nameEn?: StringWithAggregatesFilter<"thaiamphures"> | string
    provinceId?: IntWithAggregatesFilter<"thaiamphures"> | number
    createdAt?: DateTimeNullableWithAggregatesFilter<"thaiamphures"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"thaiamphures"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"thaiamphures"> | Date | string | null
  }

  export type thaigeographiesWhereInput = {
    AND?: thaigeographiesWhereInput | thaigeographiesWhereInput[]
    OR?: thaigeographiesWhereInput[]
    NOT?: thaigeographiesWhereInput | thaigeographiesWhereInput[]
    id?: IntFilter<"thaigeographies"> | number
    name?: StringFilter<"thaigeographies"> | string
  }

  export type thaigeographiesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    _relevance?: thaigeographiesOrderByRelevanceInput
  }

  export type thaigeographiesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: thaigeographiesWhereInput | thaigeographiesWhereInput[]
    OR?: thaigeographiesWhereInput[]
    NOT?: thaigeographiesWhereInput | thaigeographiesWhereInput[]
    name?: StringFilter<"thaigeographies"> | string
  }, "id">

  export type thaigeographiesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: thaigeographiesCountOrderByAggregateInput
    _avg?: thaigeographiesAvgOrderByAggregateInput
    _max?: thaigeographiesMaxOrderByAggregateInput
    _min?: thaigeographiesMinOrderByAggregateInput
    _sum?: thaigeographiesSumOrderByAggregateInput
  }

  export type thaigeographiesScalarWhereWithAggregatesInput = {
    AND?: thaigeographiesScalarWhereWithAggregatesInput | thaigeographiesScalarWhereWithAggregatesInput[]
    OR?: thaigeographiesScalarWhereWithAggregatesInput[]
    NOT?: thaigeographiesScalarWhereWithAggregatesInput | thaigeographiesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"thaigeographies"> | number
    name?: StringWithAggregatesFilter<"thaigeographies"> | string
  }

  export type thaiprovincesWhereInput = {
    AND?: thaiprovincesWhereInput | thaiprovincesWhereInput[]
    OR?: thaiprovincesWhereInput[]
    NOT?: thaiprovincesWhereInput | thaiprovincesWhereInput[]
    id?: IntFilter<"thaiprovinces"> | number
    nameTh?: StringFilter<"thaiprovinces"> | string
    nameEn?: StringFilter<"thaiprovinces"> | string
    geographyId?: IntFilter<"thaiprovinces"> | number
    createdAt?: DateTimeNullableFilter<"thaiprovinces"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"thaiprovinces"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"thaiprovinces"> | Date | string | null
    shippingAddresses?: ShippingInfoListRelationFilter
  }

  export type thaiprovincesOrderByWithRelationInput = {
    id?: SortOrder
    nameTh?: SortOrder
    nameEn?: SortOrder
    geographyId?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    shippingAddresses?: ShippingInfoOrderByRelationAggregateInput
    _relevance?: thaiprovincesOrderByRelevanceInput
  }

  export type thaiprovincesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: thaiprovincesWhereInput | thaiprovincesWhereInput[]
    OR?: thaiprovincesWhereInput[]
    NOT?: thaiprovincesWhereInput | thaiprovincesWhereInput[]
    nameTh?: StringFilter<"thaiprovinces"> | string
    nameEn?: StringFilter<"thaiprovinces"> | string
    geographyId?: IntFilter<"thaiprovinces"> | number
    createdAt?: DateTimeNullableFilter<"thaiprovinces"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"thaiprovinces"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"thaiprovinces"> | Date | string | null
    shippingAddresses?: ShippingInfoListRelationFilter
  }, "id">

  export type thaiprovincesOrderByWithAggregationInput = {
    id?: SortOrder
    nameTh?: SortOrder
    nameEn?: SortOrder
    geographyId?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: thaiprovincesCountOrderByAggregateInput
    _avg?: thaiprovincesAvgOrderByAggregateInput
    _max?: thaiprovincesMaxOrderByAggregateInput
    _min?: thaiprovincesMinOrderByAggregateInput
    _sum?: thaiprovincesSumOrderByAggregateInput
  }

  export type thaiprovincesScalarWhereWithAggregatesInput = {
    AND?: thaiprovincesScalarWhereWithAggregatesInput | thaiprovincesScalarWhereWithAggregatesInput[]
    OR?: thaiprovincesScalarWhereWithAggregatesInput[]
    NOT?: thaiprovincesScalarWhereWithAggregatesInput | thaiprovincesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"thaiprovinces"> | number
    nameTh?: StringWithAggregatesFilter<"thaiprovinces"> | string
    nameEn?: StringWithAggregatesFilter<"thaiprovinces"> | string
    geographyId?: IntWithAggregatesFilter<"thaiprovinces"> | number
    createdAt?: DateTimeNullableWithAggregatesFilter<"thaiprovinces"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"thaiprovinces"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"thaiprovinces"> | Date | string | null
  }

  export type thaitambonsWhereInput = {
    AND?: thaitambonsWhereInput | thaitambonsWhereInput[]
    OR?: thaitambonsWhereInput[]
    NOT?: thaitambonsWhereInput | thaitambonsWhereInput[]
    id?: IntFilter<"thaitambons"> | number
    zipCode?: IntFilter<"thaitambons"> | number
    nameTh?: StringFilter<"thaitambons"> | string
    nameEn?: StringFilter<"thaitambons"> | string
    amphureId?: IntFilter<"thaitambons"> | number
    createdAt?: DateTimeNullableFilter<"thaitambons"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"thaitambons"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"thaitambons"> | Date | string | null
    shippingAddresses?: ShippingInfoListRelationFilter
  }

  export type thaitambonsOrderByWithRelationInput = {
    id?: SortOrder
    zipCode?: SortOrder
    nameTh?: SortOrder
    nameEn?: SortOrder
    amphureId?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    shippingAddresses?: ShippingInfoOrderByRelationAggregateInput
    _relevance?: thaitambonsOrderByRelevanceInput
  }

  export type thaitambonsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: thaitambonsWhereInput | thaitambonsWhereInput[]
    OR?: thaitambonsWhereInput[]
    NOT?: thaitambonsWhereInput | thaitambonsWhereInput[]
    zipCode?: IntFilter<"thaitambons"> | number
    nameTh?: StringFilter<"thaitambons"> | string
    nameEn?: StringFilter<"thaitambons"> | string
    amphureId?: IntFilter<"thaitambons"> | number
    createdAt?: DateTimeNullableFilter<"thaitambons"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"thaitambons"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"thaitambons"> | Date | string | null
    shippingAddresses?: ShippingInfoListRelationFilter
  }, "id">

  export type thaitambonsOrderByWithAggregationInput = {
    id?: SortOrder
    zipCode?: SortOrder
    nameTh?: SortOrder
    nameEn?: SortOrder
    amphureId?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: thaitambonsCountOrderByAggregateInput
    _avg?: thaitambonsAvgOrderByAggregateInput
    _max?: thaitambonsMaxOrderByAggregateInput
    _min?: thaitambonsMinOrderByAggregateInput
    _sum?: thaitambonsSumOrderByAggregateInput
  }

  export type thaitambonsScalarWhereWithAggregatesInput = {
    AND?: thaitambonsScalarWhereWithAggregatesInput | thaitambonsScalarWhereWithAggregatesInput[]
    OR?: thaitambonsScalarWhereWithAggregatesInput[]
    NOT?: thaitambonsScalarWhereWithAggregatesInput | thaitambonsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"thaitambons"> | number
    zipCode?: IntWithAggregatesFilter<"thaitambons"> | number
    nameTh?: StringWithAggregatesFilter<"thaitambons"> | string
    nameEn?: StringWithAggregatesFilter<"thaitambons"> | string
    amphureId?: IntWithAggregatesFilter<"thaitambons"> | number
    createdAt?: DateTimeNullableWithAggregatesFilter<"thaitambons"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"thaitambons"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"thaitambons"> | Date | string | null
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: IntFilter<"Order"> | number
    orderNumber?: StringFilter<"Order"> | string
    userId?: IntNullableFilter<"Order"> | number | null
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    totalAmount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    shippingCost?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    discount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    discountCode?: StringNullableFilter<"Order"> | string | null
    finalAmount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFilter<"Order"> | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFilter<"Order"> | $Enums.PaymentStatus
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    adminComment?: StringNullableFilter<"Order"> | string | null
    stripeSessionId?: StringNullableFilter<"Order"> | string | null
    stripePaymentMethodType?: StringNullableFilter<"Order"> | string | null
    customerInfo?: XOR<CustomerInfoNullableScalarRelationFilter, CustomerInfoWhereInput> | null
    orderItems?: OrderItemListRelationFilter
    paymentInfo?: XOR<PaymentInfoNullableScalarRelationFilter, PaymentInfoWhereInput> | null
    shippingInfo?: XOR<ShippingInfoNullableScalarRelationFilter, ShippingInfoWhereInput> | null
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    userId?: SortOrderInput | SortOrder
    status?: SortOrder
    totalAmount?: SortOrder
    shippingCost?: SortOrder
    discount?: SortOrder
    discountCode?: SortOrderInput | SortOrder
    finalAmount?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminComment?: SortOrderInput | SortOrder
    stripeSessionId?: SortOrderInput | SortOrder
    stripePaymentMethodType?: SortOrderInput | SortOrder
    customerInfo?: CustomerInfoOrderByWithRelationInput
    orderItems?: OrderItemOrderByRelationAggregateInput
    paymentInfo?: PaymentInfoOrderByWithRelationInput
    shippingInfo?: ShippingInfoOrderByWithRelationInput
    _relevance?: OrderOrderByRelevanceInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    orderNumber?: string
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    userId?: IntNullableFilter<"Order"> | number | null
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    totalAmount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    shippingCost?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    discount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    discountCode?: StringNullableFilter<"Order"> | string | null
    finalAmount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFilter<"Order"> | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFilter<"Order"> | $Enums.PaymentStatus
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    adminComment?: StringNullableFilter<"Order"> | string | null
    stripeSessionId?: StringNullableFilter<"Order"> | string | null
    stripePaymentMethodType?: StringNullableFilter<"Order"> | string | null
    customerInfo?: XOR<CustomerInfoNullableScalarRelationFilter, CustomerInfoWhereInput> | null
    orderItems?: OrderItemListRelationFilter
    paymentInfo?: XOR<PaymentInfoNullableScalarRelationFilter, PaymentInfoWhereInput> | null
    shippingInfo?: XOR<ShippingInfoNullableScalarRelationFilter, ShippingInfoWhereInput> | null
  }, "id" | "orderNumber">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    userId?: SortOrderInput | SortOrder
    status?: SortOrder
    totalAmount?: SortOrder
    shippingCost?: SortOrder
    discount?: SortOrder
    discountCode?: SortOrderInput | SortOrder
    finalAmount?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminComment?: SortOrderInput | SortOrder
    stripeSessionId?: SortOrderInput | SortOrder
    stripePaymentMethodType?: SortOrderInput | SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Order"> | number
    orderNumber?: StringWithAggregatesFilter<"Order"> | string
    userId?: IntNullableWithAggregatesFilter<"Order"> | number | null
    status?: EnumOrderStatusWithAggregatesFilter<"Order"> | $Enums.OrderStatus
    totalAmount?: DecimalWithAggregatesFilter<"Order"> | Decimal | DecimalJsLike | number | string
    shippingCost?: DecimalWithAggregatesFilter<"Order"> | Decimal | DecimalJsLike | number | string
    discount?: DecimalWithAggregatesFilter<"Order"> | Decimal | DecimalJsLike | number | string
    discountCode?: StringNullableWithAggregatesFilter<"Order"> | string | null
    finalAmount?: DecimalWithAggregatesFilter<"Order"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"Order"> | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusWithAggregatesFilter<"Order"> | $Enums.PaymentStatus
    createdAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    adminComment?: StringNullableWithAggregatesFilter<"Order"> | string | null
    stripeSessionId?: StringNullableWithAggregatesFilter<"Order"> | string | null
    stripePaymentMethodType?: StringNullableWithAggregatesFilter<"Order"> | string | null
  }

  export type OrderItemWhereInput = {
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    id?: IntFilter<"OrderItem"> | number
    orderId?: IntFilter<"OrderItem"> | number
    productId?: IntFilter<"OrderItem"> | number
    productName?: StringFilter<"OrderItem"> | string
    quantity?: IntFilter<"OrderItem"> | number
    unitPrice?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    productImg?: StringNullableFilter<"OrderItem"> | string | null
    createdAt?: DateTimeFilter<"OrderItem"> | Date | string
    updatedAt?: DateTimeFilter<"OrderItem"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type OrderItemOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    productImg?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    order?: OrderOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
    _relevance?: OrderItemOrderByRelevanceInput
  }

  export type OrderItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    orderId?: IntFilter<"OrderItem"> | number
    productId?: IntFilter<"OrderItem"> | number
    productName?: StringFilter<"OrderItem"> | string
    quantity?: IntFilter<"OrderItem"> | number
    unitPrice?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    productImg?: StringNullableFilter<"OrderItem"> | string | null
    createdAt?: DateTimeFilter<"OrderItem"> | Date | string
    updatedAt?: DateTimeFilter<"OrderItem"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type OrderItemOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    productImg?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrderItemCountOrderByAggregateInput
    _avg?: OrderItemAvgOrderByAggregateInput
    _max?: OrderItemMaxOrderByAggregateInput
    _min?: OrderItemMinOrderByAggregateInput
    _sum?: OrderItemSumOrderByAggregateInput
  }

  export type OrderItemScalarWhereWithAggregatesInput = {
    AND?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    OR?: OrderItemScalarWhereWithAggregatesInput[]
    NOT?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OrderItem"> | number
    orderId?: IntWithAggregatesFilter<"OrderItem"> | number
    productId?: IntWithAggregatesFilter<"OrderItem"> | number
    productName?: StringWithAggregatesFilter<"OrderItem"> | string
    quantity?: IntWithAggregatesFilter<"OrderItem"> | number
    unitPrice?: DecimalWithAggregatesFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalWithAggregatesFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    productImg?: StringNullableWithAggregatesFilter<"OrderItem"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"OrderItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OrderItem"> | Date | string
  }

  export type CustomerInfoWhereInput = {
    AND?: CustomerInfoWhereInput | CustomerInfoWhereInput[]
    OR?: CustomerInfoWhereInput[]
    NOT?: CustomerInfoWhereInput | CustomerInfoWhereInput[]
    id?: IntFilter<"CustomerInfo"> | number
    orderId?: IntFilter<"CustomerInfo"> | number
    firstName?: StringFilter<"CustomerInfo"> | string
    lastName?: StringFilter<"CustomerInfo"> | string
    email?: StringFilter<"CustomerInfo"> | string
    phone?: StringFilter<"CustomerInfo"> | string
    note?: StringNullableFilter<"CustomerInfo"> | string | null
    createdAt?: DateTimeFilter<"CustomerInfo"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerInfo"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }

  export type CustomerInfoOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    order?: OrderOrderByWithRelationInput
    _relevance?: CustomerInfoOrderByRelevanceInput
  }

  export type CustomerInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    orderId?: number
    AND?: CustomerInfoWhereInput | CustomerInfoWhereInput[]
    OR?: CustomerInfoWhereInput[]
    NOT?: CustomerInfoWhereInput | CustomerInfoWhereInput[]
    firstName?: StringFilter<"CustomerInfo"> | string
    lastName?: StringFilter<"CustomerInfo"> | string
    email?: StringFilter<"CustomerInfo"> | string
    phone?: StringFilter<"CustomerInfo"> | string
    note?: StringNullableFilter<"CustomerInfo"> | string | null
    createdAt?: DateTimeFilter<"CustomerInfo"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerInfo"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }, "id" | "orderId">

  export type CustomerInfoOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerInfoCountOrderByAggregateInput
    _avg?: CustomerInfoAvgOrderByAggregateInput
    _max?: CustomerInfoMaxOrderByAggregateInput
    _min?: CustomerInfoMinOrderByAggregateInput
    _sum?: CustomerInfoSumOrderByAggregateInput
  }

  export type CustomerInfoScalarWhereWithAggregatesInput = {
    AND?: CustomerInfoScalarWhereWithAggregatesInput | CustomerInfoScalarWhereWithAggregatesInput[]
    OR?: CustomerInfoScalarWhereWithAggregatesInput[]
    NOT?: CustomerInfoScalarWhereWithAggregatesInput | CustomerInfoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CustomerInfo"> | number
    orderId?: IntWithAggregatesFilter<"CustomerInfo"> | number
    firstName?: StringWithAggregatesFilter<"CustomerInfo"> | string
    lastName?: StringWithAggregatesFilter<"CustomerInfo"> | string
    email?: StringWithAggregatesFilter<"CustomerInfo"> | string
    phone?: StringWithAggregatesFilter<"CustomerInfo"> | string
    note?: StringNullableWithAggregatesFilter<"CustomerInfo"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CustomerInfo"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CustomerInfo"> | Date | string
  }

  export type ShippingInfoWhereInput = {
    AND?: ShippingInfoWhereInput | ShippingInfoWhereInput[]
    OR?: ShippingInfoWhereInput[]
    NOT?: ShippingInfoWhereInput | ShippingInfoWhereInput[]
    id?: IntFilter<"ShippingInfo"> | number
    orderId?: IntFilter<"ShippingInfo"> | number
    receiverName?: StringFilter<"ShippingInfo"> | string
    receiverLastname?: StringFilter<"ShippingInfo"> | string
    receiverPhone?: StringFilter<"ShippingInfo"> | string
    addressLine?: StringFilter<"ShippingInfo"> | string
    addressLine2?: StringNullableFilter<"ShippingInfo"> | string | null
    provinceId?: IntFilter<"ShippingInfo"> | number
    provinceName?: StringFilter<"ShippingInfo"> | string
    amphureId?: IntFilter<"ShippingInfo"> | number
    amphureName?: StringFilter<"ShippingInfo"> | string
    tambonId?: IntFilter<"ShippingInfo"> | number
    tambonName?: StringFilter<"ShippingInfo"> | string
    zipCode?: StringFilter<"ShippingInfo"> | string
    deliveryDate?: DateTimeNullableFilter<"ShippingInfo"> | Date | string | null
    deliveryTime?: StringNullableFilter<"ShippingInfo"> | string | null
    cardMessage?: StringNullableFilter<"ShippingInfo"> | string | null
    additionalNote?: StringNullableFilter<"ShippingInfo"> | string | null
    createdAt?: DateTimeFilter<"ShippingInfo"> | Date | string
    updatedAt?: DateTimeFilter<"ShippingInfo"> | Date | string
    amphure?: XOR<ThaiamphuresScalarRelationFilter, thaiamphuresWhereInput>
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    province?: XOR<ThaiprovincesScalarRelationFilter, thaiprovincesWhereInput>
    tambon?: XOR<ThaitambonsScalarRelationFilter, thaitambonsWhereInput>
  }

  export type ShippingInfoOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    receiverName?: SortOrder
    receiverLastname?: SortOrder
    receiverPhone?: SortOrder
    addressLine?: SortOrder
    addressLine2?: SortOrderInput | SortOrder
    provinceId?: SortOrder
    provinceName?: SortOrder
    amphureId?: SortOrder
    amphureName?: SortOrder
    tambonId?: SortOrder
    tambonName?: SortOrder
    zipCode?: SortOrder
    deliveryDate?: SortOrderInput | SortOrder
    deliveryTime?: SortOrderInput | SortOrder
    cardMessage?: SortOrderInput | SortOrder
    additionalNote?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    amphure?: thaiamphuresOrderByWithRelationInput
    order?: OrderOrderByWithRelationInput
    province?: thaiprovincesOrderByWithRelationInput
    tambon?: thaitambonsOrderByWithRelationInput
    _relevance?: ShippingInfoOrderByRelevanceInput
  }

  export type ShippingInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    orderId?: number
    AND?: ShippingInfoWhereInput | ShippingInfoWhereInput[]
    OR?: ShippingInfoWhereInput[]
    NOT?: ShippingInfoWhereInput | ShippingInfoWhereInput[]
    receiverName?: StringFilter<"ShippingInfo"> | string
    receiverLastname?: StringFilter<"ShippingInfo"> | string
    receiverPhone?: StringFilter<"ShippingInfo"> | string
    addressLine?: StringFilter<"ShippingInfo"> | string
    addressLine2?: StringNullableFilter<"ShippingInfo"> | string | null
    provinceId?: IntFilter<"ShippingInfo"> | number
    provinceName?: StringFilter<"ShippingInfo"> | string
    amphureId?: IntFilter<"ShippingInfo"> | number
    amphureName?: StringFilter<"ShippingInfo"> | string
    tambonId?: IntFilter<"ShippingInfo"> | number
    tambonName?: StringFilter<"ShippingInfo"> | string
    zipCode?: StringFilter<"ShippingInfo"> | string
    deliveryDate?: DateTimeNullableFilter<"ShippingInfo"> | Date | string | null
    deliveryTime?: StringNullableFilter<"ShippingInfo"> | string | null
    cardMessage?: StringNullableFilter<"ShippingInfo"> | string | null
    additionalNote?: StringNullableFilter<"ShippingInfo"> | string | null
    createdAt?: DateTimeFilter<"ShippingInfo"> | Date | string
    updatedAt?: DateTimeFilter<"ShippingInfo"> | Date | string
    amphure?: XOR<ThaiamphuresScalarRelationFilter, thaiamphuresWhereInput>
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    province?: XOR<ThaiprovincesScalarRelationFilter, thaiprovincesWhereInput>
    tambon?: XOR<ThaitambonsScalarRelationFilter, thaitambonsWhereInput>
  }, "id" | "orderId">

  export type ShippingInfoOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    receiverName?: SortOrder
    receiverLastname?: SortOrder
    receiverPhone?: SortOrder
    addressLine?: SortOrder
    addressLine2?: SortOrderInput | SortOrder
    provinceId?: SortOrder
    provinceName?: SortOrder
    amphureId?: SortOrder
    amphureName?: SortOrder
    tambonId?: SortOrder
    tambonName?: SortOrder
    zipCode?: SortOrder
    deliveryDate?: SortOrderInput | SortOrder
    deliveryTime?: SortOrderInput | SortOrder
    cardMessage?: SortOrderInput | SortOrder
    additionalNote?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ShippingInfoCountOrderByAggregateInput
    _avg?: ShippingInfoAvgOrderByAggregateInput
    _max?: ShippingInfoMaxOrderByAggregateInput
    _min?: ShippingInfoMinOrderByAggregateInput
    _sum?: ShippingInfoSumOrderByAggregateInput
  }

  export type ShippingInfoScalarWhereWithAggregatesInput = {
    AND?: ShippingInfoScalarWhereWithAggregatesInput | ShippingInfoScalarWhereWithAggregatesInput[]
    OR?: ShippingInfoScalarWhereWithAggregatesInput[]
    NOT?: ShippingInfoScalarWhereWithAggregatesInput | ShippingInfoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ShippingInfo"> | number
    orderId?: IntWithAggregatesFilter<"ShippingInfo"> | number
    receiverName?: StringWithAggregatesFilter<"ShippingInfo"> | string
    receiverLastname?: StringWithAggregatesFilter<"ShippingInfo"> | string
    receiverPhone?: StringWithAggregatesFilter<"ShippingInfo"> | string
    addressLine?: StringWithAggregatesFilter<"ShippingInfo"> | string
    addressLine2?: StringNullableWithAggregatesFilter<"ShippingInfo"> | string | null
    provinceId?: IntWithAggregatesFilter<"ShippingInfo"> | number
    provinceName?: StringWithAggregatesFilter<"ShippingInfo"> | string
    amphureId?: IntWithAggregatesFilter<"ShippingInfo"> | number
    amphureName?: StringWithAggregatesFilter<"ShippingInfo"> | string
    tambonId?: IntWithAggregatesFilter<"ShippingInfo"> | number
    tambonName?: StringWithAggregatesFilter<"ShippingInfo"> | string
    zipCode?: StringWithAggregatesFilter<"ShippingInfo"> | string
    deliveryDate?: DateTimeNullableWithAggregatesFilter<"ShippingInfo"> | Date | string | null
    deliveryTime?: StringNullableWithAggregatesFilter<"ShippingInfo"> | string | null
    cardMessage?: StringNullableWithAggregatesFilter<"ShippingInfo"> | string | null
    additionalNote?: StringNullableWithAggregatesFilter<"ShippingInfo"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ShippingInfo"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ShippingInfo"> | Date | string
  }

  export type PaymentInfoWhereInput = {
    AND?: PaymentInfoWhereInput | PaymentInfoWhereInput[]
    OR?: PaymentInfoWhereInput[]
    NOT?: PaymentInfoWhereInput | PaymentInfoWhereInput[]
    id?: IntFilter<"PaymentInfo"> | number
    orderId?: IntFilter<"PaymentInfo"> | number
    paymentMethod?: EnumPaymentMethodFilter<"PaymentInfo"> | $Enums.PaymentMethod
    paymentDate?: DateTimeNullableFilter<"PaymentInfo"> | Date | string | null
    transactionId?: StringNullableFilter<"PaymentInfo"> | string | null
    amount?: DecimalFilter<"PaymentInfo"> | Decimal | DecimalJsLike | number | string
    bankName?: StringNullableFilter<"PaymentInfo"> | string | null
    slipUrl?: StringNullableFilter<"PaymentInfo"> | string | null
    status?: EnumPaymentStatusFilter<"PaymentInfo"> | $Enums.PaymentStatus
    verifiedBy?: IntNullableFilter<"PaymentInfo"> | number | null
    verifiedAt?: DateTimeNullableFilter<"PaymentInfo"> | Date | string | null
    createdAt?: DateTimeFilter<"PaymentInfo"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentInfo"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }

  export type PaymentInfoOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    paymentMethod?: SortOrder
    paymentDate?: SortOrderInput | SortOrder
    transactionId?: SortOrderInput | SortOrder
    amount?: SortOrder
    bankName?: SortOrderInput | SortOrder
    slipUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    verifiedBy?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    order?: OrderOrderByWithRelationInput
    _relevance?: PaymentInfoOrderByRelevanceInput
  }

  export type PaymentInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    orderId?: number
    AND?: PaymentInfoWhereInput | PaymentInfoWhereInput[]
    OR?: PaymentInfoWhereInput[]
    NOT?: PaymentInfoWhereInput | PaymentInfoWhereInput[]
    paymentMethod?: EnumPaymentMethodFilter<"PaymentInfo"> | $Enums.PaymentMethod
    paymentDate?: DateTimeNullableFilter<"PaymentInfo"> | Date | string | null
    transactionId?: StringNullableFilter<"PaymentInfo"> | string | null
    amount?: DecimalFilter<"PaymentInfo"> | Decimal | DecimalJsLike | number | string
    bankName?: StringNullableFilter<"PaymentInfo"> | string | null
    slipUrl?: StringNullableFilter<"PaymentInfo"> | string | null
    status?: EnumPaymentStatusFilter<"PaymentInfo"> | $Enums.PaymentStatus
    verifiedBy?: IntNullableFilter<"PaymentInfo"> | number | null
    verifiedAt?: DateTimeNullableFilter<"PaymentInfo"> | Date | string | null
    createdAt?: DateTimeFilter<"PaymentInfo"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentInfo"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }, "id" | "orderId">

  export type PaymentInfoOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    paymentMethod?: SortOrder
    paymentDate?: SortOrderInput | SortOrder
    transactionId?: SortOrderInput | SortOrder
    amount?: SortOrder
    bankName?: SortOrderInput | SortOrder
    slipUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    verifiedBy?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentInfoCountOrderByAggregateInput
    _avg?: PaymentInfoAvgOrderByAggregateInput
    _max?: PaymentInfoMaxOrderByAggregateInput
    _min?: PaymentInfoMinOrderByAggregateInput
    _sum?: PaymentInfoSumOrderByAggregateInput
  }

  export type PaymentInfoScalarWhereWithAggregatesInput = {
    AND?: PaymentInfoScalarWhereWithAggregatesInput | PaymentInfoScalarWhereWithAggregatesInput[]
    OR?: PaymentInfoScalarWhereWithAggregatesInput[]
    NOT?: PaymentInfoScalarWhereWithAggregatesInput | PaymentInfoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PaymentInfo"> | number
    orderId?: IntWithAggregatesFilter<"PaymentInfo"> | number
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"PaymentInfo"> | $Enums.PaymentMethod
    paymentDate?: DateTimeNullableWithAggregatesFilter<"PaymentInfo"> | Date | string | null
    transactionId?: StringNullableWithAggregatesFilter<"PaymentInfo"> | string | null
    amount?: DecimalWithAggregatesFilter<"PaymentInfo"> | Decimal | DecimalJsLike | number | string
    bankName?: StringNullableWithAggregatesFilter<"PaymentInfo"> | string | null
    slipUrl?: StringNullableWithAggregatesFilter<"PaymentInfo"> | string | null
    status?: EnumPaymentStatusWithAggregatesFilter<"PaymentInfo"> | $Enums.PaymentStatus
    verifiedBy?: IntNullableWithAggregatesFilter<"PaymentInfo"> | number | null
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"PaymentInfo"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PaymentInfo"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PaymentInfo"> | Date | string
  }

  export type PaymentConfirmationWhereInput = {
    AND?: PaymentConfirmationWhereInput | PaymentConfirmationWhereInput[]
    OR?: PaymentConfirmationWhereInput[]
    NOT?: PaymentConfirmationWhereInput | PaymentConfirmationWhereInput[]
    id?: StringFilter<"PaymentConfirmation"> | string
    orderNumber?: StringFilter<"PaymentConfirmation"> | string
    amount?: DecimalFilter<"PaymentConfirmation"> | Decimal | DecimalJsLike | number | string
    bankName?: StringNullableFilter<"PaymentConfirmation"> | string | null
    slipUrl?: StringFilter<"PaymentConfirmation"> | string
    status?: StringFilter<"PaymentConfirmation"> | string
    notes?: StringNullableFilter<"PaymentConfirmation"> | string | null
    verifiedBy?: IntNullableFilter<"PaymentConfirmation"> | number | null
    verifiedAt?: DateTimeNullableFilter<"PaymentConfirmation"> | Date | string | null
    createdAt?: DateTimeFilter<"PaymentConfirmation"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentConfirmation"> | Date | string
  }

  export type PaymentConfirmationOrderByWithRelationInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    amount?: SortOrder
    bankName?: SortOrderInput | SortOrder
    slipUrl?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    verifiedBy?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _relevance?: PaymentConfirmationOrderByRelevanceInput
  }

  export type PaymentConfirmationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaymentConfirmationWhereInput | PaymentConfirmationWhereInput[]
    OR?: PaymentConfirmationWhereInput[]
    NOT?: PaymentConfirmationWhereInput | PaymentConfirmationWhereInput[]
    orderNumber?: StringFilter<"PaymentConfirmation"> | string
    amount?: DecimalFilter<"PaymentConfirmation"> | Decimal | DecimalJsLike | number | string
    bankName?: StringNullableFilter<"PaymentConfirmation"> | string | null
    slipUrl?: StringFilter<"PaymentConfirmation"> | string
    status?: StringFilter<"PaymentConfirmation"> | string
    notes?: StringNullableFilter<"PaymentConfirmation"> | string | null
    verifiedBy?: IntNullableFilter<"PaymentConfirmation"> | number | null
    verifiedAt?: DateTimeNullableFilter<"PaymentConfirmation"> | Date | string | null
    createdAt?: DateTimeFilter<"PaymentConfirmation"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentConfirmation"> | Date | string
  }, "id">

  export type PaymentConfirmationOrderByWithAggregationInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    amount?: SortOrder
    bankName?: SortOrderInput | SortOrder
    slipUrl?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    verifiedBy?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentConfirmationCountOrderByAggregateInput
    _avg?: PaymentConfirmationAvgOrderByAggregateInput
    _max?: PaymentConfirmationMaxOrderByAggregateInput
    _min?: PaymentConfirmationMinOrderByAggregateInput
    _sum?: PaymentConfirmationSumOrderByAggregateInput
  }

  export type PaymentConfirmationScalarWhereWithAggregatesInput = {
    AND?: PaymentConfirmationScalarWhereWithAggregatesInput | PaymentConfirmationScalarWhereWithAggregatesInput[]
    OR?: PaymentConfirmationScalarWhereWithAggregatesInput[]
    NOT?: PaymentConfirmationScalarWhereWithAggregatesInput | PaymentConfirmationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PaymentConfirmation"> | string
    orderNumber?: StringWithAggregatesFilter<"PaymentConfirmation"> | string
    amount?: DecimalWithAggregatesFilter<"PaymentConfirmation"> | Decimal | DecimalJsLike | number | string
    bankName?: StringNullableWithAggregatesFilter<"PaymentConfirmation"> | string | null
    slipUrl?: StringWithAggregatesFilter<"PaymentConfirmation"> | string
    status?: StringWithAggregatesFilter<"PaymentConfirmation"> | string
    notes?: StringNullableWithAggregatesFilter<"PaymentConfirmation"> | string | null
    verifiedBy?: IntNullableWithAggregatesFilter<"PaymentConfirmation"> | number | null
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"PaymentConfirmation"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PaymentConfirmation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PaymentConfirmation"> | Date | string
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: IntFilter<"users"> | number
    firstName?: StringFilter<"users"> | string
    lastName?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    isAdmin?: Enumusers_isAdminFilter<"users"> | $Enums.users_isAdmin
    emailVerifiedAt?: DateTimeNullableFilter<"users"> | Date | string | null
    password?: StringFilter<"users"> | string
    rememberToken?: StringNullableFilter<"users"> | string | null
    createdAt?: DateTimeFilter<"users"> | Date | string
    updatedAt?: DateTimeFilter<"users"> | Date | string
    lineId?: StringNullableFilter<"users"> | string | null
    avatar?: StringNullableFilter<"users"> | string | null
    passwordReset?: XOR<PasswordResetNullableScalarRelationFilter, PasswordResetWhereInput> | null
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    isAdmin?: SortOrder
    emailVerifiedAt?: SortOrderInput | SortOrder
    password?: SortOrder
    rememberToken?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lineId?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    passwordReset?: PasswordResetOrderByWithRelationInput
    _relevance?: usersOrderByRelevanceInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    firstName?: StringFilter<"users"> | string
    lastName?: StringFilter<"users"> | string
    isAdmin?: Enumusers_isAdminFilter<"users"> | $Enums.users_isAdmin
    emailVerifiedAt?: DateTimeNullableFilter<"users"> | Date | string | null
    password?: StringFilter<"users"> | string
    rememberToken?: StringNullableFilter<"users"> | string | null
    createdAt?: DateTimeFilter<"users"> | Date | string
    updatedAt?: DateTimeFilter<"users"> | Date | string
    lineId?: StringNullableFilter<"users"> | string | null
    avatar?: StringNullableFilter<"users"> | string | null
    passwordReset?: XOR<PasswordResetNullableScalarRelationFilter, PasswordResetWhereInput> | null
  }, "id" | "email">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    isAdmin?: SortOrder
    emailVerifiedAt?: SortOrderInput | SortOrder
    password?: SortOrder
    rememberToken?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lineId?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users"> | number
    firstName?: StringWithAggregatesFilter<"users"> | string
    lastName?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    isAdmin?: Enumusers_isAdminWithAggregatesFilter<"users"> | $Enums.users_isAdmin
    emailVerifiedAt?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    password?: StringWithAggregatesFilter<"users"> | string
    rememberToken?: StringNullableWithAggregatesFilter<"users"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
    lineId?: StringNullableWithAggregatesFilter<"users"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"users"> | string | null
  }

  export type BlogWhereInput = {
    AND?: BlogWhereInput | BlogWhereInput[]
    OR?: BlogWhereInput[]
    NOT?: BlogWhereInput | BlogWhereInput[]
    id?: IntFilter<"Blog"> | number
    title?: StringFilter<"Blog"> | string
    slug?: StringFilter<"Blog"> | string
    excerpt?: StringFilter<"Blog"> | string
    content?: StringFilter<"Blog"> | string
    image?: StringFilter<"Blog"> | string
    category?: StringFilter<"Blog"> | string
    date?: StringFilter<"Blog"> | string
    published?: BoolFilter<"Blog"> | boolean
    userId?: IntNullableFilter<"Blog"> | number | null
    createdAt?: DateTimeFilter<"Blog"> | Date | string
    updatedAt?: DateTimeFilter<"Blog"> | Date | string
  }

  export type BlogOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    excerpt?: SortOrder
    content?: SortOrder
    image?: SortOrder
    category?: SortOrder
    date?: SortOrder
    published?: SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _relevance?: BlogOrderByRelevanceInput
  }

  export type BlogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: BlogWhereInput | BlogWhereInput[]
    OR?: BlogWhereInput[]
    NOT?: BlogWhereInput | BlogWhereInput[]
    title?: StringFilter<"Blog"> | string
    excerpt?: StringFilter<"Blog"> | string
    content?: StringFilter<"Blog"> | string
    image?: StringFilter<"Blog"> | string
    category?: StringFilter<"Blog"> | string
    date?: StringFilter<"Blog"> | string
    published?: BoolFilter<"Blog"> | boolean
    userId?: IntNullableFilter<"Blog"> | number | null
    createdAt?: DateTimeFilter<"Blog"> | Date | string
    updatedAt?: DateTimeFilter<"Blog"> | Date | string
  }, "id" | "slug">

  export type BlogOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    excerpt?: SortOrder
    content?: SortOrder
    image?: SortOrder
    category?: SortOrder
    date?: SortOrder
    published?: SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BlogCountOrderByAggregateInput
    _avg?: BlogAvgOrderByAggregateInput
    _max?: BlogMaxOrderByAggregateInput
    _min?: BlogMinOrderByAggregateInput
    _sum?: BlogSumOrderByAggregateInput
  }

  export type BlogScalarWhereWithAggregatesInput = {
    AND?: BlogScalarWhereWithAggregatesInput | BlogScalarWhereWithAggregatesInput[]
    OR?: BlogScalarWhereWithAggregatesInput[]
    NOT?: BlogScalarWhereWithAggregatesInput | BlogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Blog"> | number
    title?: StringWithAggregatesFilter<"Blog"> | string
    slug?: StringWithAggregatesFilter<"Blog"> | string
    excerpt?: StringWithAggregatesFilter<"Blog"> | string
    content?: StringWithAggregatesFilter<"Blog"> | string
    image?: StringWithAggregatesFilter<"Blog"> | string
    category?: StringWithAggregatesFilter<"Blog"> | string
    date?: StringWithAggregatesFilter<"Blog"> | string
    published?: BoolWithAggregatesFilter<"Blog"> | boolean
    userId?: IntNullableWithAggregatesFilter<"Blog"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Blog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Blog"> | Date | string
  }

  export type DiscountCodeWhereInput = {
    AND?: DiscountCodeWhereInput | DiscountCodeWhereInput[]
    OR?: DiscountCodeWhereInput[]
    NOT?: DiscountCodeWhereInput | DiscountCodeWhereInput[]
    id?: IntFilter<"DiscountCode"> | number
    code?: StringFilter<"DiscountCode"> | string
    type?: StringFilter<"DiscountCode"> | string
    value?: DecimalFilter<"DiscountCode"> | Decimal | DecimalJsLike | number | string
    minAmount?: DecimalFilter<"DiscountCode"> | Decimal | DecimalJsLike | number | string
    maxDiscount?: DecimalNullableFilter<"DiscountCode"> | Decimal | DecimalJsLike | number | string | null
    description?: StringFilter<"DiscountCode"> | string
    maxUses?: IntFilter<"DiscountCode"> | number
    usedCount?: IntFilter<"DiscountCode"> | number
    status?: StringFilter<"DiscountCode"> | string
    startDate?: DateTimeNullableFilter<"DiscountCode"> | Date | string | null
    endDate?: DateTimeNullableFilter<"DiscountCode"> | Date | string | null
    createdBy?: IntNullableFilter<"DiscountCode"> | number | null
    createdAt?: DateTimeFilter<"DiscountCode"> | Date | string
    updatedAt?: DateTimeFilter<"DiscountCode"> | Date | string
  }

  export type DiscountCodeOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
    minAmount?: SortOrder
    maxDiscount?: SortOrderInput | SortOrder
    description?: SortOrder
    maxUses?: SortOrder
    usedCount?: SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _relevance?: DiscountCodeOrderByRelevanceInput
  }

  export type DiscountCodeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: DiscountCodeWhereInput | DiscountCodeWhereInput[]
    OR?: DiscountCodeWhereInput[]
    NOT?: DiscountCodeWhereInput | DiscountCodeWhereInput[]
    type?: StringFilter<"DiscountCode"> | string
    value?: DecimalFilter<"DiscountCode"> | Decimal | DecimalJsLike | number | string
    minAmount?: DecimalFilter<"DiscountCode"> | Decimal | DecimalJsLike | number | string
    maxDiscount?: DecimalNullableFilter<"DiscountCode"> | Decimal | DecimalJsLike | number | string | null
    description?: StringFilter<"DiscountCode"> | string
    maxUses?: IntFilter<"DiscountCode"> | number
    usedCount?: IntFilter<"DiscountCode"> | number
    status?: StringFilter<"DiscountCode"> | string
    startDate?: DateTimeNullableFilter<"DiscountCode"> | Date | string | null
    endDate?: DateTimeNullableFilter<"DiscountCode"> | Date | string | null
    createdBy?: IntNullableFilter<"DiscountCode"> | number | null
    createdAt?: DateTimeFilter<"DiscountCode"> | Date | string
    updatedAt?: DateTimeFilter<"DiscountCode"> | Date | string
  }, "id" | "code">

  export type DiscountCodeOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
    minAmount?: SortOrder
    maxDiscount?: SortOrderInput | SortOrder
    description?: SortOrder
    maxUses?: SortOrder
    usedCount?: SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DiscountCodeCountOrderByAggregateInput
    _avg?: DiscountCodeAvgOrderByAggregateInput
    _max?: DiscountCodeMaxOrderByAggregateInput
    _min?: DiscountCodeMinOrderByAggregateInput
    _sum?: DiscountCodeSumOrderByAggregateInput
  }

  export type DiscountCodeScalarWhereWithAggregatesInput = {
    AND?: DiscountCodeScalarWhereWithAggregatesInput | DiscountCodeScalarWhereWithAggregatesInput[]
    OR?: DiscountCodeScalarWhereWithAggregatesInput[]
    NOT?: DiscountCodeScalarWhereWithAggregatesInput | DiscountCodeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DiscountCode"> | number
    code?: StringWithAggregatesFilter<"DiscountCode"> | string
    type?: StringWithAggregatesFilter<"DiscountCode"> | string
    value?: DecimalWithAggregatesFilter<"DiscountCode"> | Decimal | DecimalJsLike | number | string
    minAmount?: DecimalWithAggregatesFilter<"DiscountCode"> | Decimal | DecimalJsLike | number | string
    maxDiscount?: DecimalNullableWithAggregatesFilter<"DiscountCode"> | Decimal | DecimalJsLike | number | string | null
    description?: StringWithAggregatesFilter<"DiscountCode"> | string
    maxUses?: IntWithAggregatesFilter<"DiscountCode"> | number
    usedCount?: IntWithAggregatesFilter<"DiscountCode"> | number
    status?: StringWithAggregatesFilter<"DiscountCode"> | string
    startDate?: DateTimeNullableWithAggregatesFilter<"DiscountCode"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"DiscountCode"> | Date | string | null
    createdBy?: IntNullableWithAggregatesFilter<"DiscountCode"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"DiscountCode"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DiscountCode"> | Date | string
  }

  export type PasswordResetWhereInput = {
    AND?: PasswordResetWhereInput | PasswordResetWhereInput[]
    OR?: PasswordResetWhereInput[]
    NOT?: PasswordResetWhereInput | PasswordResetWhereInput[]
    id?: IntFilter<"PasswordReset"> | number
    userId?: IntFilter<"PasswordReset"> | number
    token?: StringFilter<"PasswordReset"> | string
    expiresAt?: DateTimeFilter<"PasswordReset"> | Date | string
    createdAt?: DateTimeFilter<"PasswordReset"> | Date | string
    updatedAt?: DateTimeFilter<"PasswordReset"> | Date | string
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type PasswordResetOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: usersOrderByWithRelationInput
    _relevance?: PasswordResetOrderByRelevanceInput
  }

  export type PasswordResetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: PasswordResetWhereInput | PasswordResetWhereInput[]
    OR?: PasswordResetWhereInput[]
    NOT?: PasswordResetWhereInput | PasswordResetWhereInput[]
    token?: StringFilter<"PasswordReset"> | string
    expiresAt?: DateTimeFilter<"PasswordReset"> | Date | string
    createdAt?: DateTimeFilter<"PasswordReset"> | Date | string
    updatedAt?: DateTimeFilter<"PasswordReset"> | Date | string
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id" | "userId">

  export type PasswordResetOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PasswordResetCountOrderByAggregateInput
    _avg?: PasswordResetAvgOrderByAggregateInput
    _max?: PasswordResetMaxOrderByAggregateInput
    _min?: PasswordResetMinOrderByAggregateInput
    _sum?: PasswordResetSumOrderByAggregateInput
  }

  export type PasswordResetScalarWhereWithAggregatesInput = {
    AND?: PasswordResetScalarWhereWithAggregatesInput | PasswordResetScalarWhereWithAggregatesInput[]
    OR?: PasswordResetScalarWhereWithAggregatesInput[]
    NOT?: PasswordResetScalarWhereWithAggregatesInput | PasswordResetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PasswordReset"> | number
    userId?: IntWithAggregatesFilter<"PasswordReset"> | number
    token?: StringWithAggregatesFilter<"PasswordReset"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"PasswordReset"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"PasswordReset"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PasswordReset"> | Date | string
  }

  export type PendingPaymentWhereInput = {
    AND?: PendingPaymentWhereInput | PendingPaymentWhereInput[]
    OR?: PendingPaymentWhereInput[]
    NOT?: PendingPaymentWhereInput | PendingPaymentWhereInput[]
    id?: IntFilter<"PendingPayment"> | number
    charge_id?: StringFilter<"PendingPayment"> | string
    amount?: DecimalFilter<"PendingPayment"> | Decimal | DecimalJsLike | number | string
    payment_method?: StringFilter<"PendingPayment"> | string
    status?: StringFilter<"PendingPayment"> | string
    metadata?: JsonNullableFilter<"PendingPayment">
    order_id?: IntNullableFilter<"PendingPayment"> | number | null
    processed?: BoolFilter<"PendingPayment"> | boolean
    processed_at?: DateTimeNullableFilter<"PendingPayment"> | Date | string | null
    customer_email?: StringNullableFilter<"PendingPayment"> | string | null
    customer_name?: StringNullableFilter<"PendingPayment"> | string | null
    customer_phone?: StringNullableFilter<"PendingPayment"> | string | null
    deliveryDate?: StringNullableFilter<"PendingPayment"> | string | null
    deliveryTime?: StringNullableFilter<"PendingPayment"> | string | null
    cardMessage?: StringNullableFilter<"PendingPayment"> | string | null
    additionalNote?: StringNullableFilter<"PendingPayment"> | string | null
    created_at?: DateTimeFilter<"PendingPayment"> | Date | string
    updated_at?: DateTimeFilter<"PendingPayment"> | Date | string
  }

  export type PendingPaymentOrderByWithRelationInput = {
    id?: SortOrder
    charge_id?: SortOrder
    amount?: SortOrder
    payment_method?: SortOrder
    status?: SortOrder
    metadata?: SortOrderInput | SortOrder
    order_id?: SortOrderInput | SortOrder
    processed?: SortOrder
    processed_at?: SortOrderInput | SortOrder
    customer_email?: SortOrderInput | SortOrder
    customer_name?: SortOrderInput | SortOrder
    customer_phone?: SortOrderInput | SortOrder
    deliveryDate?: SortOrderInput | SortOrder
    deliveryTime?: SortOrderInput | SortOrder
    cardMessage?: SortOrderInput | SortOrder
    additionalNote?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _relevance?: PendingPaymentOrderByRelevanceInput
  }

  export type PendingPaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    charge_id?: string
    AND?: PendingPaymentWhereInput | PendingPaymentWhereInput[]
    OR?: PendingPaymentWhereInput[]
    NOT?: PendingPaymentWhereInput | PendingPaymentWhereInput[]
    amount?: DecimalFilter<"PendingPayment"> | Decimal | DecimalJsLike | number | string
    payment_method?: StringFilter<"PendingPayment"> | string
    status?: StringFilter<"PendingPayment"> | string
    metadata?: JsonNullableFilter<"PendingPayment">
    order_id?: IntNullableFilter<"PendingPayment"> | number | null
    processed?: BoolFilter<"PendingPayment"> | boolean
    processed_at?: DateTimeNullableFilter<"PendingPayment"> | Date | string | null
    customer_email?: StringNullableFilter<"PendingPayment"> | string | null
    customer_name?: StringNullableFilter<"PendingPayment"> | string | null
    customer_phone?: StringNullableFilter<"PendingPayment"> | string | null
    deliveryDate?: StringNullableFilter<"PendingPayment"> | string | null
    deliveryTime?: StringNullableFilter<"PendingPayment"> | string | null
    cardMessage?: StringNullableFilter<"PendingPayment"> | string | null
    additionalNote?: StringNullableFilter<"PendingPayment"> | string | null
    created_at?: DateTimeFilter<"PendingPayment"> | Date | string
    updated_at?: DateTimeFilter<"PendingPayment"> | Date | string
  }, "id" | "charge_id">

  export type PendingPaymentOrderByWithAggregationInput = {
    id?: SortOrder
    charge_id?: SortOrder
    amount?: SortOrder
    payment_method?: SortOrder
    status?: SortOrder
    metadata?: SortOrderInput | SortOrder
    order_id?: SortOrderInput | SortOrder
    processed?: SortOrder
    processed_at?: SortOrderInput | SortOrder
    customer_email?: SortOrderInput | SortOrder
    customer_name?: SortOrderInput | SortOrder
    customer_phone?: SortOrderInput | SortOrder
    deliveryDate?: SortOrderInput | SortOrder
    deliveryTime?: SortOrderInput | SortOrder
    cardMessage?: SortOrderInput | SortOrder
    additionalNote?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: PendingPaymentCountOrderByAggregateInput
    _avg?: PendingPaymentAvgOrderByAggregateInput
    _max?: PendingPaymentMaxOrderByAggregateInput
    _min?: PendingPaymentMinOrderByAggregateInput
    _sum?: PendingPaymentSumOrderByAggregateInput
  }

  export type PendingPaymentScalarWhereWithAggregatesInput = {
    AND?: PendingPaymentScalarWhereWithAggregatesInput | PendingPaymentScalarWhereWithAggregatesInput[]
    OR?: PendingPaymentScalarWhereWithAggregatesInput[]
    NOT?: PendingPaymentScalarWhereWithAggregatesInput | PendingPaymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PendingPayment"> | number
    charge_id?: StringWithAggregatesFilter<"PendingPayment"> | string
    amount?: DecimalWithAggregatesFilter<"PendingPayment"> | Decimal | DecimalJsLike | number | string
    payment_method?: StringWithAggregatesFilter<"PendingPayment"> | string
    status?: StringWithAggregatesFilter<"PendingPayment"> | string
    metadata?: JsonNullableWithAggregatesFilter<"PendingPayment">
    order_id?: IntNullableWithAggregatesFilter<"PendingPayment"> | number | null
    processed?: BoolWithAggregatesFilter<"PendingPayment"> | boolean
    processed_at?: DateTimeNullableWithAggregatesFilter<"PendingPayment"> | Date | string | null
    customer_email?: StringNullableWithAggregatesFilter<"PendingPayment"> | string | null
    customer_name?: StringNullableWithAggregatesFilter<"PendingPayment"> | string | null
    customer_phone?: StringNullableWithAggregatesFilter<"PendingPayment"> | string | null
    deliveryDate?: StringNullableWithAggregatesFilter<"PendingPayment"> | string | null
    deliveryTime?: StringNullableWithAggregatesFilter<"PendingPayment"> | string | null
    cardMessage?: StringNullableWithAggregatesFilter<"PendingPayment"> | string | null
    additionalNote?: StringNullableWithAggregatesFilter<"PendingPayment"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"PendingPayment"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"PendingPayment"> | Date | string
  }

  export type NotificationLogWhereInput = {
    AND?: NotificationLogWhereInput | NotificationLogWhereInput[]
    OR?: NotificationLogWhereInput[]
    NOT?: NotificationLogWhereInput | NotificationLogWhereInput[]
    id?: IntFilter<"NotificationLog"> | number
    orderId?: IntFilter<"NotificationLog"> | number
    type?: StringFilter<"NotificationLog"> | string
    eventType?: StringFilter<"NotificationLog"> | string
    sent?: BoolFilter<"NotificationLog"> | boolean
    transactionId?: StringNullableFilter<"NotificationLog"> | string | null
    createdAt?: DateTimeFilter<"NotificationLog"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationLog"> | Date | string
  }

  export type NotificationLogOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    type?: SortOrder
    eventType?: SortOrder
    sent?: SortOrder
    transactionId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _relevance?: NotificationLogOrderByRelevanceInput
  }

  export type NotificationLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    orderId_type_eventType?: NotificationLogOrderIdTypeEventTypeCompoundUniqueInput
    AND?: NotificationLogWhereInput | NotificationLogWhereInput[]
    OR?: NotificationLogWhereInput[]
    NOT?: NotificationLogWhereInput | NotificationLogWhereInput[]
    orderId?: IntFilter<"NotificationLog"> | number
    type?: StringFilter<"NotificationLog"> | string
    eventType?: StringFilter<"NotificationLog"> | string
    sent?: BoolFilter<"NotificationLog"> | boolean
    transactionId?: StringNullableFilter<"NotificationLog"> | string | null
    createdAt?: DateTimeFilter<"NotificationLog"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationLog"> | Date | string
  }, "id" | "orderId_type_eventType">

  export type NotificationLogOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    type?: SortOrder
    eventType?: SortOrder
    sent?: SortOrder
    transactionId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationLogCountOrderByAggregateInput
    _avg?: NotificationLogAvgOrderByAggregateInput
    _max?: NotificationLogMaxOrderByAggregateInput
    _min?: NotificationLogMinOrderByAggregateInput
    _sum?: NotificationLogSumOrderByAggregateInput
  }

  export type NotificationLogScalarWhereWithAggregatesInput = {
    AND?: NotificationLogScalarWhereWithAggregatesInput | NotificationLogScalarWhereWithAggregatesInput[]
    OR?: NotificationLogScalarWhereWithAggregatesInput[]
    NOT?: NotificationLogScalarWhereWithAggregatesInput | NotificationLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"NotificationLog"> | number
    orderId?: IntWithAggregatesFilter<"NotificationLog"> | number
    type?: StringWithAggregatesFilter<"NotificationLog"> | string
    eventType?: StringWithAggregatesFilter<"NotificationLog"> | string
    sent?: BoolWithAggregatesFilter<"NotificationLog"> | boolean
    transactionId?: StringNullableWithAggregatesFilter<"NotificationLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"NotificationLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NotificationLog"> | Date | string
  }

  export type CategoryCreateInput = {
    categoryName?: string | null
    categoryDesc?: string | null
    priority?: number | null
    status?: string | null
    bestseller?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    categoryName?: string | null
    categoryDesc?: string | null
    priority?: number | null
    status?: string | null
    bestseller?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type CategoryUpdateInput = {
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    categoryDesc?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    bestseller?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    categoryDesc?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    bestseller?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoryCreateManyInput = {
    id?: number
    categoryName?: string | null
    categoryDesc?: string | null
    priority?: number | null
    status?: string | null
    bestseller?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type CategoryUpdateManyMutationInput = {
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    categoryDesc?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    bestseller?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    categoryDesc?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    bestseller?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductCreateInput = {
    sku?: string | null
    productImg?: string | null
    productName?: string | null
    slug?: string | null
    productDesc?: string | null
    salesPrice?: Decimal | DecimalJsLike | number | string | null
    originalPrice?: Decimal | DecimalJsLike | number | string | null
    discount?: number | null
    potSize?: string | null
    plantHeight?: string | null
    preparationTime?: string | null
    stock?: number | null
    stockStatus?: string | null
    category?: string | null
    categoryId?: number | null
    productStatus?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    sku?: string | null
    productImg?: string | null
    productName?: string | null
    slug?: string | null
    productDesc?: string | null
    salesPrice?: Decimal | DecimalJsLike | number | string | null
    originalPrice?: Decimal | DecimalJsLike | number | string | null
    discount?: number | null
    potSize?: string | null
    plantHeight?: string | null
    preparationTime?: string | null
    stock?: number | null
    stockStatus?: string | null
    category?: string | null
    categoryId?: number | null
    productStatus?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    productImg?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    productDesc?: NullableStringFieldUpdateOperationsInput | string | null
    salesPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    originalPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount?: NullableIntFieldUpdateOperationsInput | number | null
    potSize?: NullableStringFieldUpdateOperationsInput | string | null
    plantHeight?: NullableStringFieldUpdateOperationsInput | string | null
    preparationTime?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    stockStatus?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    productStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    productImg?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    productDesc?: NullableStringFieldUpdateOperationsInput | string | null
    salesPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    originalPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount?: NullableIntFieldUpdateOperationsInput | number | null
    potSize?: NullableStringFieldUpdateOperationsInput | string | null
    plantHeight?: NullableStringFieldUpdateOperationsInput | string | null
    preparationTime?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    stockStatus?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    productStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: number
    sku?: string | null
    productImg?: string | null
    productName?: string | null
    slug?: string | null
    productDesc?: string | null
    salesPrice?: Decimal | DecimalJsLike | number | string | null
    originalPrice?: Decimal | DecimalJsLike | number | string | null
    discount?: number | null
    potSize?: string | null
    plantHeight?: string | null
    preparationTime?: string | null
    stock?: number | null
    stockStatus?: string | null
    category?: string | null
    categoryId?: number | null
    productStatus?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ProductUpdateManyMutationInput = {
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    productImg?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    productDesc?: NullableStringFieldUpdateOperationsInput | string | null
    salesPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    originalPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount?: NullableIntFieldUpdateOperationsInput | number | null
    potSize?: NullableStringFieldUpdateOperationsInput | string | null
    plantHeight?: NullableStringFieldUpdateOperationsInput | string | null
    preparationTime?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    stockStatus?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    productStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    productImg?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    productDesc?: NullableStringFieldUpdateOperationsInput | string | null
    salesPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    originalPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount?: NullableIntFieldUpdateOperationsInput | number | null
    potSize?: NullableStringFieldUpdateOperationsInput | string | null
    plantHeight?: NullableStringFieldUpdateOperationsInput | string | null
    preparationTime?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    stockStatus?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    productStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type statusmasterCreateInput = {
    code?: string | null
    name?: string | null
    desc?: string | null
    type?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type statusmasterUncheckedCreateInput = {
    id?: number
    code?: string | null
    name?: string | null
    desc?: string | null
    type?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type statusmasterUpdateInput = {
    code?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type statusmasterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type statusmasterCreateManyInput = {
    id?: number
    code?: string | null
    name?: string | null
    desc?: string | null
    type?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type statusmasterUpdateManyMutationInput = {
    code?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type statusmasterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    desc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type productimageCreateInput = {
    productId?: number | null
    imageName?: string | null
    imageDesc?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type productimageUncheckedCreateInput = {
    id?: number
    productId?: number | null
    imageName?: string | null
    imageDesc?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type productimageUpdateInput = {
    productId?: NullableIntFieldUpdateOperationsInput | number | null
    imageName?: NullableStringFieldUpdateOperationsInput | string | null
    imageDesc?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type productimageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: NullableIntFieldUpdateOperationsInput | number | null
    imageName?: NullableStringFieldUpdateOperationsInput | string | null
    imageDesc?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type productimageCreateManyInput = {
    id?: number
    productId?: number | null
    imageName?: string | null
    imageDesc?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type productimageUpdateManyMutationInput = {
    productId?: NullableIntFieldUpdateOperationsInput | number | null
    imageName?: NullableStringFieldUpdateOperationsInput | string | null
    imageDesc?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type productimageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: NullableIntFieldUpdateOperationsInput | number | null
    imageName?: NullableStringFieldUpdateOperationsInput | string | null
    imageDesc?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type thaiamphuresCreateInput = {
    id: number
    nameTh: string
    nameEn: string
    provinceId: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    shippingAddresses?: ShippingInfoCreateNestedManyWithoutAmphureInput
  }

  export type thaiamphuresUncheckedCreateInput = {
    id: number
    nameTh: string
    nameEn: string
    provinceId: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    shippingAddresses?: ShippingInfoUncheckedCreateNestedManyWithoutAmphureInput
  }

  export type thaiamphuresUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nameTh?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    provinceId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingAddresses?: ShippingInfoUpdateManyWithoutAmphureNestedInput
  }

  export type thaiamphuresUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nameTh?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    provinceId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingAddresses?: ShippingInfoUncheckedUpdateManyWithoutAmphureNestedInput
  }

  export type thaiamphuresCreateManyInput = {
    id: number
    nameTh: string
    nameEn: string
    provinceId: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type thaiamphuresUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    nameTh?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    provinceId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type thaiamphuresUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nameTh?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    provinceId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type thaigeographiesCreateInput = {
    id: number
    name: string
  }

  export type thaigeographiesUncheckedCreateInput = {
    id: number
    name: string
  }

  export type thaigeographiesUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type thaigeographiesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type thaigeographiesCreateManyInput = {
    id: number
    name: string
  }

  export type thaigeographiesUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type thaigeographiesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type thaiprovincesCreateInput = {
    id: number
    nameTh: string
    nameEn: string
    geographyId: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    shippingAddresses?: ShippingInfoCreateNestedManyWithoutProvinceInput
  }

  export type thaiprovincesUncheckedCreateInput = {
    id: number
    nameTh: string
    nameEn: string
    geographyId: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    shippingAddresses?: ShippingInfoUncheckedCreateNestedManyWithoutProvinceInput
  }

  export type thaiprovincesUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nameTh?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    geographyId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingAddresses?: ShippingInfoUpdateManyWithoutProvinceNestedInput
  }

  export type thaiprovincesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nameTh?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    geographyId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingAddresses?: ShippingInfoUncheckedUpdateManyWithoutProvinceNestedInput
  }

  export type thaiprovincesCreateManyInput = {
    id: number
    nameTh: string
    nameEn: string
    geographyId: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type thaiprovincesUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    nameTh?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    geographyId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type thaiprovincesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nameTh?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    geographyId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type thaitambonsCreateInput = {
    id: number
    zipCode: number
    nameTh: string
    nameEn: string
    amphureId: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    shippingAddresses?: ShippingInfoCreateNestedManyWithoutTambonInput
  }

  export type thaitambonsUncheckedCreateInput = {
    id: number
    zipCode: number
    nameTh: string
    nameEn: string
    amphureId: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    shippingAddresses?: ShippingInfoUncheckedCreateNestedManyWithoutTambonInput
  }

  export type thaitambonsUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    zipCode?: IntFieldUpdateOperationsInput | number
    nameTh?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    amphureId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingAddresses?: ShippingInfoUpdateManyWithoutTambonNestedInput
  }

  export type thaitambonsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    zipCode?: IntFieldUpdateOperationsInput | number
    nameTh?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    amphureId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingAddresses?: ShippingInfoUncheckedUpdateManyWithoutTambonNestedInput
  }

  export type thaitambonsCreateManyInput = {
    id: number
    zipCode: number
    nameTh: string
    nameEn: string
    amphureId: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type thaitambonsUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    zipCode?: IntFieldUpdateOperationsInput | number
    nameTh?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    amphureId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type thaitambonsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    zipCode?: IntFieldUpdateOperationsInput | number
    nameTh?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    amphureId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderCreateInput = {
    orderNumber: string
    userId?: number | null
    status?: $Enums.OrderStatus
    totalAmount: Decimal | DecimalJsLike | number | string
    shippingCost: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    discountCode?: string | null
    finalAmount: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    stripeSessionId?: string | null
    stripePaymentMethodType?: string | null
    customerInfo?: CustomerInfoCreateNestedOneWithoutOrderInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
    paymentInfo?: PaymentInfoCreateNestedOneWithoutOrderInput
    shippingInfo?: ShippingInfoCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: number
    orderNumber: string
    userId?: number | null
    status?: $Enums.OrderStatus
    totalAmount: Decimal | DecimalJsLike | number | string
    shippingCost: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    discountCode?: string | null
    finalAmount: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    stripeSessionId?: string | null
    stripePaymentMethodType?: string | null
    customerInfo?: CustomerInfoUncheckedCreateNestedOneWithoutOrderInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    paymentInfo?: PaymentInfoUncheckedCreateNestedOneWithoutOrderInput
    shippingInfo?: ShippingInfoUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderUpdateInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shippingCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountCode?: NullableStringFieldUpdateOperationsInput | string | null
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentMethodType?: NullableStringFieldUpdateOperationsInput | string | null
    customerInfo?: CustomerInfoUpdateOneWithoutOrderNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
    paymentInfo?: PaymentInfoUpdateOneWithoutOrderNestedInput
    shippingInfo?: ShippingInfoUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shippingCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountCode?: NullableStringFieldUpdateOperationsInput | string | null
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentMethodType?: NullableStringFieldUpdateOperationsInput | string | null
    customerInfo?: CustomerInfoUncheckedUpdateOneWithoutOrderNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    paymentInfo?: PaymentInfoUncheckedUpdateOneWithoutOrderNestedInput
    shippingInfo?: ShippingInfoUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: number
    orderNumber: string
    userId?: number | null
    status?: $Enums.OrderStatus
    totalAmount: Decimal | DecimalJsLike | number | string
    shippingCost: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    discountCode?: string | null
    finalAmount: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    stripeSessionId?: string | null
    stripePaymentMethodType?: string | null
  }

  export type OrderUpdateManyMutationInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shippingCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountCode?: NullableStringFieldUpdateOperationsInput | string | null
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentMethodType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shippingCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountCode?: NullableStringFieldUpdateOperationsInput | string | null
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentMethodType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemCreateInput = {
    productName: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    productImg?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    order: OrderCreateNestedOneWithoutOrderItemsInput
    product: ProductCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateInput = {
    id?: number
    orderId: number
    productId: number
    productName: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    productImg?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderItemUpdateInput = {
    productName?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productImg?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutOrderItemsNestedInput
    product?: ProductUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productImg?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemCreateManyInput = {
    id?: number
    orderId: number
    productId: number
    productName: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    productImg?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderItemUpdateManyMutationInput = {
    productName?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productImg?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productImg?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerInfoCreateInput = {
    firstName: string
    lastName: string
    email: string
    phone: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    order: OrderCreateNestedOneWithoutCustomerInfoInput
  }

  export type CustomerInfoUncheckedCreateInput = {
    id?: number
    orderId: number
    firstName: string
    lastName: string
    email: string
    phone: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerInfoUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutCustomerInfoNestedInput
  }

  export type CustomerInfoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerInfoCreateManyInput = {
    id?: number
    orderId: number
    firstName: string
    lastName: string
    email: string
    phone: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerInfoUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerInfoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShippingInfoCreateInput = {
    receiverName: string
    receiverLastname: string
    receiverPhone: string
    addressLine: string
    addressLine2?: string | null
    provinceName: string
    amphureName: string
    tambonName: string
    zipCode: string
    deliveryDate?: Date | string | null
    deliveryTime?: string | null
    cardMessage?: string | null
    additionalNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    amphure: thaiamphuresCreateNestedOneWithoutShippingAddressesInput
    order: OrderCreateNestedOneWithoutShippingInfoInput
    province: thaiprovincesCreateNestedOneWithoutShippingAddressesInput
    tambon: thaitambonsCreateNestedOneWithoutShippingAddressesInput
  }

  export type ShippingInfoUncheckedCreateInput = {
    id?: number
    orderId: number
    receiverName: string
    receiverLastname: string
    receiverPhone: string
    addressLine: string
    addressLine2?: string | null
    provinceId: number
    provinceName: string
    amphureId: number
    amphureName: string
    tambonId: number
    tambonName: string
    zipCode: string
    deliveryDate?: Date | string | null
    deliveryTime?: string | null
    cardMessage?: string | null
    additionalNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShippingInfoUpdateInput = {
    receiverName?: StringFieldUpdateOperationsInput | string
    receiverLastname?: StringFieldUpdateOperationsInput | string
    receiverPhone?: StringFieldUpdateOperationsInput | string
    addressLine?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    provinceName?: StringFieldUpdateOperationsInput | string
    amphureName?: StringFieldUpdateOperationsInput | string
    tambonName?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amphure?: thaiamphuresUpdateOneRequiredWithoutShippingAddressesNestedInput
    order?: OrderUpdateOneRequiredWithoutShippingInfoNestedInput
    province?: thaiprovincesUpdateOneRequiredWithoutShippingAddressesNestedInput
    tambon?: thaitambonsUpdateOneRequiredWithoutShippingAddressesNestedInput
  }

  export type ShippingInfoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    receiverName?: StringFieldUpdateOperationsInput | string
    receiverLastname?: StringFieldUpdateOperationsInput | string
    receiverPhone?: StringFieldUpdateOperationsInput | string
    addressLine?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    provinceId?: IntFieldUpdateOperationsInput | number
    provinceName?: StringFieldUpdateOperationsInput | string
    amphureId?: IntFieldUpdateOperationsInput | number
    amphureName?: StringFieldUpdateOperationsInput | string
    tambonId?: IntFieldUpdateOperationsInput | number
    tambonName?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShippingInfoCreateManyInput = {
    id?: number
    orderId: number
    receiverName: string
    receiverLastname: string
    receiverPhone: string
    addressLine: string
    addressLine2?: string | null
    provinceId: number
    provinceName: string
    amphureId: number
    amphureName: string
    tambonId: number
    tambonName: string
    zipCode: string
    deliveryDate?: Date | string | null
    deliveryTime?: string | null
    cardMessage?: string | null
    additionalNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShippingInfoUpdateManyMutationInput = {
    receiverName?: StringFieldUpdateOperationsInput | string
    receiverLastname?: StringFieldUpdateOperationsInput | string
    receiverPhone?: StringFieldUpdateOperationsInput | string
    addressLine?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    provinceName?: StringFieldUpdateOperationsInput | string
    amphureName?: StringFieldUpdateOperationsInput | string
    tambonName?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShippingInfoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    receiverName?: StringFieldUpdateOperationsInput | string
    receiverLastname?: StringFieldUpdateOperationsInput | string
    receiverPhone?: StringFieldUpdateOperationsInput | string
    addressLine?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    provinceId?: IntFieldUpdateOperationsInput | number
    provinceName?: StringFieldUpdateOperationsInput | string
    amphureId?: IntFieldUpdateOperationsInput | number
    amphureName?: StringFieldUpdateOperationsInput | string
    tambonId?: IntFieldUpdateOperationsInput | number
    tambonName?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentInfoCreateInput = {
    paymentMethod?: $Enums.PaymentMethod
    paymentDate?: Date | string | null
    transactionId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    bankName?: string | null
    slipUrl?: string | null
    status?: $Enums.PaymentStatus
    verifiedBy?: number | null
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    order: OrderCreateNestedOneWithoutPaymentInfoInput
  }

  export type PaymentInfoUncheckedCreateInput = {
    id?: number
    orderId: number
    paymentMethod?: $Enums.PaymentMethod
    paymentDate?: Date | string | null
    transactionId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    bankName?: string | null
    slipUrl?: string | null
    status?: $Enums.PaymentStatus
    verifiedBy?: number | null
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentInfoUpdateInput = {
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    slipUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    verifiedBy?: NullableIntFieldUpdateOperationsInput | number | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutPaymentInfoNestedInput
  }

  export type PaymentInfoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    slipUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    verifiedBy?: NullableIntFieldUpdateOperationsInput | number | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentInfoCreateManyInput = {
    id?: number
    orderId: number
    paymentMethod?: $Enums.PaymentMethod
    paymentDate?: Date | string | null
    transactionId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    bankName?: string | null
    slipUrl?: string | null
    status?: $Enums.PaymentStatus
    verifiedBy?: number | null
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentInfoUpdateManyMutationInput = {
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    slipUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    verifiedBy?: NullableIntFieldUpdateOperationsInput | number | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentInfoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    slipUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    verifiedBy?: NullableIntFieldUpdateOperationsInput | number | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentConfirmationCreateInput = {
    id?: string
    orderNumber: string
    amount: Decimal | DecimalJsLike | number | string
    bankName?: string | null
    slipUrl: string
    status?: string
    notes?: string | null
    verifiedBy?: number | null
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentConfirmationUncheckedCreateInput = {
    id?: string
    orderNumber: string
    amount: Decimal | DecimalJsLike | number | string
    bankName?: string | null
    slipUrl: string
    status?: string
    notes?: string | null
    verifiedBy?: number | null
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentConfirmationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    slipUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedBy?: NullableIntFieldUpdateOperationsInput | number | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentConfirmationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    slipUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedBy?: NullableIntFieldUpdateOperationsInput | number | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentConfirmationCreateManyInput = {
    id?: string
    orderNumber: string
    amount: Decimal | DecimalJsLike | number | string
    bankName?: string | null
    slipUrl: string
    status?: string
    notes?: string | null
    verifiedBy?: number | null
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentConfirmationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    slipUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedBy?: NullableIntFieldUpdateOperationsInput | number | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentConfirmationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    slipUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedBy?: NullableIntFieldUpdateOperationsInput | number | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersCreateInput = {
    firstName: string
    lastName: string
    email: string
    isAdmin?: $Enums.users_isAdmin
    emailVerifiedAt?: Date | string | null
    password: string
    rememberToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lineId?: string | null
    avatar?: string | null
    passwordReset?: PasswordResetCreateNestedOneWithoutUserInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    isAdmin?: $Enums.users_isAdmin
    emailVerifiedAt?: Date | string | null
    password: string
    rememberToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lineId?: string | null
    avatar?: string | null
    passwordReset?: PasswordResetUncheckedCreateNestedOneWithoutUserInput
  }

  export type usersUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isAdmin?: Enumusers_isAdminFieldUpdateOperationsInput | $Enums.users_isAdmin
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    rememberToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    passwordReset?: PasswordResetUpdateOneWithoutUserNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isAdmin?: Enumusers_isAdminFieldUpdateOperationsInput | $Enums.users_isAdmin
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    rememberToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    passwordReset?: PasswordResetUncheckedUpdateOneWithoutUserNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    isAdmin?: $Enums.users_isAdmin
    emailVerifiedAt?: Date | string | null
    password: string
    rememberToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lineId?: string | null
    avatar?: string | null
  }

  export type usersUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isAdmin?: Enumusers_isAdminFieldUpdateOperationsInput | $Enums.users_isAdmin
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    rememberToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isAdmin?: Enumusers_isAdminFieldUpdateOperationsInput | $Enums.users_isAdmin
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    rememberToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BlogCreateInput = {
    title: string
    slug: string
    excerpt: string
    content: string
    image: string
    category: string
    date: string
    published?: boolean
    userId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BlogUncheckedCreateInput = {
    id?: number
    title: string
    slug: string
    excerpt: string
    content: string
    image: string
    category: string
    date: string
    published?: boolean
    userId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BlogUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    excerpt?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    excerpt?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlogCreateManyInput = {
    id?: number
    title: string
    slug: string
    excerpt: string
    content: string
    image: string
    category: string
    date: string
    published?: boolean
    userId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BlogUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    excerpt?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    excerpt?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscountCodeCreateInput = {
    code: string
    type: string
    value: Decimal | DecimalJsLike | number | string
    minAmount: Decimal | DecimalJsLike | number | string
    maxDiscount?: Decimal | DecimalJsLike | number | string | null
    description: string
    maxUses?: number
    usedCount?: number
    status?: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiscountCodeUncheckedCreateInput = {
    id?: number
    code: string
    type: string
    value: Decimal | DecimalJsLike | number | string
    minAmount: Decimal | DecimalJsLike | number | string
    maxDiscount?: Decimal | DecimalJsLike | number | string | null
    description: string
    maxUses?: number
    usedCount?: number
    status?: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiscountCodeUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxDiscount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: StringFieldUpdateOperationsInput | string
    maxUses?: IntFieldUpdateOperationsInput | number
    usedCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscountCodeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxDiscount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: StringFieldUpdateOperationsInput | string
    maxUses?: IntFieldUpdateOperationsInput | number
    usedCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscountCodeCreateManyInput = {
    id?: number
    code: string
    type: string
    value: Decimal | DecimalJsLike | number | string
    minAmount: Decimal | DecimalJsLike | number | string
    maxDiscount?: Decimal | DecimalJsLike | number | string | null
    description: string
    maxUses?: number
    usedCount?: number
    status?: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiscountCodeUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxDiscount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: StringFieldUpdateOperationsInput | string
    maxUses?: IntFieldUpdateOperationsInput | number
    usedCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscountCodeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxDiscount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: StringFieldUpdateOperationsInput | string
    maxUses?: IntFieldUpdateOperationsInput | number
    usedCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetCreateInput = {
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: usersCreateNestedOneWithoutPasswordResetInput
  }

  export type PasswordResetUncheckedCreateInput = {
    id?: number
    userId: number
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PasswordResetUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: usersUpdateOneRequiredWithoutPasswordResetNestedInput
  }

  export type PasswordResetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetCreateManyInput = {
    id?: number
    userId: number
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PasswordResetUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PendingPaymentCreateInput = {
    charge_id: string
    amount: Decimal | DecimalJsLike | number | string
    payment_method: string
    status: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order_id?: number | null
    processed?: boolean
    processed_at?: Date | string | null
    customer_email?: string | null
    customer_name?: string | null
    customer_phone?: string | null
    deliveryDate?: string | null
    deliveryTime?: string | null
    cardMessage?: string | null
    additionalNote?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PendingPaymentUncheckedCreateInput = {
    id?: number
    charge_id: string
    amount: Decimal | DecimalJsLike | number | string
    payment_method: string
    status: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order_id?: number | null
    processed?: boolean
    processed_at?: Date | string | null
    customer_email?: string | null
    customer_name?: string | null
    customer_phone?: string | null
    deliveryDate?: string | null
    deliveryTime?: string | null
    cardMessage?: string | null
    additionalNote?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PendingPaymentUpdateInput = {
    charge_id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    processed?: BoolFieldUpdateOperationsInput | boolean
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer_email?: NullableStringFieldUpdateOperationsInput | string | null
    customer_name?: NullableStringFieldUpdateOperationsInput | string | null
    customer_phone?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryDate?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PendingPaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    charge_id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    processed?: BoolFieldUpdateOperationsInput | boolean
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer_email?: NullableStringFieldUpdateOperationsInput | string | null
    customer_name?: NullableStringFieldUpdateOperationsInput | string | null
    customer_phone?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryDate?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PendingPaymentCreateManyInput = {
    id?: number
    charge_id: string
    amount: Decimal | DecimalJsLike | number | string
    payment_method: string
    status: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order_id?: number | null
    processed?: boolean
    processed_at?: Date | string | null
    customer_email?: string | null
    customer_name?: string | null
    customer_phone?: string | null
    deliveryDate?: string | null
    deliveryTime?: string | null
    cardMessage?: string | null
    additionalNote?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PendingPaymentUpdateManyMutationInput = {
    charge_id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    processed?: BoolFieldUpdateOperationsInput | boolean
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer_email?: NullableStringFieldUpdateOperationsInput | string | null
    customer_name?: NullableStringFieldUpdateOperationsInput | string | null
    customer_phone?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryDate?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PendingPaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    charge_id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    processed?: BoolFieldUpdateOperationsInput | boolean
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer_email?: NullableStringFieldUpdateOperationsInput | string | null
    customer_name?: NullableStringFieldUpdateOperationsInput | string | null
    customer_phone?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryDate?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationLogCreateInput = {
    orderId: number
    type: string
    eventType: string
    sent?: boolean
    transactionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationLogUncheckedCreateInput = {
    id?: number
    orderId: number
    type: string
    eventType: string
    sent?: boolean
    transactionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationLogUpdateInput = {
    orderId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationLogCreateManyInput = {
    id?: number
    orderId: number
    type: string
    eventType: string
    sent?: boolean
    transactionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationLogUpdateManyMutationInput = {
    orderId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CategoryOrderByRelevanceInput = {
    fields: CategoryOrderByRelevanceFieldEnum | CategoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    categoryName?: SortOrder
    categoryDesc?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    bestseller?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    priority?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    categoryName?: SortOrder
    categoryDesc?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    bestseller?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    categoryName?: SortOrder
    categoryDesc?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    bestseller?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
    priority?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type OrderItemListRelationFilter = {
    every?: OrderItemWhereInput
    some?: OrderItemWhereInput
    none?: OrderItemWhereInput
  }

  export type OrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductOrderByRelevanceInput = {
    fields: ProductOrderByRelevanceFieldEnum | ProductOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    sku?: SortOrder
    productImg?: SortOrder
    productName?: SortOrder
    slug?: SortOrder
    productDesc?: SortOrder
    salesPrice?: SortOrder
    originalPrice?: SortOrder
    discount?: SortOrder
    potSize?: SortOrder
    plantHeight?: SortOrder
    preparationTime?: SortOrder
    stock?: SortOrder
    stockStatus?: SortOrder
    category?: SortOrder
    categoryId?: SortOrder
    productStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder
    salesPrice?: SortOrder
    originalPrice?: SortOrder
    discount?: SortOrder
    stock?: SortOrder
    categoryId?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    sku?: SortOrder
    productImg?: SortOrder
    productName?: SortOrder
    slug?: SortOrder
    productDesc?: SortOrder
    salesPrice?: SortOrder
    originalPrice?: SortOrder
    discount?: SortOrder
    potSize?: SortOrder
    plantHeight?: SortOrder
    preparationTime?: SortOrder
    stock?: SortOrder
    stockStatus?: SortOrder
    category?: SortOrder
    categoryId?: SortOrder
    productStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    sku?: SortOrder
    productImg?: SortOrder
    productName?: SortOrder
    slug?: SortOrder
    productDesc?: SortOrder
    salesPrice?: SortOrder
    originalPrice?: SortOrder
    discount?: SortOrder
    potSize?: SortOrder
    plantHeight?: SortOrder
    preparationTime?: SortOrder
    stock?: SortOrder
    stockStatus?: SortOrder
    category?: SortOrder
    categoryId?: SortOrder
    productStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder
    salesPrice?: SortOrder
    originalPrice?: SortOrder
    discount?: SortOrder
    stock?: SortOrder
    categoryId?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type statusmasterOrderByRelevanceInput = {
    fields: statusmasterOrderByRelevanceFieldEnum | statusmasterOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type statusmasterCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type statusmasterAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type statusmasterMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type statusmasterMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type statusmasterSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type productimageOrderByRelevanceInput = {
    fields: productimageOrderByRelevanceFieldEnum | productimageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type productimageCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    imageName?: SortOrder
    imageDesc?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type productimageAvgOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
  }

  export type productimageMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    imageName?: SortOrder
    imageDesc?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type productimageMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    imageName?: SortOrder
    imageDesc?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type productimageSumOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ShippingInfoListRelationFilter = {
    every?: ShippingInfoWhereInput
    some?: ShippingInfoWhereInput
    none?: ShippingInfoWhereInput
  }

  export type ShippingInfoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type thaiamphuresOrderByRelevanceInput = {
    fields: thaiamphuresOrderByRelevanceFieldEnum | thaiamphuresOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type thaiamphuresCountOrderByAggregateInput = {
    id?: SortOrder
    nameTh?: SortOrder
    nameEn?: SortOrder
    provinceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type thaiamphuresAvgOrderByAggregateInput = {
    id?: SortOrder
    provinceId?: SortOrder
  }

  export type thaiamphuresMaxOrderByAggregateInput = {
    id?: SortOrder
    nameTh?: SortOrder
    nameEn?: SortOrder
    provinceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type thaiamphuresMinOrderByAggregateInput = {
    id?: SortOrder
    nameTh?: SortOrder
    nameEn?: SortOrder
    provinceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type thaiamphuresSumOrderByAggregateInput = {
    id?: SortOrder
    provinceId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type thaigeographiesOrderByRelevanceInput = {
    fields: thaigeographiesOrderByRelevanceFieldEnum | thaigeographiesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type thaigeographiesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type thaigeographiesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type thaigeographiesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type thaigeographiesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type thaigeographiesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type thaiprovincesOrderByRelevanceInput = {
    fields: thaiprovincesOrderByRelevanceFieldEnum | thaiprovincesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type thaiprovincesCountOrderByAggregateInput = {
    id?: SortOrder
    nameTh?: SortOrder
    nameEn?: SortOrder
    geographyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type thaiprovincesAvgOrderByAggregateInput = {
    id?: SortOrder
    geographyId?: SortOrder
  }

  export type thaiprovincesMaxOrderByAggregateInput = {
    id?: SortOrder
    nameTh?: SortOrder
    nameEn?: SortOrder
    geographyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type thaiprovincesMinOrderByAggregateInput = {
    id?: SortOrder
    nameTh?: SortOrder
    nameEn?: SortOrder
    geographyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type thaiprovincesSumOrderByAggregateInput = {
    id?: SortOrder
    geographyId?: SortOrder
  }

  export type thaitambonsOrderByRelevanceInput = {
    fields: thaitambonsOrderByRelevanceFieldEnum | thaitambonsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type thaitambonsCountOrderByAggregateInput = {
    id?: SortOrder
    zipCode?: SortOrder
    nameTh?: SortOrder
    nameEn?: SortOrder
    amphureId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type thaitambonsAvgOrderByAggregateInput = {
    id?: SortOrder
    zipCode?: SortOrder
    amphureId?: SortOrder
  }

  export type thaitambonsMaxOrderByAggregateInput = {
    id?: SortOrder
    zipCode?: SortOrder
    nameTh?: SortOrder
    nameEn?: SortOrder
    amphureId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type thaitambonsMinOrderByAggregateInput = {
    id?: SortOrder
    zipCode?: SortOrder
    nameTh?: SortOrder
    nameEn?: SortOrder
    amphureId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type thaitambonsSumOrderByAggregateInput = {
    id?: SortOrder
    zipCode?: SortOrder
    amphureId?: SortOrder
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[]
    notIn?: $Enums.OrderStatus[]
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CustomerInfoNullableScalarRelationFilter = {
    is?: CustomerInfoWhereInput | null
    isNot?: CustomerInfoWhereInput | null
  }

  export type PaymentInfoNullableScalarRelationFilter = {
    is?: PaymentInfoWhereInput | null
    isNot?: PaymentInfoWhereInput | null
  }

  export type ShippingInfoNullableScalarRelationFilter = {
    is?: ShippingInfoWhereInput | null
    isNot?: ShippingInfoWhereInput | null
  }

  export type OrderOrderByRelevanceInput = {
    fields: OrderOrderByRelevanceFieldEnum | OrderOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    totalAmount?: SortOrder
    shippingCost?: SortOrder
    discount?: SortOrder
    discountCode?: SortOrder
    finalAmount?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminComment?: SortOrder
    stripeSessionId?: SortOrder
    stripePaymentMethodType?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    shippingCost?: SortOrder
    discount?: SortOrder
    finalAmount?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    totalAmount?: SortOrder
    shippingCost?: SortOrder
    discount?: SortOrder
    discountCode?: SortOrder
    finalAmount?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminComment?: SortOrder
    stripeSessionId?: SortOrder
    stripePaymentMethodType?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    totalAmount?: SortOrder
    shippingCost?: SortOrder
    discount?: SortOrder
    discountCode?: SortOrder
    finalAmount?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminComment?: SortOrder
    stripeSessionId?: SortOrder
    stripePaymentMethodType?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    shippingCost?: SortOrder
    discount?: SortOrder
    finalAmount?: SortOrder
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[]
    notIn?: $Enums.OrderStatus[]
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type OrderScalarRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type ProductScalarRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type OrderItemOrderByRelevanceInput = {
    fields: OrderItemOrderByRelevanceFieldEnum | OrderItemOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OrderItemCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    productImg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderItemAvgOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type OrderItemMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    productImg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderItemMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    productImg?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderItemSumOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type CustomerInfoOrderByRelevanceInput = {
    fields: CustomerInfoOrderByRelevanceFieldEnum | CustomerInfoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CustomerInfoCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerInfoAvgOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
  }

  export type CustomerInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerInfoMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerInfoSumOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
  }

  export type ThaiamphuresScalarRelationFilter = {
    is?: thaiamphuresWhereInput
    isNot?: thaiamphuresWhereInput
  }

  export type ThaiprovincesScalarRelationFilter = {
    is?: thaiprovincesWhereInput
    isNot?: thaiprovincesWhereInput
  }

  export type ThaitambonsScalarRelationFilter = {
    is?: thaitambonsWhereInput
    isNot?: thaitambonsWhereInput
  }

  export type ShippingInfoOrderByRelevanceInput = {
    fields: ShippingInfoOrderByRelevanceFieldEnum | ShippingInfoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ShippingInfoCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    receiverName?: SortOrder
    receiverLastname?: SortOrder
    receiverPhone?: SortOrder
    addressLine?: SortOrder
    addressLine2?: SortOrder
    provinceId?: SortOrder
    provinceName?: SortOrder
    amphureId?: SortOrder
    amphureName?: SortOrder
    tambonId?: SortOrder
    tambonName?: SortOrder
    zipCode?: SortOrder
    deliveryDate?: SortOrder
    deliveryTime?: SortOrder
    cardMessage?: SortOrder
    additionalNote?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShippingInfoAvgOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    provinceId?: SortOrder
    amphureId?: SortOrder
    tambonId?: SortOrder
  }

  export type ShippingInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    receiverName?: SortOrder
    receiverLastname?: SortOrder
    receiverPhone?: SortOrder
    addressLine?: SortOrder
    addressLine2?: SortOrder
    provinceId?: SortOrder
    provinceName?: SortOrder
    amphureId?: SortOrder
    amphureName?: SortOrder
    tambonId?: SortOrder
    tambonName?: SortOrder
    zipCode?: SortOrder
    deliveryDate?: SortOrder
    deliveryTime?: SortOrder
    cardMessage?: SortOrder
    additionalNote?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShippingInfoMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    receiverName?: SortOrder
    receiverLastname?: SortOrder
    receiverPhone?: SortOrder
    addressLine?: SortOrder
    addressLine2?: SortOrder
    provinceId?: SortOrder
    provinceName?: SortOrder
    amphureId?: SortOrder
    amphureName?: SortOrder
    tambonId?: SortOrder
    tambonName?: SortOrder
    zipCode?: SortOrder
    deliveryDate?: SortOrder
    deliveryTime?: SortOrder
    cardMessage?: SortOrder
    additionalNote?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShippingInfoSumOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    provinceId?: SortOrder
    amphureId?: SortOrder
    tambonId?: SortOrder
  }

  export type PaymentInfoOrderByRelevanceInput = {
    fields: PaymentInfoOrderByRelevanceFieldEnum | PaymentInfoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PaymentInfoCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    paymentMethod?: SortOrder
    paymentDate?: SortOrder
    transactionId?: SortOrder
    amount?: SortOrder
    bankName?: SortOrder
    slipUrl?: SortOrder
    status?: SortOrder
    verifiedBy?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentInfoAvgOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    amount?: SortOrder
    verifiedBy?: SortOrder
  }

  export type PaymentInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    paymentMethod?: SortOrder
    paymentDate?: SortOrder
    transactionId?: SortOrder
    amount?: SortOrder
    bankName?: SortOrder
    slipUrl?: SortOrder
    status?: SortOrder
    verifiedBy?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentInfoMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    paymentMethod?: SortOrder
    paymentDate?: SortOrder
    transactionId?: SortOrder
    amount?: SortOrder
    bankName?: SortOrder
    slipUrl?: SortOrder
    status?: SortOrder
    verifiedBy?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentInfoSumOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    amount?: SortOrder
    verifiedBy?: SortOrder
  }

  export type PaymentConfirmationOrderByRelevanceInput = {
    fields: PaymentConfirmationOrderByRelevanceFieldEnum | PaymentConfirmationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PaymentConfirmationCountOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    amount?: SortOrder
    bankName?: SortOrder
    slipUrl?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    verifiedBy?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentConfirmationAvgOrderByAggregateInput = {
    amount?: SortOrder
    verifiedBy?: SortOrder
  }

  export type PaymentConfirmationMaxOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    amount?: SortOrder
    bankName?: SortOrder
    slipUrl?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    verifiedBy?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentConfirmationMinOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    amount?: SortOrder
    bankName?: SortOrder
    slipUrl?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    verifiedBy?: SortOrder
    verifiedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentConfirmationSumOrderByAggregateInput = {
    amount?: SortOrder
    verifiedBy?: SortOrder
  }

  export type Enumusers_isAdminFilter<$PrismaModel = never> = {
    equals?: $Enums.users_isAdmin | Enumusers_isAdminFieldRefInput<$PrismaModel>
    in?: $Enums.users_isAdmin[]
    notIn?: $Enums.users_isAdmin[]
    not?: NestedEnumusers_isAdminFilter<$PrismaModel> | $Enums.users_isAdmin
  }

  export type PasswordResetNullableScalarRelationFilter = {
    is?: PasswordResetWhereInput | null
    isNot?: PasswordResetWhereInput | null
  }

  export type usersOrderByRelevanceInput = {
    fields: usersOrderByRelevanceFieldEnum | usersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    isAdmin?: SortOrder
    emailVerifiedAt?: SortOrder
    password?: SortOrder
    rememberToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lineId?: SortOrder
    avatar?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    isAdmin?: SortOrder
    emailVerifiedAt?: SortOrder
    password?: SortOrder
    rememberToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lineId?: SortOrder
    avatar?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    isAdmin?: SortOrder
    emailVerifiedAt?: SortOrder
    password?: SortOrder
    rememberToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lineId?: SortOrder
    avatar?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Enumusers_isAdminWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.users_isAdmin | Enumusers_isAdminFieldRefInput<$PrismaModel>
    in?: $Enums.users_isAdmin[]
    notIn?: $Enums.users_isAdmin[]
    not?: NestedEnumusers_isAdminWithAggregatesFilter<$PrismaModel> | $Enums.users_isAdmin
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumusers_isAdminFilter<$PrismaModel>
    _max?: NestedEnumusers_isAdminFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BlogOrderByRelevanceInput = {
    fields: BlogOrderByRelevanceFieldEnum | BlogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BlogCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    excerpt?: SortOrder
    content?: SortOrder
    image?: SortOrder
    category?: SortOrder
    date?: SortOrder
    published?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BlogAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type BlogMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    excerpt?: SortOrder
    content?: SortOrder
    image?: SortOrder
    category?: SortOrder
    date?: SortOrder
    published?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BlogMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    excerpt?: SortOrder
    content?: SortOrder
    image?: SortOrder
    category?: SortOrder
    date?: SortOrder
    published?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BlogSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DiscountCodeOrderByRelevanceInput = {
    fields: DiscountCodeOrderByRelevanceFieldEnum | DiscountCodeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DiscountCodeCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
    minAmount?: SortOrder
    maxDiscount?: SortOrder
    description?: SortOrder
    maxUses?: SortOrder
    usedCount?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiscountCodeAvgOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    minAmount?: SortOrder
    maxDiscount?: SortOrder
    maxUses?: SortOrder
    usedCount?: SortOrder
    createdBy?: SortOrder
  }

  export type DiscountCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
    minAmount?: SortOrder
    maxDiscount?: SortOrder
    description?: SortOrder
    maxUses?: SortOrder
    usedCount?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiscountCodeMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    value?: SortOrder
    minAmount?: SortOrder
    maxDiscount?: SortOrder
    description?: SortOrder
    maxUses?: SortOrder
    usedCount?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiscountCodeSumOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    minAmount?: SortOrder
    maxDiscount?: SortOrder
    maxUses?: SortOrder
    usedCount?: SortOrder
    createdBy?: SortOrder
  }

  export type UsersScalarRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type PasswordResetOrderByRelevanceInput = {
    fields: PasswordResetOrderByRelevanceFieldEnum | PasswordResetOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PasswordResetCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PasswordResetAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PasswordResetMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PasswordResetMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PasswordResetSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PendingPaymentOrderByRelevanceInput = {
    fields: PendingPaymentOrderByRelevanceFieldEnum | PendingPaymentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PendingPaymentCountOrderByAggregateInput = {
    id?: SortOrder
    charge_id?: SortOrder
    amount?: SortOrder
    payment_method?: SortOrder
    status?: SortOrder
    metadata?: SortOrder
    order_id?: SortOrder
    processed?: SortOrder
    processed_at?: SortOrder
    customer_email?: SortOrder
    customer_name?: SortOrder
    customer_phone?: SortOrder
    deliveryDate?: SortOrder
    deliveryTime?: SortOrder
    cardMessage?: SortOrder
    additionalNote?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PendingPaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    order_id?: SortOrder
  }

  export type PendingPaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    charge_id?: SortOrder
    amount?: SortOrder
    payment_method?: SortOrder
    status?: SortOrder
    order_id?: SortOrder
    processed?: SortOrder
    processed_at?: SortOrder
    customer_email?: SortOrder
    customer_name?: SortOrder
    customer_phone?: SortOrder
    deliveryDate?: SortOrder
    deliveryTime?: SortOrder
    cardMessage?: SortOrder
    additionalNote?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PendingPaymentMinOrderByAggregateInput = {
    id?: SortOrder
    charge_id?: SortOrder
    amount?: SortOrder
    payment_method?: SortOrder
    status?: SortOrder
    order_id?: SortOrder
    processed?: SortOrder
    processed_at?: SortOrder
    customer_email?: SortOrder
    customer_name?: SortOrder
    customer_phone?: SortOrder
    deliveryDate?: SortOrder
    deliveryTime?: SortOrder
    cardMessage?: SortOrder
    additionalNote?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PendingPaymentSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    order_id?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type NotificationLogOrderByRelevanceInput = {
    fields: NotificationLogOrderByRelevanceFieldEnum | NotificationLogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type NotificationLogOrderIdTypeEventTypeCompoundUniqueInput = {
    orderId: number
    type: string
    eventType: string
  }

  export type NotificationLogCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    type?: SortOrder
    eventType?: SortOrder
    sent?: SortOrder
    transactionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationLogAvgOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
  }

  export type NotificationLogMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    type?: SortOrder
    eventType?: SortOrder
    sent?: SortOrder
    transactionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationLogMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    type?: SortOrder
    eventType?: SortOrder
    sent?: SortOrder
    transactionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationLogSumOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrderItemCreateNestedManyWithoutProductInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type OrderItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutProductInput | OrderItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutProductInput | OrderItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutProductInput | OrderItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutProductInput | OrderItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutProductInput | OrderItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutProductInput | OrderItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type ShippingInfoCreateNestedManyWithoutAmphureInput = {
    create?: XOR<ShippingInfoCreateWithoutAmphureInput, ShippingInfoUncheckedCreateWithoutAmphureInput> | ShippingInfoCreateWithoutAmphureInput[] | ShippingInfoUncheckedCreateWithoutAmphureInput[]
    connectOrCreate?: ShippingInfoCreateOrConnectWithoutAmphureInput | ShippingInfoCreateOrConnectWithoutAmphureInput[]
    createMany?: ShippingInfoCreateManyAmphureInputEnvelope
    connect?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
  }

  export type ShippingInfoUncheckedCreateNestedManyWithoutAmphureInput = {
    create?: XOR<ShippingInfoCreateWithoutAmphureInput, ShippingInfoUncheckedCreateWithoutAmphureInput> | ShippingInfoCreateWithoutAmphureInput[] | ShippingInfoUncheckedCreateWithoutAmphureInput[]
    connectOrCreate?: ShippingInfoCreateOrConnectWithoutAmphureInput | ShippingInfoCreateOrConnectWithoutAmphureInput[]
    createMany?: ShippingInfoCreateManyAmphureInputEnvelope
    connect?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ShippingInfoUpdateManyWithoutAmphureNestedInput = {
    create?: XOR<ShippingInfoCreateWithoutAmphureInput, ShippingInfoUncheckedCreateWithoutAmphureInput> | ShippingInfoCreateWithoutAmphureInput[] | ShippingInfoUncheckedCreateWithoutAmphureInput[]
    connectOrCreate?: ShippingInfoCreateOrConnectWithoutAmphureInput | ShippingInfoCreateOrConnectWithoutAmphureInput[]
    upsert?: ShippingInfoUpsertWithWhereUniqueWithoutAmphureInput | ShippingInfoUpsertWithWhereUniqueWithoutAmphureInput[]
    createMany?: ShippingInfoCreateManyAmphureInputEnvelope
    set?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    disconnect?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    delete?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    connect?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    update?: ShippingInfoUpdateWithWhereUniqueWithoutAmphureInput | ShippingInfoUpdateWithWhereUniqueWithoutAmphureInput[]
    updateMany?: ShippingInfoUpdateManyWithWhereWithoutAmphureInput | ShippingInfoUpdateManyWithWhereWithoutAmphureInput[]
    deleteMany?: ShippingInfoScalarWhereInput | ShippingInfoScalarWhereInput[]
  }

  export type ShippingInfoUncheckedUpdateManyWithoutAmphureNestedInput = {
    create?: XOR<ShippingInfoCreateWithoutAmphureInput, ShippingInfoUncheckedCreateWithoutAmphureInput> | ShippingInfoCreateWithoutAmphureInput[] | ShippingInfoUncheckedCreateWithoutAmphureInput[]
    connectOrCreate?: ShippingInfoCreateOrConnectWithoutAmphureInput | ShippingInfoCreateOrConnectWithoutAmphureInput[]
    upsert?: ShippingInfoUpsertWithWhereUniqueWithoutAmphureInput | ShippingInfoUpsertWithWhereUniqueWithoutAmphureInput[]
    createMany?: ShippingInfoCreateManyAmphureInputEnvelope
    set?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    disconnect?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    delete?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    connect?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    update?: ShippingInfoUpdateWithWhereUniqueWithoutAmphureInput | ShippingInfoUpdateWithWhereUniqueWithoutAmphureInput[]
    updateMany?: ShippingInfoUpdateManyWithWhereWithoutAmphureInput | ShippingInfoUpdateManyWithWhereWithoutAmphureInput[]
    deleteMany?: ShippingInfoScalarWhereInput | ShippingInfoScalarWhereInput[]
  }

  export type ShippingInfoCreateNestedManyWithoutProvinceInput = {
    create?: XOR<ShippingInfoCreateWithoutProvinceInput, ShippingInfoUncheckedCreateWithoutProvinceInput> | ShippingInfoCreateWithoutProvinceInput[] | ShippingInfoUncheckedCreateWithoutProvinceInput[]
    connectOrCreate?: ShippingInfoCreateOrConnectWithoutProvinceInput | ShippingInfoCreateOrConnectWithoutProvinceInput[]
    createMany?: ShippingInfoCreateManyProvinceInputEnvelope
    connect?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
  }

  export type ShippingInfoUncheckedCreateNestedManyWithoutProvinceInput = {
    create?: XOR<ShippingInfoCreateWithoutProvinceInput, ShippingInfoUncheckedCreateWithoutProvinceInput> | ShippingInfoCreateWithoutProvinceInput[] | ShippingInfoUncheckedCreateWithoutProvinceInput[]
    connectOrCreate?: ShippingInfoCreateOrConnectWithoutProvinceInput | ShippingInfoCreateOrConnectWithoutProvinceInput[]
    createMany?: ShippingInfoCreateManyProvinceInputEnvelope
    connect?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
  }

  export type ShippingInfoUpdateManyWithoutProvinceNestedInput = {
    create?: XOR<ShippingInfoCreateWithoutProvinceInput, ShippingInfoUncheckedCreateWithoutProvinceInput> | ShippingInfoCreateWithoutProvinceInput[] | ShippingInfoUncheckedCreateWithoutProvinceInput[]
    connectOrCreate?: ShippingInfoCreateOrConnectWithoutProvinceInput | ShippingInfoCreateOrConnectWithoutProvinceInput[]
    upsert?: ShippingInfoUpsertWithWhereUniqueWithoutProvinceInput | ShippingInfoUpsertWithWhereUniqueWithoutProvinceInput[]
    createMany?: ShippingInfoCreateManyProvinceInputEnvelope
    set?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    disconnect?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    delete?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    connect?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    update?: ShippingInfoUpdateWithWhereUniqueWithoutProvinceInput | ShippingInfoUpdateWithWhereUniqueWithoutProvinceInput[]
    updateMany?: ShippingInfoUpdateManyWithWhereWithoutProvinceInput | ShippingInfoUpdateManyWithWhereWithoutProvinceInput[]
    deleteMany?: ShippingInfoScalarWhereInput | ShippingInfoScalarWhereInput[]
  }

  export type ShippingInfoUncheckedUpdateManyWithoutProvinceNestedInput = {
    create?: XOR<ShippingInfoCreateWithoutProvinceInput, ShippingInfoUncheckedCreateWithoutProvinceInput> | ShippingInfoCreateWithoutProvinceInput[] | ShippingInfoUncheckedCreateWithoutProvinceInput[]
    connectOrCreate?: ShippingInfoCreateOrConnectWithoutProvinceInput | ShippingInfoCreateOrConnectWithoutProvinceInput[]
    upsert?: ShippingInfoUpsertWithWhereUniqueWithoutProvinceInput | ShippingInfoUpsertWithWhereUniqueWithoutProvinceInput[]
    createMany?: ShippingInfoCreateManyProvinceInputEnvelope
    set?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    disconnect?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    delete?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    connect?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    update?: ShippingInfoUpdateWithWhereUniqueWithoutProvinceInput | ShippingInfoUpdateWithWhereUniqueWithoutProvinceInput[]
    updateMany?: ShippingInfoUpdateManyWithWhereWithoutProvinceInput | ShippingInfoUpdateManyWithWhereWithoutProvinceInput[]
    deleteMany?: ShippingInfoScalarWhereInput | ShippingInfoScalarWhereInput[]
  }

  export type ShippingInfoCreateNestedManyWithoutTambonInput = {
    create?: XOR<ShippingInfoCreateWithoutTambonInput, ShippingInfoUncheckedCreateWithoutTambonInput> | ShippingInfoCreateWithoutTambonInput[] | ShippingInfoUncheckedCreateWithoutTambonInput[]
    connectOrCreate?: ShippingInfoCreateOrConnectWithoutTambonInput | ShippingInfoCreateOrConnectWithoutTambonInput[]
    createMany?: ShippingInfoCreateManyTambonInputEnvelope
    connect?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
  }

  export type ShippingInfoUncheckedCreateNestedManyWithoutTambonInput = {
    create?: XOR<ShippingInfoCreateWithoutTambonInput, ShippingInfoUncheckedCreateWithoutTambonInput> | ShippingInfoCreateWithoutTambonInput[] | ShippingInfoUncheckedCreateWithoutTambonInput[]
    connectOrCreate?: ShippingInfoCreateOrConnectWithoutTambonInput | ShippingInfoCreateOrConnectWithoutTambonInput[]
    createMany?: ShippingInfoCreateManyTambonInputEnvelope
    connect?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
  }

  export type ShippingInfoUpdateManyWithoutTambonNestedInput = {
    create?: XOR<ShippingInfoCreateWithoutTambonInput, ShippingInfoUncheckedCreateWithoutTambonInput> | ShippingInfoCreateWithoutTambonInput[] | ShippingInfoUncheckedCreateWithoutTambonInput[]
    connectOrCreate?: ShippingInfoCreateOrConnectWithoutTambonInput | ShippingInfoCreateOrConnectWithoutTambonInput[]
    upsert?: ShippingInfoUpsertWithWhereUniqueWithoutTambonInput | ShippingInfoUpsertWithWhereUniqueWithoutTambonInput[]
    createMany?: ShippingInfoCreateManyTambonInputEnvelope
    set?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    disconnect?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    delete?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    connect?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    update?: ShippingInfoUpdateWithWhereUniqueWithoutTambonInput | ShippingInfoUpdateWithWhereUniqueWithoutTambonInput[]
    updateMany?: ShippingInfoUpdateManyWithWhereWithoutTambonInput | ShippingInfoUpdateManyWithWhereWithoutTambonInput[]
    deleteMany?: ShippingInfoScalarWhereInput | ShippingInfoScalarWhereInput[]
  }

  export type ShippingInfoUncheckedUpdateManyWithoutTambonNestedInput = {
    create?: XOR<ShippingInfoCreateWithoutTambonInput, ShippingInfoUncheckedCreateWithoutTambonInput> | ShippingInfoCreateWithoutTambonInput[] | ShippingInfoUncheckedCreateWithoutTambonInput[]
    connectOrCreate?: ShippingInfoCreateOrConnectWithoutTambonInput | ShippingInfoCreateOrConnectWithoutTambonInput[]
    upsert?: ShippingInfoUpsertWithWhereUniqueWithoutTambonInput | ShippingInfoUpsertWithWhereUniqueWithoutTambonInput[]
    createMany?: ShippingInfoCreateManyTambonInputEnvelope
    set?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    disconnect?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    delete?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    connect?: ShippingInfoWhereUniqueInput | ShippingInfoWhereUniqueInput[]
    update?: ShippingInfoUpdateWithWhereUniqueWithoutTambonInput | ShippingInfoUpdateWithWhereUniqueWithoutTambonInput[]
    updateMany?: ShippingInfoUpdateManyWithWhereWithoutTambonInput | ShippingInfoUpdateManyWithWhereWithoutTambonInput[]
    deleteMany?: ShippingInfoScalarWhereInput | ShippingInfoScalarWhereInput[]
  }

  export type CustomerInfoCreateNestedOneWithoutOrderInput = {
    create?: XOR<CustomerInfoCreateWithoutOrderInput, CustomerInfoUncheckedCreateWithoutOrderInput>
    connectOrCreate?: CustomerInfoCreateOrConnectWithoutOrderInput
    connect?: CustomerInfoWhereUniqueInput
  }

  export type OrderItemCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type PaymentInfoCreateNestedOneWithoutOrderInput = {
    create?: XOR<PaymentInfoCreateWithoutOrderInput, PaymentInfoUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PaymentInfoCreateOrConnectWithoutOrderInput
    connect?: PaymentInfoWhereUniqueInput
  }

  export type ShippingInfoCreateNestedOneWithoutOrderInput = {
    create?: XOR<ShippingInfoCreateWithoutOrderInput, ShippingInfoUncheckedCreateWithoutOrderInput>
    connectOrCreate?: ShippingInfoCreateOrConnectWithoutOrderInput
    connect?: ShippingInfoWhereUniqueInput
  }

  export type CustomerInfoUncheckedCreateNestedOneWithoutOrderInput = {
    create?: XOR<CustomerInfoCreateWithoutOrderInput, CustomerInfoUncheckedCreateWithoutOrderInput>
    connectOrCreate?: CustomerInfoCreateOrConnectWithoutOrderInput
    connect?: CustomerInfoWhereUniqueInput
  }

  export type OrderItemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type PaymentInfoUncheckedCreateNestedOneWithoutOrderInput = {
    create?: XOR<PaymentInfoCreateWithoutOrderInput, PaymentInfoUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PaymentInfoCreateOrConnectWithoutOrderInput
    connect?: PaymentInfoWhereUniqueInput
  }

  export type ShippingInfoUncheckedCreateNestedOneWithoutOrderInput = {
    create?: XOR<ShippingInfoCreateWithoutOrderInput, ShippingInfoUncheckedCreateWithoutOrderInput>
    connectOrCreate?: ShippingInfoCreateOrConnectWithoutOrderInput
    connect?: ShippingInfoWhereUniqueInput
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CustomerInfoUpdateOneWithoutOrderNestedInput = {
    create?: XOR<CustomerInfoCreateWithoutOrderInput, CustomerInfoUncheckedCreateWithoutOrderInput>
    connectOrCreate?: CustomerInfoCreateOrConnectWithoutOrderInput
    upsert?: CustomerInfoUpsertWithoutOrderInput
    disconnect?: CustomerInfoWhereInput | boolean
    delete?: CustomerInfoWhereInput | boolean
    connect?: CustomerInfoWhereUniqueInput
    update?: XOR<XOR<CustomerInfoUpdateToOneWithWhereWithoutOrderInput, CustomerInfoUpdateWithoutOrderInput>, CustomerInfoUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type PaymentInfoUpdateOneWithoutOrderNestedInput = {
    create?: XOR<PaymentInfoCreateWithoutOrderInput, PaymentInfoUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PaymentInfoCreateOrConnectWithoutOrderInput
    upsert?: PaymentInfoUpsertWithoutOrderInput
    disconnect?: PaymentInfoWhereInput | boolean
    delete?: PaymentInfoWhereInput | boolean
    connect?: PaymentInfoWhereUniqueInput
    update?: XOR<XOR<PaymentInfoUpdateToOneWithWhereWithoutOrderInput, PaymentInfoUpdateWithoutOrderInput>, PaymentInfoUncheckedUpdateWithoutOrderInput>
  }

  export type ShippingInfoUpdateOneWithoutOrderNestedInput = {
    create?: XOR<ShippingInfoCreateWithoutOrderInput, ShippingInfoUncheckedCreateWithoutOrderInput>
    connectOrCreate?: ShippingInfoCreateOrConnectWithoutOrderInput
    upsert?: ShippingInfoUpsertWithoutOrderInput
    disconnect?: ShippingInfoWhereInput | boolean
    delete?: ShippingInfoWhereInput | boolean
    connect?: ShippingInfoWhereUniqueInput
    update?: XOR<XOR<ShippingInfoUpdateToOneWithWhereWithoutOrderInput, ShippingInfoUpdateWithoutOrderInput>, ShippingInfoUncheckedUpdateWithoutOrderInput>
  }

  export type CustomerInfoUncheckedUpdateOneWithoutOrderNestedInput = {
    create?: XOR<CustomerInfoCreateWithoutOrderInput, CustomerInfoUncheckedCreateWithoutOrderInput>
    connectOrCreate?: CustomerInfoCreateOrConnectWithoutOrderInput
    upsert?: CustomerInfoUpsertWithoutOrderInput
    disconnect?: CustomerInfoWhereInput | boolean
    delete?: CustomerInfoWhereInput | boolean
    connect?: CustomerInfoWhereUniqueInput
    update?: XOR<XOR<CustomerInfoUpdateToOneWithWhereWithoutOrderInput, CustomerInfoUpdateWithoutOrderInput>, CustomerInfoUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type PaymentInfoUncheckedUpdateOneWithoutOrderNestedInput = {
    create?: XOR<PaymentInfoCreateWithoutOrderInput, PaymentInfoUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PaymentInfoCreateOrConnectWithoutOrderInput
    upsert?: PaymentInfoUpsertWithoutOrderInput
    disconnect?: PaymentInfoWhereInput | boolean
    delete?: PaymentInfoWhereInput | boolean
    connect?: PaymentInfoWhereUniqueInput
    update?: XOR<XOR<PaymentInfoUpdateToOneWithWhereWithoutOrderInput, PaymentInfoUpdateWithoutOrderInput>, PaymentInfoUncheckedUpdateWithoutOrderInput>
  }

  export type ShippingInfoUncheckedUpdateOneWithoutOrderNestedInput = {
    create?: XOR<ShippingInfoCreateWithoutOrderInput, ShippingInfoUncheckedCreateWithoutOrderInput>
    connectOrCreate?: ShippingInfoCreateOrConnectWithoutOrderInput
    upsert?: ShippingInfoUpsertWithoutOrderInput
    disconnect?: ShippingInfoWhereInput | boolean
    delete?: ShippingInfoWhereInput | boolean
    connect?: ShippingInfoWhereUniqueInput
    update?: XOR<XOR<ShippingInfoUpdateToOneWithWhereWithoutOrderInput, ShippingInfoUpdateWithoutOrderInput>, ShippingInfoUncheckedUpdateWithoutOrderInput>
  }

  export type OrderCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderItemsInput
    connect?: OrderWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrderItemsInput
    connect?: ProductWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutOrderItemsNestedInput = {
    create?: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderItemsInput
    upsert?: OrderUpsertWithoutOrderItemsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutOrderItemsInput, OrderUpdateWithoutOrderItemsInput>, OrderUncheckedUpdateWithoutOrderItemsInput>
  }

  export type ProductUpdateOneRequiredWithoutOrderItemsNestedInput = {
    create?: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrderItemsInput
    upsert?: ProductUpsertWithoutOrderItemsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutOrderItemsInput, ProductUpdateWithoutOrderItemsInput>, ProductUncheckedUpdateWithoutOrderItemsInput>
  }

  export type OrderCreateNestedOneWithoutCustomerInfoInput = {
    create?: XOR<OrderCreateWithoutCustomerInfoInput, OrderUncheckedCreateWithoutCustomerInfoInput>
    connectOrCreate?: OrderCreateOrConnectWithoutCustomerInfoInput
    connect?: OrderWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutCustomerInfoNestedInput = {
    create?: XOR<OrderCreateWithoutCustomerInfoInput, OrderUncheckedCreateWithoutCustomerInfoInput>
    connectOrCreate?: OrderCreateOrConnectWithoutCustomerInfoInput
    upsert?: OrderUpsertWithoutCustomerInfoInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutCustomerInfoInput, OrderUpdateWithoutCustomerInfoInput>, OrderUncheckedUpdateWithoutCustomerInfoInput>
  }

  export type thaiamphuresCreateNestedOneWithoutShippingAddressesInput = {
    create?: XOR<thaiamphuresCreateWithoutShippingAddressesInput, thaiamphuresUncheckedCreateWithoutShippingAddressesInput>
    connectOrCreate?: thaiamphuresCreateOrConnectWithoutShippingAddressesInput
    connect?: thaiamphuresWhereUniqueInput
  }

  export type OrderCreateNestedOneWithoutShippingInfoInput = {
    create?: XOR<OrderCreateWithoutShippingInfoInput, OrderUncheckedCreateWithoutShippingInfoInput>
    connectOrCreate?: OrderCreateOrConnectWithoutShippingInfoInput
    connect?: OrderWhereUniqueInput
  }

  export type thaiprovincesCreateNestedOneWithoutShippingAddressesInput = {
    create?: XOR<thaiprovincesCreateWithoutShippingAddressesInput, thaiprovincesUncheckedCreateWithoutShippingAddressesInput>
    connectOrCreate?: thaiprovincesCreateOrConnectWithoutShippingAddressesInput
    connect?: thaiprovincesWhereUniqueInput
  }

  export type thaitambonsCreateNestedOneWithoutShippingAddressesInput = {
    create?: XOR<thaitambonsCreateWithoutShippingAddressesInput, thaitambonsUncheckedCreateWithoutShippingAddressesInput>
    connectOrCreate?: thaitambonsCreateOrConnectWithoutShippingAddressesInput
    connect?: thaitambonsWhereUniqueInput
  }

  export type thaiamphuresUpdateOneRequiredWithoutShippingAddressesNestedInput = {
    create?: XOR<thaiamphuresCreateWithoutShippingAddressesInput, thaiamphuresUncheckedCreateWithoutShippingAddressesInput>
    connectOrCreate?: thaiamphuresCreateOrConnectWithoutShippingAddressesInput
    upsert?: thaiamphuresUpsertWithoutShippingAddressesInput
    connect?: thaiamphuresWhereUniqueInput
    update?: XOR<XOR<thaiamphuresUpdateToOneWithWhereWithoutShippingAddressesInput, thaiamphuresUpdateWithoutShippingAddressesInput>, thaiamphuresUncheckedUpdateWithoutShippingAddressesInput>
  }

  export type OrderUpdateOneRequiredWithoutShippingInfoNestedInput = {
    create?: XOR<OrderCreateWithoutShippingInfoInput, OrderUncheckedCreateWithoutShippingInfoInput>
    connectOrCreate?: OrderCreateOrConnectWithoutShippingInfoInput
    upsert?: OrderUpsertWithoutShippingInfoInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutShippingInfoInput, OrderUpdateWithoutShippingInfoInput>, OrderUncheckedUpdateWithoutShippingInfoInput>
  }

  export type thaiprovincesUpdateOneRequiredWithoutShippingAddressesNestedInput = {
    create?: XOR<thaiprovincesCreateWithoutShippingAddressesInput, thaiprovincesUncheckedCreateWithoutShippingAddressesInput>
    connectOrCreate?: thaiprovincesCreateOrConnectWithoutShippingAddressesInput
    upsert?: thaiprovincesUpsertWithoutShippingAddressesInput
    connect?: thaiprovincesWhereUniqueInput
    update?: XOR<XOR<thaiprovincesUpdateToOneWithWhereWithoutShippingAddressesInput, thaiprovincesUpdateWithoutShippingAddressesInput>, thaiprovincesUncheckedUpdateWithoutShippingAddressesInput>
  }

  export type thaitambonsUpdateOneRequiredWithoutShippingAddressesNestedInput = {
    create?: XOR<thaitambonsCreateWithoutShippingAddressesInput, thaitambonsUncheckedCreateWithoutShippingAddressesInput>
    connectOrCreate?: thaitambonsCreateOrConnectWithoutShippingAddressesInput
    upsert?: thaitambonsUpsertWithoutShippingAddressesInput
    connect?: thaitambonsWhereUniqueInput
    update?: XOR<XOR<thaitambonsUpdateToOneWithWhereWithoutShippingAddressesInput, thaitambonsUpdateWithoutShippingAddressesInput>, thaitambonsUncheckedUpdateWithoutShippingAddressesInput>
  }

  export type OrderCreateNestedOneWithoutPaymentInfoInput = {
    create?: XOR<OrderCreateWithoutPaymentInfoInput, OrderUncheckedCreateWithoutPaymentInfoInput>
    connectOrCreate?: OrderCreateOrConnectWithoutPaymentInfoInput
    connect?: OrderWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutPaymentInfoNestedInput = {
    create?: XOR<OrderCreateWithoutPaymentInfoInput, OrderUncheckedCreateWithoutPaymentInfoInput>
    connectOrCreate?: OrderCreateOrConnectWithoutPaymentInfoInput
    upsert?: OrderUpsertWithoutPaymentInfoInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutPaymentInfoInput, OrderUpdateWithoutPaymentInfoInput>, OrderUncheckedUpdateWithoutPaymentInfoInput>
  }

  export type PasswordResetCreateNestedOneWithoutUserInput = {
    create?: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput>
    connectOrCreate?: PasswordResetCreateOrConnectWithoutUserInput
    connect?: PasswordResetWhereUniqueInput
  }

  export type PasswordResetUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput>
    connectOrCreate?: PasswordResetCreateOrConnectWithoutUserInput
    connect?: PasswordResetWhereUniqueInput
  }

  export type Enumusers_isAdminFieldUpdateOperationsInput = {
    set?: $Enums.users_isAdmin
  }

  export type PasswordResetUpdateOneWithoutUserNestedInput = {
    create?: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput>
    connectOrCreate?: PasswordResetCreateOrConnectWithoutUserInput
    upsert?: PasswordResetUpsertWithoutUserInput
    disconnect?: PasswordResetWhereInput | boolean
    delete?: PasswordResetWhereInput | boolean
    connect?: PasswordResetWhereUniqueInput
    update?: XOR<XOR<PasswordResetUpdateToOneWithWhereWithoutUserInput, PasswordResetUpdateWithoutUserInput>, PasswordResetUncheckedUpdateWithoutUserInput>
  }

  export type PasswordResetUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput>
    connectOrCreate?: PasswordResetCreateOrConnectWithoutUserInput
    upsert?: PasswordResetUpsertWithoutUserInput
    disconnect?: PasswordResetWhereInput | boolean
    delete?: PasswordResetWhereInput | boolean
    connect?: PasswordResetWhereUniqueInput
    update?: XOR<XOR<PasswordResetUpdateToOneWithWhereWithoutUserInput, PasswordResetUpdateWithoutUserInput>, PasswordResetUncheckedUpdateWithoutUserInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type usersCreateNestedOneWithoutPasswordResetInput = {
    create?: XOR<usersCreateWithoutPasswordResetInput, usersUncheckedCreateWithoutPasswordResetInput>
    connectOrCreate?: usersCreateOrConnectWithoutPasswordResetInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutPasswordResetNestedInput = {
    create?: XOR<usersCreateWithoutPasswordResetInput, usersUncheckedCreateWithoutPasswordResetInput>
    connectOrCreate?: usersCreateOrConnectWithoutPasswordResetInput
    upsert?: usersUpsertWithoutPasswordResetInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutPasswordResetInput, usersUpdateWithoutPasswordResetInput>, usersUncheckedUpdateWithoutPasswordResetInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[]
    notIn?: $Enums.OrderStatus[]
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[]
    notIn?: $Enums.OrderStatus[]
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumusers_isAdminFilter<$PrismaModel = never> = {
    equals?: $Enums.users_isAdmin | Enumusers_isAdminFieldRefInput<$PrismaModel>
    in?: $Enums.users_isAdmin[]
    notIn?: $Enums.users_isAdmin[]
    not?: NestedEnumusers_isAdminFilter<$PrismaModel> | $Enums.users_isAdmin
  }

  export type NestedEnumusers_isAdminWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.users_isAdmin | Enumusers_isAdminFieldRefInput<$PrismaModel>
    in?: $Enums.users_isAdmin[]
    notIn?: $Enums.users_isAdmin[]
    not?: NestedEnumusers_isAdminWithAggregatesFilter<$PrismaModel> | $Enums.users_isAdmin
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumusers_isAdminFilter<$PrismaModel>
    _max?: NestedEnumusers_isAdminFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type OrderItemCreateWithoutProductInput = {
    productName: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    productImg?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    order: OrderCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutProductInput = {
    id?: number
    orderId: number
    productName: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    productImg?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderItemCreateOrConnectWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput>
  }

  export type OrderItemCreateManyProductInputEnvelope = {
    data: OrderItemCreateManyProductInput | OrderItemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type OrderItemUpsertWithWhereUniqueWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutProductInput, OrderItemUncheckedUpdateWithoutProductInput>
    create: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutProductInput, OrderItemUncheckedUpdateWithoutProductInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutProductInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutProductInput>
  }

  export type OrderItemScalarWhereInput = {
    AND?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    OR?: OrderItemScalarWhereInput[]
    NOT?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    id?: IntFilter<"OrderItem"> | number
    orderId?: IntFilter<"OrderItem"> | number
    productId?: IntFilter<"OrderItem"> | number
    productName?: StringFilter<"OrderItem"> | string
    quantity?: IntFilter<"OrderItem"> | number
    unitPrice?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    productImg?: StringNullableFilter<"OrderItem"> | string | null
    createdAt?: DateTimeFilter<"OrderItem"> | Date | string
    updatedAt?: DateTimeFilter<"OrderItem"> | Date | string
  }

  export type ShippingInfoCreateWithoutAmphureInput = {
    receiverName: string
    receiverLastname: string
    receiverPhone: string
    addressLine: string
    addressLine2?: string | null
    provinceName: string
    amphureName: string
    tambonName: string
    zipCode: string
    deliveryDate?: Date | string | null
    deliveryTime?: string | null
    cardMessage?: string | null
    additionalNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    order: OrderCreateNestedOneWithoutShippingInfoInput
    province: thaiprovincesCreateNestedOneWithoutShippingAddressesInput
    tambon: thaitambonsCreateNestedOneWithoutShippingAddressesInput
  }

  export type ShippingInfoUncheckedCreateWithoutAmphureInput = {
    id?: number
    orderId: number
    receiverName: string
    receiverLastname: string
    receiverPhone: string
    addressLine: string
    addressLine2?: string | null
    provinceId: number
    provinceName: string
    amphureName: string
    tambonId: number
    tambonName: string
    zipCode: string
    deliveryDate?: Date | string | null
    deliveryTime?: string | null
    cardMessage?: string | null
    additionalNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShippingInfoCreateOrConnectWithoutAmphureInput = {
    where: ShippingInfoWhereUniqueInput
    create: XOR<ShippingInfoCreateWithoutAmphureInput, ShippingInfoUncheckedCreateWithoutAmphureInput>
  }

  export type ShippingInfoCreateManyAmphureInputEnvelope = {
    data: ShippingInfoCreateManyAmphureInput | ShippingInfoCreateManyAmphureInput[]
    skipDuplicates?: boolean
  }

  export type ShippingInfoUpsertWithWhereUniqueWithoutAmphureInput = {
    where: ShippingInfoWhereUniqueInput
    update: XOR<ShippingInfoUpdateWithoutAmphureInput, ShippingInfoUncheckedUpdateWithoutAmphureInput>
    create: XOR<ShippingInfoCreateWithoutAmphureInput, ShippingInfoUncheckedCreateWithoutAmphureInput>
  }

  export type ShippingInfoUpdateWithWhereUniqueWithoutAmphureInput = {
    where: ShippingInfoWhereUniqueInput
    data: XOR<ShippingInfoUpdateWithoutAmphureInput, ShippingInfoUncheckedUpdateWithoutAmphureInput>
  }

  export type ShippingInfoUpdateManyWithWhereWithoutAmphureInput = {
    where: ShippingInfoScalarWhereInput
    data: XOR<ShippingInfoUpdateManyMutationInput, ShippingInfoUncheckedUpdateManyWithoutAmphureInput>
  }

  export type ShippingInfoScalarWhereInput = {
    AND?: ShippingInfoScalarWhereInput | ShippingInfoScalarWhereInput[]
    OR?: ShippingInfoScalarWhereInput[]
    NOT?: ShippingInfoScalarWhereInput | ShippingInfoScalarWhereInput[]
    id?: IntFilter<"ShippingInfo"> | number
    orderId?: IntFilter<"ShippingInfo"> | number
    receiverName?: StringFilter<"ShippingInfo"> | string
    receiverLastname?: StringFilter<"ShippingInfo"> | string
    receiverPhone?: StringFilter<"ShippingInfo"> | string
    addressLine?: StringFilter<"ShippingInfo"> | string
    addressLine2?: StringNullableFilter<"ShippingInfo"> | string | null
    provinceId?: IntFilter<"ShippingInfo"> | number
    provinceName?: StringFilter<"ShippingInfo"> | string
    amphureId?: IntFilter<"ShippingInfo"> | number
    amphureName?: StringFilter<"ShippingInfo"> | string
    tambonId?: IntFilter<"ShippingInfo"> | number
    tambonName?: StringFilter<"ShippingInfo"> | string
    zipCode?: StringFilter<"ShippingInfo"> | string
    deliveryDate?: DateTimeNullableFilter<"ShippingInfo"> | Date | string | null
    deliveryTime?: StringNullableFilter<"ShippingInfo"> | string | null
    cardMessage?: StringNullableFilter<"ShippingInfo"> | string | null
    additionalNote?: StringNullableFilter<"ShippingInfo"> | string | null
    createdAt?: DateTimeFilter<"ShippingInfo"> | Date | string
    updatedAt?: DateTimeFilter<"ShippingInfo"> | Date | string
  }

  export type ShippingInfoCreateWithoutProvinceInput = {
    receiverName: string
    receiverLastname: string
    receiverPhone: string
    addressLine: string
    addressLine2?: string | null
    provinceName: string
    amphureName: string
    tambonName: string
    zipCode: string
    deliveryDate?: Date | string | null
    deliveryTime?: string | null
    cardMessage?: string | null
    additionalNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    amphure: thaiamphuresCreateNestedOneWithoutShippingAddressesInput
    order: OrderCreateNestedOneWithoutShippingInfoInput
    tambon: thaitambonsCreateNestedOneWithoutShippingAddressesInput
  }

  export type ShippingInfoUncheckedCreateWithoutProvinceInput = {
    id?: number
    orderId: number
    receiverName: string
    receiverLastname: string
    receiverPhone: string
    addressLine: string
    addressLine2?: string | null
    provinceName: string
    amphureId: number
    amphureName: string
    tambonId: number
    tambonName: string
    zipCode: string
    deliveryDate?: Date | string | null
    deliveryTime?: string | null
    cardMessage?: string | null
    additionalNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShippingInfoCreateOrConnectWithoutProvinceInput = {
    where: ShippingInfoWhereUniqueInput
    create: XOR<ShippingInfoCreateWithoutProvinceInput, ShippingInfoUncheckedCreateWithoutProvinceInput>
  }

  export type ShippingInfoCreateManyProvinceInputEnvelope = {
    data: ShippingInfoCreateManyProvinceInput | ShippingInfoCreateManyProvinceInput[]
    skipDuplicates?: boolean
  }

  export type ShippingInfoUpsertWithWhereUniqueWithoutProvinceInput = {
    where: ShippingInfoWhereUniqueInput
    update: XOR<ShippingInfoUpdateWithoutProvinceInput, ShippingInfoUncheckedUpdateWithoutProvinceInput>
    create: XOR<ShippingInfoCreateWithoutProvinceInput, ShippingInfoUncheckedCreateWithoutProvinceInput>
  }

  export type ShippingInfoUpdateWithWhereUniqueWithoutProvinceInput = {
    where: ShippingInfoWhereUniqueInput
    data: XOR<ShippingInfoUpdateWithoutProvinceInput, ShippingInfoUncheckedUpdateWithoutProvinceInput>
  }

  export type ShippingInfoUpdateManyWithWhereWithoutProvinceInput = {
    where: ShippingInfoScalarWhereInput
    data: XOR<ShippingInfoUpdateManyMutationInput, ShippingInfoUncheckedUpdateManyWithoutProvinceInput>
  }

  export type ShippingInfoCreateWithoutTambonInput = {
    receiverName: string
    receiverLastname: string
    receiverPhone: string
    addressLine: string
    addressLine2?: string | null
    provinceName: string
    amphureName: string
    tambonName: string
    zipCode: string
    deliveryDate?: Date | string | null
    deliveryTime?: string | null
    cardMessage?: string | null
    additionalNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    amphure: thaiamphuresCreateNestedOneWithoutShippingAddressesInput
    order: OrderCreateNestedOneWithoutShippingInfoInput
    province: thaiprovincesCreateNestedOneWithoutShippingAddressesInput
  }

  export type ShippingInfoUncheckedCreateWithoutTambonInput = {
    id?: number
    orderId: number
    receiverName: string
    receiverLastname: string
    receiverPhone: string
    addressLine: string
    addressLine2?: string | null
    provinceId: number
    provinceName: string
    amphureId: number
    amphureName: string
    tambonName: string
    zipCode: string
    deliveryDate?: Date | string | null
    deliveryTime?: string | null
    cardMessage?: string | null
    additionalNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShippingInfoCreateOrConnectWithoutTambonInput = {
    where: ShippingInfoWhereUniqueInput
    create: XOR<ShippingInfoCreateWithoutTambonInput, ShippingInfoUncheckedCreateWithoutTambonInput>
  }

  export type ShippingInfoCreateManyTambonInputEnvelope = {
    data: ShippingInfoCreateManyTambonInput | ShippingInfoCreateManyTambonInput[]
    skipDuplicates?: boolean
  }

  export type ShippingInfoUpsertWithWhereUniqueWithoutTambonInput = {
    where: ShippingInfoWhereUniqueInput
    update: XOR<ShippingInfoUpdateWithoutTambonInput, ShippingInfoUncheckedUpdateWithoutTambonInput>
    create: XOR<ShippingInfoCreateWithoutTambonInput, ShippingInfoUncheckedCreateWithoutTambonInput>
  }

  export type ShippingInfoUpdateWithWhereUniqueWithoutTambonInput = {
    where: ShippingInfoWhereUniqueInput
    data: XOR<ShippingInfoUpdateWithoutTambonInput, ShippingInfoUncheckedUpdateWithoutTambonInput>
  }

  export type ShippingInfoUpdateManyWithWhereWithoutTambonInput = {
    where: ShippingInfoScalarWhereInput
    data: XOR<ShippingInfoUpdateManyMutationInput, ShippingInfoUncheckedUpdateManyWithoutTambonInput>
  }

  export type CustomerInfoCreateWithoutOrderInput = {
    firstName: string
    lastName: string
    email: string
    phone: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerInfoUncheckedCreateWithoutOrderInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    phone: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerInfoCreateOrConnectWithoutOrderInput = {
    where: CustomerInfoWhereUniqueInput
    create: XOR<CustomerInfoCreateWithoutOrderInput, CustomerInfoUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemCreateWithoutOrderInput = {
    productName: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    productImg?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutOrderInput = {
    id?: number
    productId: number
    productName: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    productImg?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderItemCreateOrConnectWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemCreateManyOrderInputEnvelope = {
    data: OrderItemCreateManyOrderInput | OrderItemCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type PaymentInfoCreateWithoutOrderInput = {
    paymentMethod?: $Enums.PaymentMethod
    paymentDate?: Date | string | null
    transactionId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    bankName?: string | null
    slipUrl?: string | null
    status?: $Enums.PaymentStatus
    verifiedBy?: number | null
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentInfoUncheckedCreateWithoutOrderInput = {
    id?: number
    paymentMethod?: $Enums.PaymentMethod
    paymentDate?: Date | string | null
    transactionId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    bankName?: string | null
    slipUrl?: string | null
    status?: $Enums.PaymentStatus
    verifiedBy?: number | null
    verifiedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentInfoCreateOrConnectWithoutOrderInput = {
    where: PaymentInfoWhereUniqueInput
    create: XOR<PaymentInfoCreateWithoutOrderInput, PaymentInfoUncheckedCreateWithoutOrderInput>
  }

  export type ShippingInfoCreateWithoutOrderInput = {
    receiverName: string
    receiverLastname: string
    receiverPhone: string
    addressLine: string
    addressLine2?: string | null
    provinceName: string
    amphureName: string
    tambonName: string
    zipCode: string
    deliveryDate?: Date | string | null
    deliveryTime?: string | null
    cardMessage?: string | null
    additionalNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    amphure: thaiamphuresCreateNestedOneWithoutShippingAddressesInput
    province: thaiprovincesCreateNestedOneWithoutShippingAddressesInput
    tambon: thaitambonsCreateNestedOneWithoutShippingAddressesInput
  }

  export type ShippingInfoUncheckedCreateWithoutOrderInput = {
    id?: number
    receiverName: string
    receiverLastname: string
    receiverPhone: string
    addressLine: string
    addressLine2?: string | null
    provinceId: number
    provinceName: string
    amphureId: number
    amphureName: string
    tambonId: number
    tambonName: string
    zipCode: string
    deliveryDate?: Date | string | null
    deliveryTime?: string | null
    cardMessage?: string | null
    additionalNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShippingInfoCreateOrConnectWithoutOrderInput = {
    where: ShippingInfoWhereUniqueInput
    create: XOR<ShippingInfoCreateWithoutOrderInput, ShippingInfoUncheckedCreateWithoutOrderInput>
  }

  export type CustomerInfoUpsertWithoutOrderInput = {
    update: XOR<CustomerInfoUpdateWithoutOrderInput, CustomerInfoUncheckedUpdateWithoutOrderInput>
    create: XOR<CustomerInfoCreateWithoutOrderInput, CustomerInfoUncheckedCreateWithoutOrderInput>
    where?: CustomerInfoWhereInput
  }

  export type CustomerInfoUpdateToOneWithWhereWithoutOrderInput = {
    where?: CustomerInfoWhereInput
    data: XOR<CustomerInfoUpdateWithoutOrderInput, CustomerInfoUncheckedUpdateWithoutOrderInput>
  }

  export type CustomerInfoUpdateWithoutOrderInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerInfoUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutOrderInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutOrderInput>
  }

  export type PaymentInfoUpsertWithoutOrderInput = {
    update: XOR<PaymentInfoUpdateWithoutOrderInput, PaymentInfoUncheckedUpdateWithoutOrderInput>
    create: XOR<PaymentInfoCreateWithoutOrderInput, PaymentInfoUncheckedCreateWithoutOrderInput>
    where?: PaymentInfoWhereInput
  }

  export type PaymentInfoUpdateToOneWithWhereWithoutOrderInput = {
    where?: PaymentInfoWhereInput
    data: XOR<PaymentInfoUpdateWithoutOrderInput, PaymentInfoUncheckedUpdateWithoutOrderInput>
  }

  export type PaymentInfoUpdateWithoutOrderInput = {
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    slipUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    verifiedBy?: NullableIntFieldUpdateOperationsInput | number | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentInfoUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    slipUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    verifiedBy?: NullableIntFieldUpdateOperationsInput | number | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShippingInfoUpsertWithoutOrderInput = {
    update: XOR<ShippingInfoUpdateWithoutOrderInput, ShippingInfoUncheckedUpdateWithoutOrderInput>
    create: XOR<ShippingInfoCreateWithoutOrderInput, ShippingInfoUncheckedCreateWithoutOrderInput>
    where?: ShippingInfoWhereInput
  }

  export type ShippingInfoUpdateToOneWithWhereWithoutOrderInput = {
    where?: ShippingInfoWhereInput
    data: XOR<ShippingInfoUpdateWithoutOrderInput, ShippingInfoUncheckedUpdateWithoutOrderInput>
  }

  export type ShippingInfoUpdateWithoutOrderInput = {
    receiverName?: StringFieldUpdateOperationsInput | string
    receiverLastname?: StringFieldUpdateOperationsInput | string
    receiverPhone?: StringFieldUpdateOperationsInput | string
    addressLine?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    provinceName?: StringFieldUpdateOperationsInput | string
    amphureName?: StringFieldUpdateOperationsInput | string
    tambonName?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amphure?: thaiamphuresUpdateOneRequiredWithoutShippingAddressesNestedInput
    province?: thaiprovincesUpdateOneRequiredWithoutShippingAddressesNestedInput
    tambon?: thaitambonsUpdateOneRequiredWithoutShippingAddressesNestedInput
  }

  export type ShippingInfoUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    receiverName?: StringFieldUpdateOperationsInput | string
    receiverLastname?: StringFieldUpdateOperationsInput | string
    receiverPhone?: StringFieldUpdateOperationsInput | string
    addressLine?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    provinceId?: IntFieldUpdateOperationsInput | number
    provinceName?: StringFieldUpdateOperationsInput | string
    amphureId?: IntFieldUpdateOperationsInput | number
    amphureName?: StringFieldUpdateOperationsInput | string
    tambonId?: IntFieldUpdateOperationsInput | number
    tambonName?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateWithoutOrderItemsInput = {
    orderNumber: string
    userId?: number | null
    status?: $Enums.OrderStatus
    totalAmount: Decimal | DecimalJsLike | number | string
    shippingCost: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    discountCode?: string | null
    finalAmount: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    stripeSessionId?: string | null
    stripePaymentMethodType?: string | null
    customerInfo?: CustomerInfoCreateNestedOneWithoutOrderInput
    paymentInfo?: PaymentInfoCreateNestedOneWithoutOrderInput
    shippingInfo?: ShippingInfoCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutOrderItemsInput = {
    id?: number
    orderNumber: string
    userId?: number | null
    status?: $Enums.OrderStatus
    totalAmount: Decimal | DecimalJsLike | number | string
    shippingCost: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    discountCode?: string | null
    finalAmount: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    stripeSessionId?: string | null
    stripePaymentMethodType?: string | null
    customerInfo?: CustomerInfoUncheckedCreateNestedOneWithoutOrderInput
    paymentInfo?: PaymentInfoUncheckedCreateNestedOneWithoutOrderInput
    shippingInfo?: ShippingInfoUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutOrderItemsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
  }

  export type ProductCreateWithoutOrderItemsInput = {
    sku?: string | null
    productImg?: string | null
    productName?: string | null
    slug?: string | null
    productDesc?: string | null
    salesPrice?: Decimal | DecimalJsLike | number | string | null
    originalPrice?: Decimal | DecimalJsLike | number | string | null
    discount?: number | null
    potSize?: string | null
    plantHeight?: string | null
    preparationTime?: string | null
    stock?: number | null
    stockStatus?: string | null
    category?: string | null
    categoryId?: number | null
    productStatus?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ProductUncheckedCreateWithoutOrderItemsInput = {
    id?: number
    sku?: string | null
    productImg?: string | null
    productName?: string | null
    slug?: string | null
    productDesc?: string | null
    salesPrice?: Decimal | DecimalJsLike | number | string | null
    originalPrice?: Decimal | DecimalJsLike | number | string | null
    discount?: number | null
    potSize?: string | null
    plantHeight?: string | null
    preparationTime?: string | null
    stock?: number | null
    stockStatus?: string | null
    category?: string | null
    categoryId?: number | null
    productStatus?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type ProductCreateOrConnectWithoutOrderItemsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
  }

  export type OrderUpsertWithoutOrderItemsInput = {
    update: XOR<OrderUpdateWithoutOrderItemsInput, OrderUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutOrderItemsInput, OrderUncheckedUpdateWithoutOrderItemsInput>
  }

  export type OrderUpdateWithoutOrderItemsInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shippingCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountCode?: NullableStringFieldUpdateOperationsInput | string | null
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentMethodType?: NullableStringFieldUpdateOperationsInput | string | null
    customerInfo?: CustomerInfoUpdateOneWithoutOrderNestedInput
    paymentInfo?: PaymentInfoUpdateOneWithoutOrderNestedInput
    shippingInfo?: ShippingInfoUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutOrderItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shippingCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountCode?: NullableStringFieldUpdateOperationsInput | string | null
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentMethodType?: NullableStringFieldUpdateOperationsInput | string | null
    customerInfo?: CustomerInfoUncheckedUpdateOneWithoutOrderNestedInput
    paymentInfo?: PaymentInfoUncheckedUpdateOneWithoutOrderNestedInput
    shippingInfo?: ShippingInfoUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type ProductUpsertWithoutOrderItemsInput = {
    update: XOR<ProductUpdateWithoutOrderItemsInput, ProductUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutOrderItemsInput, ProductUncheckedUpdateWithoutOrderItemsInput>
  }

  export type ProductUpdateWithoutOrderItemsInput = {
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    productImg?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    productDesc?: NullableStringFieldUpdateOperationsInput | string | null
    salesPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    originalPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount?: NullableIntFieldUpdateOperationsInput | number | null
    potSize?: NullableStringFieldUpdateOperationsInput | string | null
    plantHeight?: NullableStringFieldUpdateOperationsInput | string | null
    preparationTime?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    stockStatus?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    productStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductUncheckedUpdateWithoutOrderItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    productImg?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    productDesc?: NullableStringFieldUpdateOperationsInput | string | null
    salesPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    originalPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discount?: NullableIntFieldUpdateOperationsInput | number | null
    potSize?: NullableStringFieldUpdateOperationsInput | string | null
    plantHeight?: NullableStringFieldUpdateOperationsInput | string | null
    preparationTime?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    stockStatus?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    productStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderCreateWithoutCustomerInfoInput = {
    orderNumber: string
    userId?: number | null
    status?: $Enums.OrderStatus
    totalAmount: Decimal | DecimalJsLike | number | string
    shippingCost: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    discountCode?: string | null
    finalAmount: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    stripeSessionId?: string | null
    stripePaymentMethodType?: string | null
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
    paymentInfo?: PaymentInfoCreateNestedOneWithoutOrderInput
    shippingInfo?: ShippingInfoCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutCustomerInfoInput = {
    id?: number
    orderNumber: string
    userId?: number | null
    status?: $Enums.OrderStatus
    totalAmount: Decimal | DecimalJsLike | number | string
    shippingCost: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    discountCode?: string | null
    finalAmount: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    stripeSessionId?: string | null
    stripePaymentMethodType?: string | null
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    paymentInfo?: PaymentInfoUncheckedCreateNestedOneWithoutOrderInput
    shippingInfo?: ShippingInfoUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutCustomerInfoInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutCustomerInfoInput, OrderUncheckedCreateWithoutCustomerInfoInput>
  }

  export type OrderUpsertWithoutCustomerInfoInput = {
    update: XOR<OrderUpdateWithoutCustomerInfoInput, OrderUncheckedUpdateWithoutCustomerInfoInput>
    create: XOR<OrderCreateWithoutCustomerInfoInput, OrderUncheckedCreateWithoutCustomerInfoInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutCustomerInfoInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutCustomerInfoInput, OrderUncheckedUpdateWithoutCustomerInfoInput>
  }

  export type OrderUpdateWithoutCustomerInfoInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shippingCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountCode?: NullableStringFieldUpdateOperationsInput | string | null
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentMethodType?: NullableStringFieldUpdateOperationsInput | string | null
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
    paymentInfo?: PaymentInfoUpdateOneWithoutOrderNestedInput
    shippingInfo?: ShippingInfoUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutCustomerInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shippingCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountCode?: NullableStringFieldUpdateOperationsInput | string | null
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentMethodType?: NullableStringFieldUpdateOperationsInput | string | null
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    paymentInfo?: PaymentInfoUncheckedUpdateOneWithoutOrderNestedInput
    shippingInfo?: ShippingInfoUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type thaiamphuresCreateWithoutShippingAddressesInput = {
    id: number
    nameTh: string
    nameEn: string
    provinceId: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type thaiamphuresUncheckedCreateWithoutShippingAddressesInput = {
    id: number
    nameTh: string
    nameEn: string
    provinceId: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type thaiamphuresCreateOrConnectWithoutShippingAddressesInput = {
    where: thaiamphuresWhereUniqueInput
    create: XOR<thaiamphuresCreateWithoutShippingAddressesInput, thaiamphuresUncheckedCreateWithoutShippingAddressesInput>
  }

  export type OrderCreateWithoutShippingInfoInput = {
    orderNumber: string
    userId?: number | null
    status?: $Enums.OrderStatus
    totalAmount: Decimal | DecimalJsLike | number | string
    shippingCost: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    discountCode?: string | null
    finalAmount: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    stripeSessionId?: string | null
    stripePaymentMethodType?: string | null
    customerInfo?: CustomerInfoCreateNestedOneWithoutOrderInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
    paymentInfo?: PaymentInfoCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutShippingInfoInput = {
    id?: number
    orderNumber: string
    userId?: number | null
    status?: $Enums.OrderStatus
    totalAmount: Decimal | DecimalJsLike | number | string
    shippingCost: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    discountCode?: string | null
    finalAmount: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    stripeSessionId?: string | null
    stripePaymentMethodType?: string | null
    customerInfo?: CustomerInfoUncheckedCreateNestedOneWithoutOrderInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    paymentInfo?: PaymentInfoUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutShippingInfoInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutShippingInfoInput, OrderUncheckedCreateWithoutShippingInfoInput>
  }

  export type thaiprovincesCreateWithoutShippingAddressesInput = {
    id: number
    nameTh: string
    nameEn: string
    geographyId: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type thaiprovincesUncheckedCreateWithoutShippingAddressesInput = {
    id: number
    nameTh: string
    nameEn: string
    geographyId: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type thaiprovincesCreateOrConnectWithoutShippingAddressesInput = {
    where: thaiprovincesWhereUniqueInput
    create: XOR<thaiprovincesCreateWithoutShippingAddressesInput, thaiprovincesUncheckedCreateWithoutShippingAddressesInput>
  }

  export type thaitambonsCreateWithoutShippingAddressesInput = {
    id: number
    zipCode: number
    nameTh: string
    nameEn: string
    amphureId: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type thaitambonsUncheckedCreateWithoutShippingAddressesInput = {
    id: number
    zipCode: number
    nameTh: string
    nameEn: string
    amphureId: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type thaitambonsCreateOrConnectWithoutShippingAddressesInput = {
    where: thaitambonsWhereUniqueInput
    create: XOR<thaitambonsCreateWithoutShippingAddressesInput, thaitambonsUncheckedCreateWithoutShippingAddressesInput>
  }

  export type thaiamphuresUpsertWithoutShippingAddressesInput = {
    update: XOR<thaiamphuresUpdateWithoutShippingAddressesInput, thaiamphuresUncheckedUpdateWithoutShippingAddressesInput>
    create: XOR<thaiamphuresCreateWithoutShippingAddressesInput, thaiamphuresUncheckedCreateWithoutShippingAddressesInput>
    where?: thaiamphuresWhereInput
  }

  export type thaiamphuresUpdateToOneWithWhereWithoutShippingAddressesInput = {
    where?: thaiamphuresWhereInput
    data: XOR<thaiamphuresUpdateWithoutShippingAddressesInput, thaiamphuresUncheckedUpdateWithoutShippingAddressesInput>
  }

  export type thaiamphuresUpdateWithoutShippingAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nameTh?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    provinceId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type thaiamphuresUncheckedUpdateWithoutShippingAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nameTh?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    provinceId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderUpsertWithoutShippingInfoInput = {
    update: XOR<OrderUpdateWithoutShippingInfoInput, OrderUncheckedUpdateWithoutShippingInfoInput>
    create: XOR<OrderCreateWithoutShippingInfoInput, OrderUncheckedCreateWithoutShippingInfoInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutShippingInfoInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutShippingInfoInput, OrderUncheckedUpdateWithoutShippingInfoInput>
  }

  export type OrderUpdateWithoutShippingInfoInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shippingCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountCode?: NullableStringFieldUpdateOperationsInput | string | null
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentMethodType?: NullableStringFieldUpdateOperationsInput | string | null
    customerInfo?: CustomerInfoUpdateOneWithoutOrderNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
    paymentInfo?: PaymentInfoUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutShippingInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shippingCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountCode?: NullableStringFieldUpdateOperationsInput | string | null
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentMethodType?: NullableStringFieldUpdateOperationsInput | string | null
    customerInfo?: CustomerInfoUncheckedUpdateOneWithoutOrderNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    paymentInfo?: PaymentInfoUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type thaiprovincesUpsertWithoutShippingAddressesInput = {
    update: XOR<thaiprovincesUpdateWithoutShippingAddressesInput, thaiprovincesUncheckedUpdateWithoutShippingAddressesInput>
    create: XOR<thaiprovincesCreateWithoutShippingAddressesInput, thaiprovincesUncheckedCreateWithoutShippingAddressesInput>
    where?: thaiprovincesWhereInput
  }

  export type thaiprovincesUpdateToOneWithWhereWithoutShippingAddressesInput = {
    where?: thaiprovincesWhereInput
    data: XOR<thaiprovincesUpdateWithoutShippingAddressesInput, thaiprovincesUncheckedUpdateWithoutShippingAddressesInput>
  }

  export type thaiprovincesUpdateWithoutShippingAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nameTh?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    geographyId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type thaiprovincesUncheckedUpdateWithoutShippingAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nameTh?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    geographyId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type thaitambonsUpsertWithoutShippingAddressesInput = {
    update: XOR<thaitambonsUpdateWithoutShippingAddressesInput, thaitambonsUncheckedUpdateWithoutShippingAddressesInput>
    create: XOR<thaitambonsCreateWithoutShippingAddressesInput, thaitambonsUncheckedCreateWithoutShippingAddressesInput>
    where?: thaitambonsWhereInput
  }

  export type thaitambonsUpdateToOneWithWhereWithoutShippingAddressesInput = {
    where?: thaitambonsWhereInput
    data: XOR<thaitambonsUpdateWithoutShippingAddressesInput, thaitambonsUncheckedUpdateWithoutShippingAddressesInput>
  }

  export type thaitambonsUpdateWithoutShippingAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    zipCode?: IntFieldUpdateOperationsInput | number
    nameTh?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    amphureId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type thaitambonsUncheckedUpdateWithoutShippingAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    zipCode?: IntFieldUpdateOperationsInput | number
    nameTh?: StringFieldUpdateOperationsInput | string
    nameEn?: StringFieldUpdateOperationsInput | string
    amphureId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderCreateWithoutPaymentInfoInput = {
    orderNumber: string
    userId?: number | null
    status?: $Enums.OrderStatus
    totalAmount: Decimal | DecimalJsLike | number | string
    shippingCost: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    discountCode?: string | null
    finalAmount: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    stripeSessionId?: string | null
    stripePaymentMethodType?: string | null
    customerInfo?: CustomerInfoCreateNestedOneWithoutOrderInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
    shippingInfo?: ShippingInfoCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutPaymentInfoInput = {
    id?: number
    orderNumber: string
    userId?: number | null
    status?: $Enums.OrderStatus
    totalAmount: Decimal | DecimalJsLike | number | string
    shippingCost: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    discountCode?: string | null
    finalAmount: Decimal | DecimalJsLike | number | string
    paymentMethod?: $Enums.PaymentMethod
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    stripeSessionId?: string | null
    stripePaymentMethodType?: string | null
    customerInfo?: CustomerInfoUncheckedCreateNestedOneWithoutOrderInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    shippingInfo?: ShippingInfoUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutPaymentInfoInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutPaymentInfoInput, OrderUncheckedCreateWithoutPaymentInfoInput>
  }

  export type OrderUpsertWithoutPaymentInfoInput = {
    update: XOR<OrderUpdateWithoutPaymentInfoInput, OrderUncheckedUpdateWithoutPaymentInfoInput>
    create: XOR<OrderCreateWithoutPaymentInfoInput, OrderUncheckedCreateWithoutPaymentInfoInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutPaymentInfoInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutPaymentInfoInput, OrderUncheckedUpdateWithoutPaymentInfoInput>
  }

  export type OrderUpdateWithoutPaymentInfoInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shippingCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountCode?: NullableStringFieldUpdateOperationsInput | string | null
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentMethodType?: NullableStringFieldUpdateOperationsInput | string | null
    customerInfo?: CustomerInfoUpdateOneWithoutOrderNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
    shippingInfo?: ShippingInfoUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutPaymentInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    shippingCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountCode?: NullableStringFieldUpdateOperationsInput | string | null
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentMethodType?: NullableStringFieldUpdateOperationsInput | string | null
    customerInfo?: CustomerInfoUncheckedUpdateOneWithoutOrderNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    shippingInfo?: ShippingInfoUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type PasswordResetCreateWithoutUserInput = {
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PasswordResetUncheckedCreateWithoutUserInput = {
    id?: number
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PasswordResetCreateOrConnectWithoutUserInput = {
    where: PasswordResetWhereUniqueInput
    create: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput>
  }

  export type PasswordResetUpsertWithoutUserInput = {
    update: XOR<PasswordResetUpdateWithoutUserInput, PasswordResetUncheckedUpdateWithoutUserInput>
    create: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput>
    where?: PasswordResetWhereInput
  }

  export type PasswordResetUpdateToOneWithWhereWithoutUserInput = {
    where?: PasswordResetWhereInput
    data: XOR<PasswordResetUpdateWithoutUserInput, PasswordResetUncheckedUpdateWithoutUserInput>
  }

  export type PasswordResetUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersCreateWithoutPasswordResetInput = {
    firstName: string
    lastName: string
    email: string
    isAdmin?: $Enums.users_isAdmin
    emailVerifiedAt?: Date | string | null
    password: string
    rememberToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lineId?: string | null
    avatar?: string | null
  }

  export type usersUncheckedCreateWithoutPasswordResetInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    isAdmin?: $Enums.users_isAdmin
    emailVerifiedAt?: Date | string | null
    password: string
    rememberToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lineId?: string | null
    avatar?: string | null
  }

  export type usersCreateOrConnectWithoutPasswordResetInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutPasswordResetInput, usersUncheckedCreateWithoutPasswordResetInput>
  }

  export type usersUpsertWithoutPasswordResetInput = {
    update: XOR<usersUpdateWithoutPasswordResetInput, usersUncheckedUpdateWithoutPasswordResetInput>
    create: XOR<usersCreateWithoutPasswordResetInput, usersUncheckedCreateWithoutPasswordResetInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutPasswordResetInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutPasswordResetInput, usersUncheckedUpdateWithoutPasswordResetInput>
  }

  export type usersUpdateWithoutPasswordResetInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isAdmin?: Enumusers_isAdminFieldUpdateOperationsInput | $Enums.users_isAdmin
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    rememberToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateWithoutPasswordResetInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isAdmin?: Enumusers_isAdminFieldUpdateOperationsInput | $Enums.users_isAdmin
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    rememberToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lineId?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemCreateManyProductInput = {
    id?: number
    orderId: number
    productName: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    productImg?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderItemUpdateWithoutProductInput = {
    productName?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productImg?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productImg?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productImg?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShippingInfoCreateManyAmphureInput = {
    id?: number
    orderId: number
    receiverName: string
    receiverLastname: string
    receiverPhone: string
    addressLine: string
    addressLine2?: string | null
    provinceId: number
    provinceName: string
    amphureName: string
    tambonId: number
    tambonName: string
    zipCode: string
    deliveryDate?: Date | string | null
    deliveryTime?: string | null
    cardMessage?: string | null
    additionalNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShippingInfoUpdateWithoutAmphureInput = {
    receiverName?: StringFieldUpdateOperationsInput | string
    receiverLastname?: StringFieldUpdateOperationsInput | string
    receiverPhone?: StringFieldUpdateOperationsInput | string
    addressLine?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    provinceName?: StringFieldUpdateOperationsInput | string
    amphureName?: StringFieldUpdateOperationsInput | string
    tambonName?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutShippingInfoNestedInput
    province?: thaiprovincesUpdateOneRequiredWithoutShippingAddressesNestedInput
    tambon?: thaitambonsUpdateOneRequiredWithoutShippingAddressesNestedInput
  }

  export type ShippingInfoUncheckedUpdateWithoutAmphureInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    receiverName?: StringFieldUpdateOperationsInput | string
    receiverLastname?: StringFieldUpdateOperationsInput | string
    receiverPhone?: StringFieldUpdateOperationsInput | string
    addressLine?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    provinceId?: IntFieldUpdateOperationsInput | number
    provinceName?: StringFieldUpdateOperationsInput | string
    amphureName?: StringFieldUpdateOperationsInput | string
    tambonId?: IntFieldUpdateOperationsInput | number
    tambonName?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShippingInfoUncheckedUpdateManyWithoutAmphureInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    receiverName?: StringFieldUpdateOperationsInput | string
    receiverLastname?: StringFieldUpdateOperationsInput | string
    receiverPhone?: StringFieldUpdateOperationsInput | string
    addressLine?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    provinceId?: IntFieldUpdateOperationsInput | number
    provinceName?: StringFieldUpdateOperationsInput | string
    amphureName?: StringFieldUpdateOperationsInput | string
    tambonId?: IntFieldUpdateOperationsInput | number
    tambonName?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShippingInfoCreateManyProvinceInput = {
    id?: number
    orderId: number
    receiverName: string
    receiverLastname: string
    receiverPhone: string
    addressLine: string
    addressLine2?: string | null
    provinceName: string
    amphureId: number
    amphureName: string
    tambonId: number
    tambonName: string
    zipCode: string
    deliveryDate?: Date | string | null
    deliveryTime?: string | null
    cardMessage?: string | null
    additionalNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShippingInfoUpdateWithoutProvinceInput = {
    receiverName?: StringFieldUpdateOperationsInput | string
    receiverLastname?: StringFieldUpdateOperationsInput | string
    receiverPhone?: StringFieldUpdateOperationsInput | string
    addressLine?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    provinceName?: StringFieldUpdateOperationsInput | string
    amphureName?: StringFieldUpdateOperationsInput | string
    tambonName?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amphure?: thaiamphuresUpdateOneRequiredWithoutShippingAddressesNestedInput
    order?: OrderUpdateOneRequiredWithoutShippingInfoNestedInput
    tambon?: thaitambonsUpdateOneRequiredWithoutShippingAddressesNestedInput
  }

  export type ShippingInfoUncheckedUpdateWithoutProvinceInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    receiverName?: StringFieldUpdateOperationsInput | string
    receiverLastname?: StringFieldUpdateOperationsInput | string
    receiverPhone?: StringFieldUpdateOperationsInput | string
    addressLine?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    provinceName?: StringFieldUpdateOperationsInput | string
    amphureId?: IntFieldUpdateOperationsInput | number
    amphureName?: StringFieldUpdateOperationsInput | string
    tambonId?: IntFieldUpdateOperationsInput | number
    tambonName?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShippingInfoUncheckedUpdateManyWithoutProvinceInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    receiverName?: StringFieldUpdateOperationsInput | string
    receiverLastname?: StringFieldUpdateOperationsInput | string
    receiverPhone?: StringFieldUpdateOperationsInput | string
    addressLine?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    provinceName?: StringFieldUpdateOperationsInput | string
    amphureId?: IntFieldUpdateOperationsInput | number
    amphureName?: StringFieldUpdateOperationsInput | string
    tambonId?: IntFieldUpdateOperationsInput | number
    tambonName?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShippingInfoCreateManyTambonInput = {
    id?: number
    orderId: number
    receiverName: string
    receiverLastname: string
    receiverPhone: string
    addressLine: string
    addressLine2?: string | null
    provinceId: number
    provinceName: string
    amphureId: number
    amphureName: string
    tambonName: string
    zipCode: string
    deliveryDate?: Date | string | null
    deliveryTime?: string | null
    cardMessage?: string | null
    additionalNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShippingInfoUpdateWithoutTambonInput = {
    receiverName?: StringFieldUpdateOperationsInput | string
    receiverLastname?: StringFieldUpdateOperationsInput | string
    receiverPhone?: StringFieldUpdateOperationsInput | string
    addressLine?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    provinceName?: StringFieldUpdateOperationsInput | string
    amphureName?: StringFieldUpdateOperationsInput | string
    tambonName?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amphure?: thaiamphuresUpdateOneRequiredWithoutShippingAddressesNestedInput
    order?: OrderUpdateOneRequiredWithoutShippingInfoNestedInput
    province?: thaiprovincesUpdateOneRequiredWithoutShippingAddressesNestedInput
  }

  export type ShippingInfoUncheckedUpdateWithoutTambonInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    receiverName?: StringFieldUpdateOperationsInput | string
    receiverLastname?: StringFieldUpdateOperationsInput | string
    receiverPhone?: StringFieldUpdateOperationsInput | string
    addressLine?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    provinceId?: IntFieldUpdateOperationsInput | number
    provinceName?: StringFieldUpdateOperationsInput | string
    amphureId?: IntFieldUpdateOperationsInput | number
    amphureName?: StringFieldUpdateOperationsInput | string
    tambonName?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShippingInfoUncheckedUpdateManyWithoutTambonInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    receiverName?: StringFieldUpdateOperationsInput | string
    receiverLastname?: StringFieldUpdateOperationsInput | string
    receiverPhone?: StringFieldUpdateOperationsInput | string
    addressLine?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    provinceId?: IntFieldUpdateOperationsInput | number
    provinceName?: StringFieldUpdateOperationsInput | string
    amphureId?: IntFieldUpdateOperationsInput | number
    amphureName?: StringFieldUpdateOperationsInput | string
    tambonName?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    deliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveryTime?: NullableStringFieldUpdateOperationsInput | string | null
    cardMessage?: NullableStringFieldUpdateOperationsInput | string | null
    additionalNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemCreateManyOrderInput = {
    id?: number
    productId: number
    productName: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    productImg?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderItemUpdateWithoutOrderInput = {
    productName?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productImg?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productImg?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productImg?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}