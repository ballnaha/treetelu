
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.6.0
 * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
 */
Prisma.prismaVersion = {
  client: "6.6.0",
  engine: "f676762280b54cd07c770017ed3711ddde35f37a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  categoryName: 'categoryName',
  categoryDesc: 'categoryDesc',
  priority: 'priority',
  status: 'status',
  bestseller: 'bestseller',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  productImg: 'productImg',
  productName: 'productName',
  slug: 'slug',
  productDesc: 'productDesc',
  salesPrice: 'salesPrice',
  originalPrice: 'originalPrice',
  discount: 'discount',
  potSize: 'potSize',
  plantHeight: 'plantHeight',
  preparationTime: 'preparationTime',
  stock: 'stock',
  stockStatus: 'stockStatus',
  category: 'category',
  categoryId: 'categoryId',
  productStatus: 'productStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StatusmasterScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  desc: 'desc',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductimageScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  imageName: 'imageName',
  imageDesc: 'imageDesc',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ThaiamphuresScalarFieldEnum = {
  id: 'id',
  nameTh: 'nameTh',
  nameEn: 'nameEn',
  provinceId: 'provinceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ThaigeographiesScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ThaiprovincesScalarFieldEnum = {
  id: 'id',
  nameTh: 'nameTh',
  nameEn: 'nameEn',
  geographyId: 'geographyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ThaitambonsScalarFieldEnum = {
  id: 'id',
  zipCode: 'zipCode',
  nameTh: 'nameTh',
  nameEn: 'nameEn',
  amphureId: 'amphureId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  userId: 'userId',
  status: 'status',
  totalAmount: 'totalAmount',
  shippingCost: 'shippingCost',
  discount: 'discount',
  discountCode: 'discountCode',
  finalAmount: 'finalAmount',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  adminComment: 'adminComment',
  stripeSessionId: 'stripeSessionId',
  stripePaymentMethodType: 'stripePaymentMethodType'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  productName: 'productName',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  productImg: 'productImg',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerInfoScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  note: 'note',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShippingInfoScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  receiverName: 'receiverName',
  receiverLastname: 'receiverLastname',
  receiverPhone: 'receiverPhone',
  addressLine: 'addressLine',
  addressLine2: 'addressLine2',
  provinceId: 'provinceId',
  provinceName: 'provinceName',
  amphureId: 'amphureId',
  amphureName: 'amphureName',
  tambonId: 'tambonId',
  tambonName: 'tambonName',
  zipCode: 'zipCode',
  deliveryDate: 'deliveryDate',
  deliveryTime: 'deliveryTime',
  cardMessage: 'cardMessage',
  additionalNote: 'additionalNote',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentInfoScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  paymentMethod: 'paymentMethod',
  paymentDate: 'paymentDate',
  transactionId: 'transactionId',
  amount: 'amount',
  bankName: 'bankName',
  slipUrl: 'slipUrl',
  status: 'status',
  verifiedBy: 'verifiedBy',
  verifiedAt: 'verifiedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentConfirmationScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  amount: 'amount',
  bankName: 'bankName',
  slipUrl: 'slipUrl',
  status: 'status',
  notes: 'notes',
  verifiedBy: 'verifiedBy',
  verifiedAt: 'verifiedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  isAdmin: 'isAdmin',
  emailVerifiedAt: 'emailVerifiedAt',
  password: 'password',
  rememberToken: 'rememberToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lineId: 'lineId',
  avatar: 'avatar'
};

exports.Prisma.BlogScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  excerpt: 'excerpt',
  content: 'content',
  image: 'image',
  category: 'category',
  date: 'date',
  published: 'published',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DiscountCodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  type: 'type',
  value: 'value',
  minAmount: 'minAmount',
  maxDiscount: 'maxDiscount',
  description: 'description',
  maxUses: 'maxUses',
  usedCount: 'usedCount',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PasswordResetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PendingPaymentScalarFieldEnum = {
  id: 'id',
  charge_id: 'charge_id',
  amount: 'amount',
  payment_method: 'payment_method',
  status: 'status',
  metadata: 'metadata',
  order_id: 'order_id',
  processed: 'processed',
  processed_at: 'processed_at',
  customer_email: 'customer_email',
  customer_name: 'customer_name',
  customer_phone: 'customer_phone',
  deliveryDate: 'deliveryDate',
  deliveryTime: 'deliveryTime',
  cardMessage: 'cardMessage',
  additionalNote: 'additionalNote',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.NotificationLogScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  type: 'type',
  eventType: 'eventType',
  sent: 'sent',
  transactionId: 'transactionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.CategoryOrderByRelevanceFieldEnum = {
  categoryName: 'categoryName',
  categoryDesc: 'categoryDesc',
  status: 'status',
  bestseller: 'bestseller'
};

exports.Prisma.ProductOrderByRelevanceFieldEnum = {
  sku: 'sku',
  productImg: 'productImg',
  productName: 'productName',
  slug: 'slug',
  productDesc: 'productDesc',
  potSize: 'potSize',
  plantHeight: 'plantHeight',
  preparationTime: 'preparationTime',
  stockStatus: 'stockStatus',
  category: 'category',
  productStatus: 'productStatus'
};

exports.Prisma.statusmasterOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name',
  desc: 'desc',
  type: 'type'
};

exports.Prisma.productimageOrderByRelevanceFieldEnum = {
  imageName: 'imageName',
  imageDesc: 'imageDesc'
};

exports.Prisma.thaiamphuresOrderByRelevanceFieldEnum = {
  nameTh: 'nameTh',
  nameEn: 'nameEn'
};

exports.Prisma.thaigeographiesOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.thaiprovincesOrderByRelevanceFieldEnum = {
  nameTh: 'nameTh',
  nameEn: 'nameEn'
};

exports.Prisma.thaitambonsOrderByRelevanceFieldEnum = {
  nameTh: 'nameTh',
  nameEn: 'nameEn'
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  orderNumber: 'orderNumber',
  discountCode: 'discountCode',
  adminComment: 'adminComment',
  stripeSessionId: 'stripeSessionId',
  stripePaymentMethodType: 'stripePaymentMethodType'
};

exports.Prisma.OrderItemOrderByRelevanceFieldEnum = {
  productName: 'productName',
  productImg: 'productImg'
};

exports.Prisma.CustomerInfoOrderByRelevanceFieldEnum = {
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  note: 'note'
};

exports.Prisma.ShippingInfoOrderByRelevanceFieldEnum = {
  receiverName: 'receiverName',
  receiverLastname: 'receiverLastname',
  receiverPhone: 'receiverPhone',
  addressLine: 'addressLine',
  addressLine2: 'addressLine2',
  provinceName: 'provinceName',
  amphureName: 'amphureName',
  tambonName: 'tambonName',
  zipCode: 'zipCode',
  deliveryTime: 'deliveryTime',
  cardMessage: 'cardMessage',
  additionalNote: 'additionalNote'
};

exports.Prisma.PaymentInfoOrderByRelevanceFieldEnum = {
  transactionId: 'transactionId',
  bankName: 'bankName',
  slipUrl: 'slipUrl'
};

exports.Prisma.PaymentConfirmationOrderByRelevanceFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  bankName: 'bankName',
  slipUrl: 'slipUrl',
  status: 'status',
  notes: 'notes'
};

exports.Prisma.usersOrderByRelevanceFieldEnum = {
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  password: 'password',
  rememberToken: 'rememberToken',
  lineId: 'lineId',
  avatar: 'avatar'
};

exports.Prisma.BlogOrderByRelevanceFieldEnum = {
  title: 'title',
  slug: 'slug',
  excerpt: 'excerpt',
  content: 'content',
  image: 'image',
  category: 'category',
  date: 'date'
};

exports.Prisma.DiscountCodeOrderByRelevanceFieldEnum = {
  code: 'code',
  type: 'type',
  description: 'description',
  status: 'status'
};

exports.Prisma.PasswordResetOrderByRelevanceFieldEnum = {
  token: 'token'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.PendingPaymentOrderByRelevanceFieldEnum = {
  charge_id: 'charge_id',
  payment_method: 'payment_method',
  status: 'status',
  customer_email: 'customer_email',
  customer_name: 'customer_name',
  customer_phone: 'customer_phone',
  deliveryDate: 'deliveryDate',
  deliveryTime: 'deliveryTime',
  cardMessage: 'cardMessage',
  additionalNote: 'additionalNote'
};

exports.Prisma.NotificationLogOrderByRelevanceFieldEnum = {
  type: 'type',
  eventType: 'eventType',
  transactionId: 'transactionId'
};
exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  PAID: 'PAID',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  BANK_TRANSFER: 'BANK_TRANSFER',
  CREDIT_CARD: 'CREDIT_CARD',
  PROMPTPAY: 'PROMPTPAY',
  COD: 'COD'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  REJECTED: 'REJECTED'
};

exports.users_isAdmin = exports.$Enums.users_isAdmin = {
  true: 'true',
  false: 'false'
};

exports.Prisma.ModelName = {
  Category: 'Category',
  Product: 'Product',
  statusmaster: 'statusmaster',
  productimage: 'productimage',
  thaiamphures: 'thaiamphures',
  thaigeographies: 'thaigeographies',
  thaiprovinces: 'thaiprovinces',
  thaitambons: 'thaitambons',
  Order: 'Order',
  OrderItem: 'OrderItem',
  CustomerInfo: 'CustomerInfo',
  ShippingInfo: 'ShippingInfo',
  PaymentInfo: 'PaymentInfo',
  PaymentConfirmation: 'PaymentConfirmation',
  users: 'users',
  Blog: 'Blog',
  DiscountCode: 'DiscountCode',
  PasswordReset: 'PasswordReset',
  PendingPayment: 'PendingPayment',
  NotificationLog: 'NotificationLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
