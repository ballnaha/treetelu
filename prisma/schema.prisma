generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id           Int       @id @default(autoincrement())
  categoryName String?   @db.VarChar(255)
  categoryDesc String?   @db.VarChar(255)
  priority     Int?      @db.SmallInt
  status       String?   @default("on") @db.VarChar(50)
  bestseller   String?   @default("off") @db.VarChar(50)
  createdAt    DateTime? @db.DateTime(0)
  updatedAt    DateTime? @db.DateTime(0)

  @@map("category")
}

model Product {
  id              Int         @id @default(autoincrement())
  sku             String?     @unique(map: "product_sku_unique") @db.VarChar(255)
  productImg      String?     @db.VarChar(255)
  productName     String?     @db.VarChar(255)
  slug            String?     @db.VarChar(255)
  productDesc     String?     @db.Text
  salesPrice      Decimal?    @db.Decimal(10, 2)
  originalPrice   Decimal?    @db.Decimal(10, 2)
  discount        Int?
  potSize         String?     @db.VarChar(100)
  plantHeight     String?     @db.VarChar(100)
  preparationTime String?     @db.VarChar(100)
  stock           Int?
  stockStatus     String?     @db.VarChar(255)
  category        String?     @db.VarChar(255)
  categoryId      Int?
  productStatus   String?     @default("on") @db.VarChar(50)
  createdAt       DateTime?   @db.DateTime(0)
  updatedAt       DateTime?   @db.DateTime(0)
  orderItems      OrderItem[]

  @@index([slug], map: "product_slug_index")
  @@map("product")
}

model statusmaster {
  id        Int       @id @default(autoincrement())
  code      String?   @db.VarChar(100)
  name      String?   @db.VarChar(100)
  desc      String?   @db.VarChar(100)
  type      String?   @db.VarChar(100)
  createdAt DateTime? @db.DateTime(0)
  updatedAt DateTime? @db.DateTime(0)
}

model productimage {
  id        Int       @id @default(autoincrement())
  productId Int?
  imageName String?   @db.VarChar(255)
  imageDesc String?   @db.VarChar(255)
  createdAt DateTime? @db.DateTime(0)
  updatedAt DateTime? @db.DateTime(0)
}

model thaiamphures {
  id                Int            @id
  nameTh            String         @db.VarChar(150)
  nameEn            String         @db.VarChar(150)
  provinceId        Int
  createdAt         DateTime?      @db.DateTime(0)
  updatedAt         DateTime?      @db.DateTime(0)
  deletedAt         DateTime?      @db.DateTime(0)
  shippingAddresses ShippingInfo[]
}

model thaigeographies {
  id   Int    @id
  name String @db.VarChar(255)
}

model thaiprovinces {
  id                Int            @id
  nameTh            String         @db.VarChar(150)
  nameEn            String         @db.VarChar(150)
  geographyId       Int
  createdAt         DateTime?      @db.DateTime(0)
  updatedAt         DateTime?      @db.DateTime(0)
  deletedAt         DateTime?      @db.DateTime(0)
  shippingAddresses ShippingInfo[]
}

model thaitambons {
  id                Int            @id
  zipCode           Int
  nameTh            String         @db.VarChar(150)
  nameEn            String         @db.VarChar(150)
  amphureId         Int
  createdAt         DateTime?      @db.DateTime(0)
  updatedAt         DateTime?      @db.DateTime(0)
  deletedAt         DateTime?      @db.DateTime(0)
  shippingAddresses ShippingInfo[]
}

model Order {
  id                      Int           @id @default(autoincrement())
  orderNumber             String        @unique @db.VarChar(50)
  userId                  Int?          @db.UnsignedInt
  status                  OrderStatus   @default(PENDING)
  totalAmount             Decimal       @db.Decimal(10, 2)
  shippingCost            Decimal       @db.Decimal(10, 2)
  discount                Decimal       @default(0.00) @db.Decimal(10, 2)
  discountCode            String?       @db.VarChar(50)
  finalAmount             Decimal       @db.Decimal(10, 2)
  paymentMethod           PaymentMethod @default(BANK_TRANSFER)
  paymentStatus           PaymentStatus @default(PENDING)
  createdAt               DateTime      @default(now()) @db.DateTime(0)
  updatedAt               DateTime      @updatedAt @db.DateTime(0)
  adminComment            String?       @db.Text
  stripeSessionId         String?       @db.VarChar(255)
  stripePaymentMethodType String?       @db.VarChar(20)
  customerInfo            CustomerInfo?
  orderItems              OrderItem[]
  paymentInfo             PaymentInfo?
  shippingInfo            ShippingInfo?

  @@index([userId], map: "orders_userId_fkey")
  @@map("orders")
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  orderId     Int
  productId   Int
  productName String   @db.VarChar(255)
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  productImg  String?  @db.VarChar(255)
  createdAt   DateTime @default(now()) @db.DateTime(0)
  updatedAt   DateTime @updatedAt @db.DateTime(0)
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])

  @@index([orderId], map: "order_items_orderId_fkey")
  @@index([productId], map: "order_items_productId_fkey")
  @@map("order_items")
}

model CustomerInfo {
  id        Int      @id @default(autoincrement())
  orderId   Int      @unique
  firstName String   @db.VarChar(100)
  lastName  String   @db.VarChar(100)
  email     String   @db.VarChar(255)
  phone     String   @db.VarChar(20)
  note      String?  @db.Text
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt @db.DateTime(0)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("customer_info")
}

model ShippingInfo {
  id               Int           @id @default(autoincrement())
  orderId          Int           @unique
  receiverName     String        @db.VarChar(100)
  receiverLastname String        @db.VarChar(100)
  receiverPhone    String        @db.VarChar(20)
  addressLine      String        @db.VarChar(255)
  addressLine2     String?       @db.VarChar(255)
  provinceId       Int
  provinceName     String        @db.VarChar(100)
  amphureId        Int
  amphureName      String        @db.VarChar(100)
  tambonId         Int
  tambonName       String        @db.VarChar(100)
  zipCode          String        @db.VarChar(10)
  shippingType     ShippingType  @default(SELF) // เพิ่มฟิลด์นี้
  deliveryDate     DateTime?     @db.DateTime(0)
  deliveryTime     String?       @db.VarChar(50)
  cardMessage      String?       @db.Text
  additionalNote   String?       @db.Text
  createdAt        DateTime      @default(now()) @db.DateTime(0)
  updatedAt        DateTime      @updatedAt @db.DateTime(0)
  amphure          thaiamphures  @relation(fields: [amphureId], references: [id])
  order            Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  province         thaiprovinces @relation(fields: [provinceId], references: [id])
  tambon           thaitambons   @relation(fields: [tambonId], references: [id])

  @@index([amphureId], map: "shipping_info_amphureId_fkey")
  @@index([provinceId], map: "shipping_info_provinceId_fkey")
  @@index([tambonId], map: "shipping_info_tambonId_fkey")
  @@map("shipping_info")
}

model PaymentInfo {
  id            Int           @id @default(autoincrement())
  orderId       Int           @unique
  paymentMethod PaymentMethod @default(BANK_TRANSFER)
  paymentDate   DateTime?     @db.DateTime(0)
  transactionId String?       @db.VarChar(100)
  amount        Decimal       @db.Decimal(10, 2)
  bankName      String?       @db.VarChar(100)
  slipUrl       String?       @db.VarChar(255)
  status        PaymentStatus @default(PENDING)
  verifiedBy    Int?          @db.UnsignedInt
  verifiedAt    DateTime?     @db.DateTime(0)
  createdAt     DateTime      @default(now()) @db.DateTime(0)
  updatedAt     DateTime      @updatedAt @db.DateTime(0)
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([verifiedBy], map: "payment_info_verifiedBy_fkey")
  @@map("payment_info")
}

model PaymentConfirmation {
  id          String    @id @default(uuid()) @db.VarChar(36)
  orderNumber String    @db.VarChar(50)
  amount      Decimal   @db.Decimal(10, 2)
  bankName    String?   @db.VarChar(100)
  slipUrl     String    @db.VarChar(255)
  status      String    @default("PENDING") @db.VarChar(20)
  notes       String?   @db.Text
  verifiedBy  Int?      @db.UnsignedInt
  verifiedAt  DateTime? @db.DateTime(0)
  createdAt   DateTime  @default(now()) @db.DateTime(0)
  updatedAt   DateTime  @updatedAt @db.DateTime(0)

  @@index([orderNumber])
  @@index([verifiedBy], map: "payment_confirmations_verifiedBy_fkey")
  @@map("payment_confirmations")
}

model users {
  id              Int            @id @default(autoincrement())
  firstName       String         @db.VarChar(255)
  lastName        String         @db.VarChar(255)
  email           String         @unique(map: "users_email_unique") @db.VarChar(255)
  isAdmin         users_isAdmin  @default(false)
  emailVerifiedAt DateTime?      @db.Timestamp(0)
  password        String         @db.VarChar(255)
  rememberToken   String?        @db.VarChar(100)
  createdAt       DateTime       @default(now()) @db.Timestamp(0)
  updatedAt       DateTime       @updatedAt @db.Timestamp(0)
  lineId          String?        @db.VarChar(100)
  avatar          String?        @db.VarChar(255)
  googleId        String?        @db.VarChar(100)
  passwordReset   PasswordReset?

  @@map("users")
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  slug      String   @unique @db.VarChar(255)
  excerpt   String   @db.VarChar(500)
  content   String   @db.LongText
  image     String   @db.VarChar(255)
  category  String   @db.VarChar(100)
  date      String   @db.VarChar(100)
  published Boolean  @default(true)
  userId    Int?     @db.UnsignedInt
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt @db.DateTime(0)

  @@index([slug], map: "blog_slug_index")
  @@index([category], map: "blog_category_index")
  @@map("blogs")
}

model DiscountCode {
  id          Int       @id @default(autoincrement())
  code        String    @unique @db.VarChar(50)
  type        String    @db.VarChar(20)
  value       Decimal   @db.Decimal(10, 2)
  minAmount   Decimal   @db.Decimal(10, 2)
  maxDiscount Decimal?  @db.Decimal(10, 2)
  description String    @db.VarChar(255)
  maxUses     Int       @default(0)
  usedCount   Int       @default(0)
  status      String    @default("active") @db.VarChar(20)
  startDate   DateTime? @db.DateTime(0)
  endDate     DateTime? @db.DateTime(0)
  createdBy   Int?      @db.UnsignedInt
  createdAt   DateTime  @default(now()) @db.DateTime(0)
  updatedAt   DateTime  @updatedAt @db.DateTime(0)

  @@map("discount_codes")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  token     String   @db.VarChar(255)
  expiresAt DateTime @db.DateTime(0)
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt @db.DateTime(0)
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("password_resets")
}

model PendingPayment {
  id             Int       @id @default(autoincrement())
  charge_id      String    @unique
  amount         Decimal   @db.Decimal(10, 2)
  payment_method String
  status         String
  metadata       Json?
  order_id       Int?
  processed      Boolean   @default(false)
  processed_at   DateTime?
  customer_email String?   @db.VarChar(255)
  customer_name  String?   @db.VarChar(255)
  customer_phone String?   @db.VarChar(50)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  additionalNote String?   @db.Text
  cardMessage    String?   @db.Text
  deliveryDate   String?   @db.VarChar(50)
  deliveryTime   String?   @db.VarChar(50)

  @@map("pending_payments")
}

model NotificationLog {
  id            Int      @id @default(autoincrement())
  orderId       Int
  type          String   @db.VarChar(50)
  eventType     String   @db.VarChar(100)
  sent          Boolean  @default(true)
  transactionId String?  @db.VarChar(255)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([orderId, type, eventType])
  @@index([orderId])
  @@index([transactionId])
  @@map("notification_logs")
}

enum OrderStatus {
  PENDING
  PROCESSING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  PROMPTPAY
  COD
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  REJECTED
}

model ShippingSettings {
  id                    Int      @id @default(autoincrement())
  freeShippingMinAmount Decimal  @default(1500.00) @db.Decimal(10, 2) // ยอดขั้นต่ำสำหรับฟรีค่าจัดส่ง
  standardShippingCost  Decimal  @default(100.00) @db.Decimal(10, 2)  // ค่าจัดส่งมาตรฐาน
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now()) @db.DateTime(0)
  updatedAt             DateTime @updatedAt @db.DateTime(0)
  createdBy             Int?     @db.UnsignedInt
  updatedBy             Int?     @db.UnsignedInt

  @@map("shipping_settings")
}

enum ShippingType {
  SELF   // จัดส่งให้ตัวเอง
  OTHER  // จัดส่งให้ผู้อื่น
}

enum users_isAdmin {
  true
  false
}
