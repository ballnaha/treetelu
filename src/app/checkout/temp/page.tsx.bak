"use client";

import React, { useState, useEffect, useMemo, useRef, useCallback, Suspense } from 'react';
import { useRouter } from 'next/navigation';
import { useCart } from '@/context/CartContext';
import { useAuth } from '@/context/AuthContext';
import Image from 'next/image';
import Link from 'next/link';
import { 
  Box, 
  Container, 
  Typography, 
  Paper, 
  Button, 
  Divider, 
  FormControl, 
  RadioGroup, 
  FormControlLabel, 
  Radio, 
  Stepper, 
  Step, 
  StepLabel,
  StepContent,
  Alert, 
  Collapse,
  CircularProgress,
  IconButton,
  TextField,
  Tab,
  Tabs,
  Stack,
  Dialog,
  DialogContent
} from '@mui/material';
import { styled } from '@mui/material/styles';
import { LoadingButton } from '@mui/lab';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import LocalShippingIcon from '@mui/icons-material/LocalShipping';
import PaymentIcon from '@mui/icons-material/Payment';
import VerifiedOutlinedIcon from '@mui/icons-material/VerifiedOutlined';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import CreditCardIcon from '@mui/icons-material/CreditCard';
import AddressForm from '@/components/AddressForm';
import AddIcon from '@mui/icons-material/Add';
import RemoveIcon from '@mui/icons-material/Remove';
import DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';
import CloseIcon from '@mui/icons-material/Close';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { TimePicker } from '@mui/x-date-pickers/TimePicker';
import { MobileDatePicker } from '@mui/x-date-pickers/MobileDatePicker';
import { MobileTimePicker } from '@mui/x-date-pickers/MobileTimePicker';
import thLocale from 'date-fns/locale/th';
import { format } from 'date-fns';
import { validateEmail, validateThaiPhone, validateZipCode } from '@/utils/validationUtils';
import LocalOfferIcon from '@mui/icons-material/LocalOffer';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import ShoppingCartIcon from '@mui/icons-material/ShoppingCart';
import InfoIcon from '@mui/icons-material/Info';
import LaunchIcon from '@mui/icons-material/Launch';
import ContentCopyIcon from '@mui/icons-material/ContentCopy';
import QrCodeIcon from '@mui/icons-material/QrCode';
import LocalAtmIcon from '@mui/icons-material/LocalAtm';
import Backdrop from '@mui/material/Backdrop';
import ConfirmationNumberIcon from '@mui/icons-material/ConfirmationNumber';
import LoopIcon from '@mui/icons-material/Loop';
import PaymentProcessingOverlay from '@/components/PaymentProcessingOverlay';


// สร้าง styled components
const ProductImageWrapper = styled(Box)(({ theme }) => ({
  width: 80,
  height: 80,
  position: 'relative',
  borderRadius: theme.shape.borderRadius,
  overflow: 'hidden',
  flexShrink: 0,
  border: `1px solid ${theme.palette.divider}`,
}));

const PageTitle = styled(Typography)(({ theme }) => ({
  fontSize: '1.5rem',
  fontWeight: 600,
  marginBottom: theme.spacing(1),
  position: 'relative',
  paddingBottom: theme.spacing(2),
  '&:after': {
    content: '""',
    position: 'absolute',
    bottom: 0,
    left: 0,
    width: 80,
    height: 3,
    backgroundColor: theme.palette.primary.main,
  }
}));

const OrderSummaryContainer = styled(Box)(({ theme }) => ({
  marginTop: theme.spacing(3),
  marginBottom: theme.spacing(3),
  padding: theme.spacing(3),
  borderRadius: theme.shape.borderRadius,
  backgroundColor: theme.palette.background.paper,
  boxShadow: '0 2px 10px rgba(0,0,0,0.05)',
}));

const steps = [
  {
    label: 'ข้อมูลการจัดส่ง',
    icon: <LocalShippingIcon />,
  },
  {
    label: 'วิธีการชำระเงิน',
    icon: <PaymentIcon />,
  },
  {
    label: 'ยืนยันคำสั่งซื้อ',
    icon: <VerifiedOutlinedIcon />,
  },
];

const TabPanel = (props: { children: React.ReactNode; value: number; index: number }) => {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`shipping-tabpanel-${index}`}
      aria-labelledby={`shipping-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ py: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
};

export default function Checkout() {
  const { cartItems, removeItem, clearCart, getTotalPrice, getTotalItems, updateQuantity } = useCart();
  const { user } = useAuth(); // ดึงข้อมูลผู้ใช้จาก AuthContext
  const router = useRouter();
  const [activeStep, setActiveStep] = useState(0);
  const [paymentMethod, setPaymentMethod] = useState('stripe');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [orderComplete, setOrderComplete] = useState(false);
  const [showAlert, setShowAlert] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');
  const [isMounted, setIsMounted] = useState(false);
  const [openQRDialog, setOpenQRDialog] = useState(false);
  
  // เพิ่ม state สำหรับส่วนลด
  const [discountCode, setDiscountCode] = useState('');
  const [discountAmount, setDiscountAmount] = useState(0);
  const [hasDiscountError, setHasDiscountError] = useState(false);
  const [discountErrorMsg, setDiscountErrorMsg] = useState('');
  const [isApplyingDiscount, setIsApplyingDiscount] = useState(false);
  const [discountDetails, setDiscountDetails] = useState<any>(null);
  
  // ใช้ useRef เพื่อป้องกันการเรียก setState ซ้ำซ้อน
  const initialRenderRef = useRef(true);
  
  // ใช้ useRef เพื่อจัดการกับการแปลงราคา
  const formattedPriceRef = useRef<string | null>(null);
  
  // เปิด-ปิด Dialog QR Code
  const handleOpenQRDialog = () => {
    setOpenQRDialog(true);
  };
  
  const handleCloseQRDialog = () => {
    setOpenQRDialog(false);
  };
  
  // ข้อมูลผู้สั่ง
  const [customerInfo, setCustomerInfo] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: ''
  });
  
  // ตัวเลือกจัดส่ง
  const [shippingTab, setShippingTab] = useState(0);
  const [shippingOption, setShippingOption] = useState('self');
  
  // ข้อมูลผู้รับ (กรณีจัดส่งให้ผู้อื่น)
  const [receiverInfo, setReceiverInfo] = useState({
    firstName: '',
    lastName: '',
    phone: '',
    address: ''
  });
  
  // ข้อความเพิ่มเติม
  const [additionalMessage, setAdditionalMessage] = useState('');
  
  // เพิ่ม state สำหรับวันและเวลาที่จัดส่ง และข้อความในการ์ด
  const [deliveryDate, setDeliveryDate] = useState<Date | null>(null);
  const [deliveryTime, setDeliveryTime] = useState<Date | null>(null);
  const [cardMessage, setCardMessage] = useState('');
  
  const [shippingInfo, setShippingInfo] = useState<{
    receiverName?: string;
    receiverLastname?: string;
    provinceId?: number;
    provinceName?: string;
    amphureId?: number;
    amphureName?: string;
    tambonId?: number;
    tambonName?: string;
    zipCode?: string;
    addressLine?: string;
    addressLine2?: string;
  }>({});
  const [isProcessing, setIsProcessing] = useState(false);
  const [processingMessage, setProcessingMessage] = useState('กำลังดำเนินการ...');
  const [orderNumber, setOrderNumber] = useState<string>('');

  // จำนวนสินค้า (ใช้ useMemo เพื่อป้องกันการคำนวณซ้ำ)
  const totalItems = useMemo(() => {
    return getTotalItems();
  }, [getTotalItems]);

  // คำนวณราคารวมโดยใช้ useMemo เพื่อป้องกันการคำนวณซ้ำโดยไม่จำเป็น
  const prices = useMemo(() => {
    if (!isMounted) return { subtotal: 0, shippingCost: 0, discount: 0, totalPrice: 0 };
    
    const subtotal = getTotalPrice();
    // ฟรีค่าจัดส่งเมื่อซื้อสินค้ามากกว่าหรือเท่ากับ 1,500 บาท
    const shippingCost = subtotal >= 1500 ? 0 : 100;
    const totalBeforeDiscount = subtotal + shippingCost;
    const totalPrice = totalBeforeDiscount - discountAmount;
    
    return { subtotal, shippingCost, discount: discountAmount, totalPrice };
  }, [getTotalPrice, isMounted, discountAmount]);

  // เพิ่มฟังก์ชันล้างโค้ดส่วนลด
  const handleClearDiscount = useCallback(() => {
    setDiscountCode('');
    setDiscountAmount(0);
    setHasDiscountError(false);
    setDiscountErrorMsg('');
    setDiscountDetails(null);
  }, []);

  // เพิ่ม useEffect เพื่อตรวจสอบส่วนลดซ้ำเมื่อมีการเปลี่ยนแปลงในตะกร้าสินค้า
  useEffect(() => {
    // ถ้ามีรหัสส่วนลดและมีการเปลี่ยนแปลงในตะกร้าสินค้า ให้ตรวจสอบส่วนลดใหม่
    if (discountAmount > 0 && discountCode) {
      (async () => {
        try {
          // เรียกใช้ API เพื่อตรวจสอบและคำนวณส่วนลดใหม่
          const response = await fetch('/api/discount/validate', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
              code: discountCode,
              cartTotal: prices.subtotal
            }),
          });
          
          const data = await response.json();
          
          if (data.success) {
            // อัพเดตส่วนลด ถ้ามีการเปลี่ยนแปลง
            if (data.discountAmount !== discountAmount) {
              setDiscountAmount(data.discountAmount);
              setDiscountDetails(data.discount);
            }
          } else {
            // ถ้าส่วนลดไม่ถูกต้องอีกต่อไป (เช่น ยอดต่ำกว่ายอดขั้นต่ำในการใช้โค้ด)
            handleClearDiscount();
            setHasDiscountError(true);
            setDiscountErrorMsg(data.message || 'รหัสส่วนลดไม่สามารถใช้ได้กับยอดสั่งซื้อปัจจุบัน');
          }
        } catch (error) {
          console.error('Error revalidating discount code:', error);
        }
      })();
    }
  }, [prices.subtotal, discountCode, discountAmount, handleClearDiscount, cartItems]);

  // ตรวจสอบว่าตะกร้าว่างเปล่าหรือไม่
  const isCartEmpty = useMemo(() => {
    return !cartItems || cartItems.length === 0;
  }, [cartItems]);

    // เลื่อนหน้าไปด้านบนสุดเมื่อคอมโพเนนต์โหลด
    useEffect(() => {
      window.scrollTo(0, 0);
    }, []);

  // ใช้ useEffect เพื่อตรวจสอบตะกร้าสินค้าเมื่อ component mount เท่านั้น
  useEffect(() => {
    if (initialRenderRef.current) {
      setIsMounted(true);
      initialRenderRef.current = false;
    }
  }, []);

  // ฟังก์ชัน handleAddressChange สำหรับ AddressForm
  const handleAddressChange = (address: {
    receiverName?: string;
    receiverLastname?: string;
    provinceId?: number;
    provinceName?: string;
    amphureId?: number;
    amphureName?: string;
    tambonId?: number;
    tambonName?: string;
    zipCode?: string;
    addressLine?: string;
    addressLine2?: string;
  }) => {
    // ถ้าเป็นการจัดส่งให้ตัวเอง ให้ใช้ชื่อจากข้อมูลผู้สั่ง
    if (shippingTab === 0) {
      // เก็บค่า zipCode ไว้ใน state ด้วย
      setShippingInfo({
        ...address,
        receiverName: customerInfo.firstName,
        receiverLastname: customerInfo.lastName,
        provinceId: address.provinceId,
        provinceName: address.provinceName,
        amphureId: address.amphureId,
        amphureName: address.amphureName,
        tambonId: address.tambonId,
        tambonName: address.tambonName,
        zipCode: address.zipCode
      });
    } else {
      setShippingInfo(address);
    }
  };
  
  // จัดการการเปลี่ยนแปลงข้อมูลผู้สั่ง
  const handleCustomerInfoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setCustomerInfo(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  // จัดการการเปลี่ยนแปลงตัวเลือกจัดส่ง (Tabs)
  const handleShippingTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    if (shippingTab !== newValue) {
      setShippingTab(newValue);
      setShippingOption(newValue === 0 ? 'self' : 'other');
    }
  };
  
  // จัดการการเปลี่ยนแปลงข้อมูลผู้รับ
  const handleReceiverInfoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setReceiverInfo(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  // จัดการการเปลี่ยนแปลงข้อความเพิ่มเติม
  const handleAdditionalMessageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setAdditionalMessage(e.target.value);
  };

  // จัดการการเปลี่ยนแปลงวันที่จัดส่ง
  const handleDeliveryDateChange = (newValue: Date | null) => {
    setDeliveryDate(newValue);
  };

  // จัดการการเปลี่ยนแปลงเวลาที่จัดส่ง
  const handleDeliveryTimeChange = (newValue: Date | null) => {
    setDeliveryTime(newValue);
  };

  // จัดการการเปลี่ยนแปลงข้อความในการ์ด
  const handleCardMessageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setCardMessage(e.target.value);
  };

  const handlePhoneNumberChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, isReceiverPhone = false) => {
    const { value } = e.target;
    
    // ตรวจสอบว่าเป็นตัวเลขเท่านั้น
    if (value === '' || /^[0-9]*$/.test(value)) {
      if (isReceiverPhone) {
        // กรณีเป็นเบอร์โทรศัพท์ผู้รับ
        setReceiverInfo(prev => ({
          ...prev,
          phone: value
        }));
      } else {
        // กรณีเป็นเบอร์โทรศัพท์ผู้สั่ง
        setCustomerInfo(prev => ({
          ...prev,
          phone: value
        }));
      }
    }
  };

  // ฟังก์ชันสำหรับตรวจสอบและใช้โค้ดส่วนลด
  const handleApplyDiscount = useCallback(async () => {
    if (!discountCode.trim()) {
      setHasDiscountError(true);
      setDiscountErrorMsg('กรุณากรอกรหัสส่วนลด');
      return;
    }
    
    setIsApplyingDiscount(true);
    setHasDiscountError(false);
    
    try {
      // เรียกใช้ API เพื่อตรวจสอบและคำนวณส่วนลด
      const response = await fetch('/api/discount/validate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          code: discountCode,
          cartTotal: prices.subtotal
        }),
      });
      
      const data = await response.json();
      
      if (data.success) {
        setDiscountAmount(data.discountAmount);
        setDiscountDetails(data.discount);
        setHasDiscountError(false);
        setDiscountErrorMsg('');
      } else {
        setHasDiscountError(true);
        setDiscountErrorMsg(data.message || 'รหัสส่วนลดไม่ถูกต้อง');
        setDiscountAmount(0);
        setDiscountDetails(null);
      }
    } catch (error) {
      console.error('Error validating discount code:', error);
      setHasDiscountError(true);
      setDiscountErrorMsg('เกิดข้อผิดพลาดในการตรวจสอบรหัสส่วนลด');
      setDiscountAmount(0);
      setDiscountDetails(null);
    } finally {
      setIsApplyingDiscount(false);
    }
  }, [discountCode, prices.subtotal]);

  const handleNext = () => {
    if (activeStep === 0) {
      const emailValidation = validateEmail(customerInfo.email);
      const phoneValidation = validateThaiPhone(customerInfo.phone);
      
      // ตรวจสอบข้อมูลผู้สั่งซื้อ
      if (!customerInfo.firstName || !customerInfo.lastName) {
        setShowAlert(true);
        setAlertMessage('กรุณากรอกชื่อและนามสกุลให้ครบถ้วน');
        return;
      }
      
      if (!emailValidation.isValid) {
        setShowAlert(true);
        setAlertMessage(emailValidation.error || 'อีเมลไม่ถูกต้อง');
        return;
      }
      
      if (!phoneValidation.isValid) {
        setShowAlert(true);
        setAlertMessage(phoneValidation.error || 'เบอร์โทรศัพท์ไม่ถูกต้อง');
        return;
      }
      
      // ตรวจสอบข้อมูลที่อยู่จัดส่ง
      if (shippingTab === 0) {
        // กรณีจัดส่งให้ตัวเอง
        if (!shippingInfo.addressLine || !shippingInfo.provinceId || !shippingInfo.amphureId || !shippingInfo.tambonId) {
          setShowAlert(true);
          setAlertMessage('กรุณากรอกข้อมูลที่อยู่จัดส่งให้ครบถ้วน');
          return;
        }
        
        // ตรวจสอบรหัสไปรษณีย์
        if (shippingInfo.zipCode) {
          const zipValidation = validateZipCode(shippingInfo.zipCode);
          if (!zipValidation.isValid) {
            setShowAlert(true);
            setAlertMessage(zipValidation.error || 'รหัสไปรษณีย์ไม่ถูกต้อง');
            return;
          }
        } else {
          setShowAlert(true);
          setAlertMessage('กรุณาเลือกตำบลเพื่อระบุรหัสไปรษณีย์');
          return;
        }
      } else {
        // กรณีจัดส่งให้ผู้อื่น
        if (!receiverInfo.firstName || !receiverInfo.lastName || !receiverInfo.phone || !receiverInfo.address) {
          setShowAlert(true);
          setAlertMessage('กรุณากรอกข้อมูลผู้รับให้ครบถ้วน');
          return;
        }
        
        // ตรวจสอบรูปแบบเบอร์โทรศัพท์ผู้รับ
        const receiverPhoneValidation = validateThaiPhone(receiverInfo.phone);
        if (!receiverPhoneValidation.isValid) {
          setShowAlert(true);
          setAlertMessage(receiverPhoneValidation.error || 'เบอร์โทรศัพท์ผู้รับไม่ถูกต้อง');
          return;
        }
        
        // ตรวจสอบวันที่จัดส่ง
        if (!deliveryDate) {
          setShowAlert(true);
          setAlertMessage('กรุณาเลือกวันที่ต้องการจัดส่ง');
          return;
        }
        
        // ตรวจสอบเวลาที่จัดส่ง
        if (!deliveryTime) {
          setShowAlert(true);
          setAlertMessage('กรุณาเลือกเวลาที่ต้องการจัดส่ง');
          return;
        }
        
        // ตรวจสอบว่าวันที่เลือกเป็นวันในอนาคต
        const currentDate = new Date();
        currentDate.setHours(0, 0, 0, 0); // เซ็ตเวลาเป็น 00:00:00 เพื่อเปรียบเทียบเฉพาะวันที่
        const selectedDate = new Date(deliveryDate);
        selectedDate.setHours(0, 0, 0, 0);
        
        if (selectedDate < currentDate) {
          setShowAlert(true);
          setAlertMessage('วันที่จัดส่งต้องเป็นวันที่ในอนาคต');
          return;
        }
        
        // ตรวจสอบว่าวันที่เลือกไม่เกิน 30 วันนับจากวันนี้
        const maxDate = new Date();
        maxDate.setDate(maxDate.getDate() + 30);
        maxDate.setHours(0, 0, 0, 0);
        
        if (selectedDate > maxDate) {
          setShowAlert(true);
          setAlertMessage('วันที่จัดส่งต้องไม่เกิน 30 วันนับจากวันนี้');
          return;
        }
      }
    } else if (activeStep === 1) {
      if (!paymentMethod) {
        setShowAlert(true);
        setAlertMessage('กรุณาเลือกวิธีการชำระเงิน');
        return;
      }
    }

    setActiveStep((prevActiveStep) => prevActiveStep + 1);
    setShowAlert(false);
  };

  // ฟังก์ชันจัดการการคลิก Back
  const handleBack = () => {
    setActiveStep((prevStep) => prevStep - 1);
    setShowAlert(false);
  };

  const handlePaymentMethodChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setPaymentMethod(event.target.value);
  };

  // ตัวแปรสถานะสำหรับการชำระเงิน
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [processingPayment, setProcessingPayment] = useState(false);
  const [processingMessage, setProcessingMessage] = useState('กำลังดำเนินการ...');

  // ฟังก์ชันจัดการคำสั่งซื้อ
  const handlePlaceOrder = async () => {
    try {
      setIsSubmitting(true);
      
      if (!paymentMethod) {
        throw new Error('กรุณาเลือกวิธีการชำระเงิน');
      }

      // ถ้าเลือกจ่ายด้วย Stripe ให้ redirect ไปยัง Stripe Checkout
      if (paymentMethod === 'stripe') {
        setIsProcessing(true);
        
        // ... existing code ...
      }
      
      // ถ้าเลือกจ่ายด้วยวิธีอื่น (Bank Transfer)
      if (paymentMethod === 'bank_transfer') {
        // แสดง overlay animation ระหว่างประมวลผล
        setProcessingPayment(true);
        setProcessingMessage('กำลังสร้างคำสั่งซื้อของคุณ...');
        
        // เตรียมข้อมูลสำหรับส่งไปยัง API
        // ... existing code ...
      
        // ถ้ามีการใช้รหัสส่วนลด ให้เรียกใช้ API สำหรับเพิ่มจำนวนการใช้งาน
        if (discountAmount > 0 && discountCode) {
          setProcessingMessage('กำลังตรวจสอบส่วนลด...');
          try {
            // ... existing code ...
          } catch (error) {
            console.error('Error updating discount usage count:', error);
          }
        }
      
        // ส่งข้อมูลการสั่งซื้อไปยัง API
        setProcessingMessage('กำลังบันทึกคำสั่งซื้อ...');
        const response = await fetch('/api/orders', {
          // ... existing code ...
        });
      
        if (!response.ok) {
          throw new Error('เกิดข้อผิดพลาดในการสร้างคำสั่งซื้อ');
        }
        
        const result = await response.json();
      
        if (result.success) {
          setProcessingMessage('การสั่งซื้อสำเร็จ กำลังนำคุณไปยังหน้าถัดไป...');
          setOrderComplete(true);
          clearCart();
          
          // รอสักครู่เพื่อให้ผู้ใช้เห็น animation สำเร็จ
          await new Promise(resolve => setTimeout(resolve, 1500));
          
          router.push(`/orders/complete?orderNumber=${result.orderNumber}`);
        } else {
          throw new Error(result.message || 'เกิดข้อผิดพลาดในการสร้างคำสั่งซื้อ');
        }
      }
    } catch (error: any) {
      console.error('Error placing order:', error);
      setAlertMessage(error.message || 'เกิดข้อผิดพลาดในการสั่งซื้อ');
      setShowAlert(true);
    } finally {
      setIsSubmitting(false);
      setIsProcessing(false);
      setProcessingPayment(false);
    }
  };

  // ใช้ useCallback สำหรับฟังก์ชันที่ส่งไปยังคอมโพเนนต์ลูก
  const handleRemoveItem = useCallback((itemId: string) => {
    removeItem(itemId);
  }, [removeItem]);

  const handleUpdateQuantity = useCallback((itemId: string, quantity: number) => {
    updateQuantity(itemId, quantity);
  }, [updateQuantity]);

  // ถ้ายังไม่ได้ mount หรือ hydration ยังไม่เสร็จสมบูรณ์ ให้แสดงหน้าเปล่า
  if (!isMounted) {
    return null;
  }

  // ถ้าสั่งซื้อสำเร็จแล้ว แสดงหน้ายืนยัน
  if (orderComplete) {
    return (
      <Container maxWidth="md" sx={{ py: 6 }}>
        <Box
          sx={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            minHeight: '60vh',
          }}
        >
          <Paper
            elevation={0}
            sx={{
              p: { xs: 3, md: 5 },
              borderRadius: 3,
              maxWidth: 560,
              width: '100%',
              mx: 'auto',
              position: 'relative',
              overflow: 'hidden',
              boxShadow: '0 10px 40px rgba(0,0,0,0.06)',
              background: 'linear-gradient(145deg, #ffffff 0%, #f9fafb 100%)',
            }}
          >
            {/* พื้นหลังประดับตกแต่ง */}
            <Box
              sx={{
                position: 'absolute',
                top: -20,
                right: -20,
                width: 180,
                height: 180,
                borderRadius: '50%',
                background: 'linear-gradient(45deg, rgba(25, 118, 210, 0.05) 0%, rgba(25, 118, 210, 0.1) 100%)',
                zIndex: 0,
              }}
            />
            
            <Box
              sx={{
                position: 'absolute',
                bottom: -30,
                left: -30,
                width: 150,
                height: 150,
                borderRadius: '50%',
                background: 'linear-gradient(45deg, rgba(46, 125, 50, 0.05) 0%, rgba(46, 125, 50, 0.12) 100%)',
                zIndex: 0,
              }}
            />
            
            <Box sx={{ position: 'relative', zIndex: 1 }}>
              <Box
                sx={{
                  width: 90,
                  height: 90,
                  borderRadius: '50%',
                  background: 'rgba(46, 125, 50, 0.1)',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  mx: 'auto',
                  mb: 3,
                  position: 'relative',
                }}
              >
                <Box
                  sx={{
                    position: 'absolute',
                    width: '100%',
                    height: '100%',
                    borderRadius: '50%',
                    border: '2px dashed rgba(46, 125, 50, 0.4)',
                    animation: 'spin 10s linear infinite',
                    '@keyframes spin': {
                      '0%': { transform: 'rotate(0deg)' },
                      '100%': { transform: 'rotate(360deg)' },
                    },
                  }}
                />
                <CheckCircleOutlineIcon 
                  sx={{ 
                    fontSize: 54, 
                    color: 'success.main',
                    animation: 'pulse 3s infinite',
                    '@keyframes pulse': {
                      '0%': { opacity: 0.8, transform: 'scale(0.95)' },
                      '50%': { opacity: 1, transform: 'scale(1.05)' },
                      '100%': { opacity: 0.8, transform: 'scale(0.95)' },
                    },
                  }} 
                />
              </Box>
              
              <Typography 
                variant="h5" 
                align="center" 
                gutterBottom 
                sx={{ 
                  fontWeight: 600,
                  mb: 2,
                  background: 'linear-gradient(45deg, #2E7D32 30%, #43A047 90%)',
                  backgroundClip: 'text',
                  WebkitBackgroundClip: 'text',
                  color: 'transparent',
                  WebkitTextFillColor: 'transparent',
                }}
              >
                สั่งซื้อสำเร็จ
              </Typography>
              
              <Box
                sx={{
                  p: 3,
                  mb: 3,
                  borderRadius: 2,
                  background: 'rgba(255,255,255,0.8)',
                  backdropFilter: 'blur(10px)',
                  boxShadow: 'inset 0 1px 3px rgba(0,0,0,0.05)',
                  border: '1px solid rgba(0,0,0,0.03)',
                }}
              >
                <Typography variant="subtitle1" gutterBottom sx={{ fontWeight: 500 }}>
                  ขอบคุณสำหรับการสั่งซื้อ
                </Typography>
                
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 1, mb: 2 }}>
                  <Typography variant="body1" sx={{ fontWeight: 600 }}>
                    เลขที่คำสั่งซื้อ:
                  </Typography>
                  <Typography
                    component="span"
                    sx={{
                      fontWeight: 700,
                      px: 2,
                      py: 0.5,
                      borderRadius: 1.5,
                      backgroundColor: 'rgba(25, 118, 210, 0.08)',
                      color: 'primary.main',
                      letterSpacing: 0.5,
                      fontSize: '1.1rem',
                    }}
                  >
                    {orderNumber}
                  </Typography>
                </Box>
                
                {paymentMethod === 'bank_transfer' ? (
                  <Alert 
                    severity="info" 
                    icon={<InfoIcon />}
                    sx={{ 
                      mb: 2, 
                      textAlign: 'left',
                      alignItems: 'flex-start',
                      borderRadius: 2,
                      backgroundColor: 'rgba(3, 169, 244, 0.08)',
                      '& .MuiAlert-icon': { mt: 0.5 }
                    }}
                  >
                    <Typography variant="subtitle2" sx={{ fontWeight: 500, mb: 1, color: 'info.dark' }}>
                      กรุณาชำระเงินภายใน 24 ชั่วโมง
                    </Typography>
                    <Typography variant="body2" sx={{ color: 'info.dark', opacity: 0.9 }}>
                      หากท่านชำระเงินแล้ว กรุณาส่งหลักฐานการโอนเงินผ่านทางไลน์ @treetelu หรืออีเมล info@treetelu.com
                    </Typography>
                  </Alert>
                ) : (
                  <Alert 
                    severity="success" 
                    icon={<CheckCircleIcon />}
                    sx={{ 
                      mb: 2, 
                      textAlign: 'left',
                      alignItems: 'flex-start',
                      borderRadius: 2, 
                      backgroundColor: 'rgba(46, 125, 50, 0.08)',
                      '& .MuiAlert-icon': { mt: 0.5 }
                    }}
                  >
                    <Typography variant="subtitle2" sx={{ fontWeight: 500, mb: 1, color: 'success.dark' }}>
                      การชำระเงินสำเร็จแล้ว
                    </Typography>
                    <Typography variant="body2" sx={{ color: 'success.dark', opacity: 0.9 }}>
                      เราได้ส่งอีเมลยืนยันการสั่งซื้อไปที่อีเมลของท่าน กรุณาตรวจสอบอีเมลเพื่อดูรายละเอียดการสั่งซื้อ
                    </Typography>
                  </Alert>
                )}
                
                <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', mt: 1 }}>
                  เราจะดำเนินการจัดส่งสินค้าให้คุณโดยเร็วที่สุด <br/>หากมีข้อสงสัย สามารถติดต่อเราได้ที่ Line: <Box component="span" sx={{ fontWeight: 500, color: 'primary.main' }}>@treetelu</Box>
                </Typography>
              </Box>
              
              <Button
                variant="contained"
                component={Link}
                href="/"
                sx={{ 
                  mt: 1,
                  py: 1.2,
                  px: 4,
                  borderRadius: 2,
                  boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
                  
                  transition: 'all 0.2s ease',
                  '&:hover': {
                    transform: 'translateY(-2px)',
                    boxShadow: '0 6px 15px rgba(0,0,0,0.15)',
                  },
                  width: { xs: '100%', sm: 'auto' },
                  display: 'flex',
                  mx: 'auto'
                }}
                startIcon={<ShoppingCartIcon />}
              >
                กลับไปยังหน้าหลัก
              </Button>
            </Box>
          </Paper>
        </Box>
      </Container>
    );
  }

  // ถ้าไม่มีสินค้าในตะกร้า
  if (isCartEmpty) {
    return null;
  }

  // แสดงหน้าชำระเงินปกติ
  return (
    <Box sx={{ bgcolor: 'background.default', minHeight: '100vh', py: 4 }}>
      {/* Payment Processing Overlay */}
      <PaymentProcessingOverlay 
        open={processingPayment} 
        message={processingMessage} 
      />

      <Container maxWidth="lg">
        {/* Existing code... */}
      </Container>
    </Box>
  );
}
