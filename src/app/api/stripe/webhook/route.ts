import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';
import { headers } from 'next/headers';
import prisma from '@/lib/prisma';
import { format, addHours } from 'date-fns';
import { th as thLocale } from 'date-fns/locale';
import { createOrderNotificationEmbed, sendDiscordNotification } from '@/utils/discordUtils';
import { Resend } from 'resend';
import { getBangkokDateTime, convertToBangkokTime } from '@/utils/dateUtils';
import { PaymentMethod } from '@prisma/client';
import { calculateShippingCost } from '@/utils/shippingUtils';

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Stripe instance
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '', {
  apiVersion: '2025-04-30.basil',
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Resend instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
const resend = new Resend(process.env.RESEND_API_KEY || '');

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
interface OrderItem {
  productId: number;
  productName: string;
  productImg?: string;
  quantity: number;
  unitPrice: number | string;
}

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OrderItem ‡∏à‡∏≤‡∏Å database
interface DbOrderItem {
  id: number;
  orderId: number;
  productId: number;
  productName: string;
  productImg?: string | null;
  quantity: number;
  unitPrice: any; // Decimal ‡∏à‡∏≤‡∏Å Prisma
  totalPrice: any; // Decimal ‡∏à‡∏≤‡∏Å Prisma
  createdAt: Date;
  updatedAt: Date;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
const sendOrderConfirmationEmail = async (orderData: any, paymentInfo?: any) => {
  try {
    console.log('Sending order confirmation email for:', {
      orderNumber: orderData.orderNumber,
      email: orderData.customerInfo?.email
    });
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const subtotal = Number(orderData.items.reduce((sum: number, item: OrderItem) => sum + (Number(item.unitPrice) * Number(item.quantity)), 0));
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const shippingCost = await calculateShippingCost(subtotal);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const discount = Number(orderData.discount || 0);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô (‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏î‡πâ‡∏ß‡∏¢)
    const totalAmount = subtotal + shippingCost - discount;

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô UTC+7
    const deliveryDate = orderData.shippingInfo.deliveryDate 
      ? addHours(new Date(orderData.shippingInfo.deliveryDate), 7)
      : null;

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    let paymentMethodText = '‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï (Stripe)';
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    if (orderData.paymentMethod === 'PROMPTPAY' || orderData.stripePaymentMethodType === 'promptpay') {
      paymentMethodText = '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå (Stripe)';
    } else if (orderData.paymentMethod === 'CREDIT_CARD' || orderData.stripePaymentMethodType === 'card') {
      paymentMethodText = '‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï (Stripe)';
    } else if (orderData.paymentMethod === 'BANK_TRANSFER') {
      paymentMethodText = '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£';
    }

    const emailContent = `
        <div style="font-family: sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="text-align: center; margin-bottom: 20px;">
            <img src="${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001'}/images/logo.webp" alt="Treetelu Logo" style="max-width: 150px; height: auto;"/>
          </div>
          <h1 style="color: #24B493; font-size: 24px;">‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h1>
          
          <div style="background-color: #f5f5f5; padding: 10px; margin-bottom: 20px; border-radius: 4px; text-align: center;">
            <p style="margin: 0; font-size: 16px;">
              <strong>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:</strong> <span style="color: #24B493;">${orderData.orderNumber}</span>
            </p>
          </div>
          
          <div style="margin: 20px 0;">
            <h2>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
            <table style="width: 100%; border-collapse: collapse;">
              <tr style="background-color: #f5f5f5;">
                <th style="padding: 8px; text-align: left; border-bottom: 1px solid #ddd;">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                <th style="padding: 8px; text-align: center; border-bottom: 1px solid #ddd;">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                <th style="padding: 8px; text-align: right; border-bottom: 1px solid #ddd;">‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏ä‡∏¥‡πâ‡∏ô</th>
                <th style="padding: 8px; text-align: right; border-bottom: 1px solid #ddd;">‡∏£‡∏ß‡∏°</th>
              </tr>
              ${orderData.items.map((item: OrderItem) => `
                <tr>
                  <td style="padding: 8px; border-bottom: 1px solid #ddd;">${item.productName}</td>
                  <td style="padding: 8px; text-align: center; border-bottom: 1px solid #ddd;">${item.quantity}</td>
                  <td style="padding: 8px; text-align: right; border-bottom: 1px solid #ddd;">${Number(item.unitPrice).toLocaleString()} ‡∏ö‡∏≤‡∏ó</td>
                  <td style="padding: 8px; text-align: right; border-bottom: 1px solid #ddd;">${(Number(item.unitPrice) * item.quantity).toLocaleString()} ‡∏ö‡∏≤‡∏ó</td>
                </tr>
              `).join('')}
              <tr>
                <td colspan="3" style="padding: 8px; text-align: right; font-weight: bold;">‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</td>
                <td style="padding: 8px; text-align: right;">${subtotal.toLocaleString()} ‡∏ö‡∏≤‡∏ó</td>
              </tr>
              <tr>
                <td colspan="3" style="padding: 8px; text-align: right; font-weight: bold;">‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:</td>
                <td style="padding: 8px; text-align: right;">${shippingCost === 0 ? '‡∏ü‡∏£‡∏µ' : `${shippingCost.toLocaleString()} ‡∏ö‡∏≤‡∏ó`}</td>
              </tr>
              ${discount > 0 ? `
                <tr>
                  <td colspan="3" style="padding: 8px; text-align: right; font-weight: bold;">‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î${orderData.discountCode ? ` (${orderData.discountCode})` : ''}:</td>
                  <td style="padding: 8px; text-align: right;">-${discount.toLocaleString()} ‡∏ö‡∏≤‡∏ó</td>
                </tr>
              ` : ''}
              <tr style="background-color: #f5f5f5;">
                <td colspan="3" style="padding: 8px; text-align: right; font-weight: bold;">‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô:</td>
                <td style="padding: 8px; text-align: right; font-weight: bold; color: #24B493;">${totalAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó</td>
              </tr>
            </table>
          </div>
          
          <div style="margin: 20px 0; padding: 15px; background-color: #e8f5e9; border-radius: 4px;">
            <h2 style="color: #2e7d32; margin-top: 0;">üéâ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!</h2>
            <p style="margin: 5px 0;">
              ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
              ‡∏ó‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            </p>
            <p style="margin: 5px 0; color: #2e7d32;">
              <strong>‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:</strong> ${paymentMethodText}
            </p>
          </div>
          
          <div style="margin: 20px 0; padding: 15px; background-color: #f5f5f5; border-radius: 4px;">
            <h2 style="margin-top: 0;">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</h2>
            <p style="margin: 5px 0; color: #34495e;">
              <strong>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö:</strong> ${orderData.shippingInfo.receiverName} ${orderData.shippingInfo.receiverLastname}
            </p>
            
            <p style="margin: 5px 0; color: #34495e;">
              <strong>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:</strong> ${orderData.shippingInfo.receiverPhone}
            </p>
            
            <p style="margin: 5px 0; color: #34495e;">
              <strong>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:</strong> ${orderData.shippingInfo.addressLine}
            </p>
            
            ${orderData.shippingInfo.tambonName !== '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á' || orderData.shippingInfo.amphureName !== '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á' || orderData.shippingInfo.provinceName !== '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á' ? `
            <p style="margin: 5px 0; color: #34495e;">
              <strong>‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á:</strong> ${orderData.shippingInfo.tambonName || '-'}
            </p>
           
            <p style="margin: 5px 0; color: #34495e;">
              <strong>‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï:</strong> ${orderData.shippingInfo.amphureName || '-'}
            </p>
           
            <p style="margin: 5px 0; color: #34495e;">
              <strong>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î:</strong> ${orderData.shippingInfo.provinceName || '-'}
            </p>
            
            <p style="margin: 5px 0; color: #34495e;">
              <strong>‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå:</strong> ${orderData.shippingInfo.zipCode || '-'}
            </p>
            ` : ''}

            ${deliveryDate ? `
              <p style="margin: 5px 0; color: #34495e;">
                <strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:</strong> ${format(deliveryDate, 'dd MMMM yyyy', { locale: thLocale })}
              </p>
            ` : ''}
          </div>
          
          <div style="margin: 20px 0; text-align: center; color: #666;">
            <p>‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡∏ó‡∏µ‡πà <a href="mailto:info@treetelu.com" style="color: #24B493;">info@treetelu.com</a> ‡∏´‡∏£‡∏∑‡∏≠ Line: <strong>@treetelu</strong></p>
          </div>
        </div>
      `;

    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏î‡πâ‡∏ß‡∏¢ Resend
    await resend.emails.send({
      from: 'Treetelu - ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ñ‡∏≤‡∏á <no-reply@treetelu.com>',
      to: orderData.customerInfo?.email || 'info@treetelu.com',
      subject: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #' + orderData.orderNumber + ' (‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)',
      html: emailContent,
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    return { success: true, message: '‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' };
  } catch (error) {
    console.error('‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
    return { success: false, message: '‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß' };
  }
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á productId
async function transformProductId(stripeProductId: string): Promise<number> {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ stripeProductId ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!stripeProductId || typeof stripeProductId !== 'string') {
      console.log('Empty or invalid productId from Stripe');
      return 1; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ metadata.productId ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    let productId = parseInt(stripeProductId);
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ productId ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    if (isNaN(productId) || productId <= 0) {
      console.log('Invalid productId from Stripe:', stripeProductId);
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ productId ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
      try {
        const firstProduct = await prisma.product.findFirst({
          orderBy: {
            id: 'asc'
          }
        });
        
        if (firstProduct) {
          console.log('Using first product instead:', firstProduct.id, firstProduct.productName);
          return firstProduct.id;
        } else {
          console.error('No products found in the system');
          return 1; // ‡πÉ‡∏ä‡πâ ID=1 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö)
        }
      } catch (dbError) {
        console.error('Error finding first product:', dbError);
        return 1; // ‡πÉ‡∏ä‡πâ ID=1 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ productId ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    try {
      const product = await prisma.product.findUnique({
        where: {
          id: productId
        }
      });
      
      if (!product) {
        console.log('Product not found with ID:', productId);
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        const firstProduct = await prisma.product.findFirst({
          orderBy: {
            id: 'asc'
          }
        });
        
        if (firstProduct) {
          console.log('Using first product instead:', firstProduct.id, firstProduct.productName);
          return firstProduct.id;
        } else {
          console.error('No products found in the system');
          return 1; // ‡πÉ‡∏ä‡πâ ID=1 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö)
        }
      }
      
      console.log('Found product with ID:', productId, product.productName);
      return productId;
    } catch (dbError) {
      console.error('Error checking product ID:', dbError);
      return 1; // ‡πÉ‡∏ä‡πâ ID=1 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    }
  } catch (error) {
    console.error('Error transforming productId:', error);
    return 1; // ‡πÉ‡∏ä‡πâ ID=1 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö)
  }
}

// Webhook endpoint
export async function POST(request: NextRequest) {
  try {
    const body = await request.text();
    const headersList = await headers();
    const signature = headersList.get('stripe-signature') || '';
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö webhook signature ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≤‡∏Å Stripe
    let event: Stripe.Event;
    try {
      event = stripe.webhooks.constructEvent(
        body,
        signature,
        process.env.STRIPE_WEBHOOK_SECRET || ''
      );
    } catch (err) {
      console.error('Webhook signature verification failed:', err);
      return NextResponse.json(
        { error: 'Webhook signature verification failed' },
        { status: 400 }
      );
    }
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ event ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    switch (event.type) {
      case 'checkout.session.completed': {
        const sessionData = event.data.object as Stripe.Checkout.Session;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ session id ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!sessionData.id) {
          console.error('No session ID found in webhook event');
          return NextResponse.json(
            { error: 'No session ID found in webhook event' },
            { status: 400 }
          );
        }
        
        // ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å metadata
        const metadata = sessionData.metadata || {};
        const orderId = metadata.order_id || '';
        const orderNumber = metadata.order_number || '';
        
        console.log('Webhook received: checkout.session.completed', {
          sessionId: sessionData.id,
          orderId,
          orderNumber
        });
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Order ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
        // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å stripeSessionId
        // 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å metadata.order_id 
        // 3. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å metadata.order_number
        let order = null;
        
        // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å stripeSessionId
        order = await prisma.order.findFirst({
          where: {
            stripeSessionId: sessionData.id,
          },
          include: {
            orderItems: true,
            customerInfo: true,
            shippingInfo: true
          }
        });
        
        // 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å order_id ‡πÉ‡∏ô metadata
        if (!order && orderId) {
          try {
            const orderIdNum = parseInt(orderId);
            if (!isNaN(orderIdNum)) {
              order = await prisma.order.findUnique({
                where: {
                  id: orderIdNum
                },
                include: {
                  orderItems: true,
                  customerInfo: true,
                  shippingInfo: true
                }
              });
              
              // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö order ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ stripeSessionId ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï
              if (order && !order.stripeSessionId) {
                await prisma.order.update({
                  where: { id: order.id },
                  data: { stripeSessionId: sessionData.id }
                });
              }
            }
          } catch (error) {
            console.error(`Error finding order by ID ${orderId}:`, error);
          }
        }
        
        // 3. ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å order_number ‡πÉ‡∏ô metadata
        if (!order && orderNumber) {
          order = await prisma.order.findFirst({
            where: {
              orderNumber: orderNumber
            },
            include: {
              orderItems: true,
              customerInfo: true,
              shippingInfo: true
            }
          });
          
          // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö order ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ stripeSessionId ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï
          if (order && !order.stripeSessionId) {
            await prisma.order.update({
              where: { id: order.id },
              data: { stripeSessionId: sessionData.id }
            });
          }
        }
        
        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏ö Order ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        if (order) {
          console.log(`Found order with ID: ${order.id}, orderNumber: ${order.orderNumber}, updating payment status`);
          
          // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
          let paymentMethod = 'CREDIT_CARD' as PaymentMethod; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
          let stripePaymentMethodType = 'card'; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å payment_method_types ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
          if (sessionData.payment_method_types?.includes('promptpay')) {
            paymentMethod = 'PROMPTPAY' as PaymentMethod;
            stripePaymentMethodType = 'promptpay';
          }
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å payment_method_types ‡πÉ‡∏ô metadata
          if (metadata.payment_method_types) {
            // ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô array ‡∏´‡∏£‡∏∑‡∏≠ string
            const paymentMethodTypes = typeof metadata.payment_method_types === 'string'
              ? metadata.payment_method_types.split(',')
              : Array.isArray(metadata.payment_method_types) 
                ? metadata.payment_method_types 
                : [metadata.payment_method_types];
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ method ‡∏≠‡∏∞‡πÑ‡∏£‡∏à‡∏£‡∏¥‡∏á‡πÜ
            if (paymentMethodTypes.includes('promptpay') && 
                (metadata.payment_method === 'promptpay' || metadata.payment_type === 'promptpay')) {
              paymentMethod = 'PROMPTPAY' as PaymentMethod;
              stripePaymentMethodType = 'promptpay';
            } else if ((paymentMethodTypes.includes('card') || paymentMethodTypes.includes('credit_card')) && 
                      (metadata.payment_method === 'card' || metadata.payment_type === 'card')) {
              paymentMethod = 'CREDIT_CARD' as PaymentMethod;
              stripePaymentMethodType = 'card';
            } else if (paymentMethodTypes.includes('promptpay')) {
              // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏Ñ‡πà promptpay ‡πÉ‡∏ô payment_method_types ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô payment_method ‡∏´‡∏£‡∏∑‡∏≠ payment_type
              paymentMethod = 'PROMPTPAY' as PaymentMethod;
              stripePaymentMethodType = 'promptpay';
            } else if (paymentMethodTypes.includes('card')) {
              // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏Ñ‡πà card ‡πÉ‡∏ô payment_method_types ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô payment_method ‡∏´‡∏£‡∏∑‡∏≠ payment_type
              paymentMethod = 'CREDIT_CARD' as PaymentMethod;
              stripePaymentMethodType = 'card';
            }
          }
        
          // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
          await prisma.order.update({
            where: {
              id: order.id,
            },
            data: {
              paymentStatus: 'CONFIRMED',
              status: 'PAID',
              paymentMethod: paymentMethod,
              stripePaymentMethodType: stripePaymentMethodType,
              updatedAt: getBangkokDateTime(),
            },
          });
        
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
          let paymentInfo = await prisma.paymentInfo.findFirst({
            where: {
              orderId: order.id,
            },
          });
          
          if (paymentInfo) {
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            await prisma.paymentInfo.update({
              where: {
                id: paymentInfo.id,
              },
              data: {
                status: 'CONFIRMED',
                paymentDate: getBangkokDateTime(),
                transactionId: sessionData.id,
                paymentMethod: paymentMethod,
                bankName: paymentMethod === 'PROMPTPAY' ? '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå' : '‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï',
                slipUrl: null,
                updatedAt: getBangkokDateTime(),
              },
            });
          } else {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà
            await prisma.paymentInfo.create({
              data: {
                orderId: order.id,
                paymentMethod: paymentMethod,
                transactionId: sessionData.id,
                amount: parseFloat(order.totalAmount.toString()),
                status: 'CONFIRMED',
                paymentDate: getBangkokDateTime(),
                bankName: paymentMethod === 'PROMPTPAY' ? '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå' : '‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï',
                slipUrl: null,
                createdAt: getBangkokDateTime(),
                updatedAt: getBangkokDateTime(),
              },
            });
          }
          
          console.log(`Updated payment status for order: ${order.id}`);
          
          // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
          try {
            const orderData = {
              ...order,
              items: order.orderItems.map((item: DbOrderItem) => ({
                productId: item.productId,
                productName: item.productName,
                productImg: item.productImg,
                quantity: item.quantity,
                unitPrice: parseFloat(item.unitPrice.toString())
              })),
              discount: parseFloat(order.discount.toString()),
              discountCode: order.discountCode,
              stripePaymentMethodType: stripePaymentMethodType
            };
            
            console.log('Sending email notification for Stripe payment');
            const emailResult = await sendOrderConfirmationEmail(orderData);
            if (!emailResult.success) {
              console.warn('Payment confirmed but email sending failed:', emailResult.message);
            }
          } catch (emailError) {
            console.error('Error sending payment confirmation email:', emailError);
            // ‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ error ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          }
          
          // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord
          if (process.env.DISCORD_WEBHOOK_URL) {
            try {
              // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á notification ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
              const paymentInfo = await prisma.paymentInfo.findFirst({
                where: { orderId: order.id },
                orderBy: { updatedAt: 'desc' }
              });
    
              let discordSent = false;
              
              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Discord notification ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
              if (paymentInfo) {
                // ‡∏ñ‡πâ‡∏≤ transactionId ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö payment_intent.id ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô CONFIRMED ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                if (paymentInfo.transactionId === sessionData.id && paymentInfo.status === 'CONFIRMED') {
                  console.log(`Discord notification already sent for order ${order.id} with session ${sessionData.id}`);
                  discordSent = true;
                }
              }
              
              // ‡∏™‡πà‡∏á Discord notification ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á
              if (!discordSent) {
                console.log(`Sending Discord notification for order ${order.id} with session ${sessionData.id}`);
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô promptpay ‡∏´‡∏£‡∏∑‡∏≠ card ‡∏à‡∏£‡∏¥‡∏á‡πÜ
                const isPromptpay = paymentMethod === 'PROMPTPAY' || 
                                   (order.stripePaymentMethodType === 'promptpay');
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Discord embed
                const orderDataForDiscord = {
                  ...order,
                  items: order.orderItems.map((item: DbOrderItem) => ({
                    productId: item.productId,
                    productName: item.productName,
                    quantity: item.quantity,
                    unitPrice: parseFloat(item.unitPrice.toString())
                  })),
                  customerInfo: order.customerInfo || {},
                  shippingInfo: order.shippingInfo || {},
                  paymentMethod: isPromptpay ? 'PROMPTPAY' : 'CREDIT_CARD',
                  discount: parseFloat(order.discount.toString()),
                  discountCode: order.discountCode,
                  stripePaymentMethodType: paymentMethod === 'PROMPTPAY' ? 'promptpay' : 'card'
                };
                
                // ‡πÉ‡∏ä‡πâ createOrderNotificationEmbed ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡πÄ‡∏≠‡∏á
                const paymentEmbed = await createOrderNotificationEmbed(orderDataForDiscord);
                
                console.log('Sending Discord notification for Stripe payment - DIRECT', {
                  webhookUrl: !!process.env.DISCORD_WEBHOOK_URL,
                  orderNumber: order.orderNumber,
                  sessionId: sessionData.id,
                  hasItems: order.orderItems?.length > 0
                });
                
                // ‡∏™‡πà‡∏á Discord notification
                const discordResult = await sendDiscordNotification(paymentEmbed);
                console.log('Discord notification result:', discordResult ? 'success' : 'failed');
                
                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á Discord notification ‡πÅ‡∏•‡πâ‡∏ß
                if (discordResult) {
                  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï paymentInfo ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                  if (paymentInfo) {
                    await prisma.paymentInfo.update({
                      where: { id: paymentInfo.id },
                      data: {
                        updatedAt: getBangkokDateTime()
                      }
                    });
                    
                    console.log(`Updated payment info ${paymentInfo.id} with discord notification status for order ${order.id}`);
                  }
                }
              }
            } catch (discordError) {
              console.error('Error in Discord notification process:', discordError);
            }
          }
          
          return NextResponse.json({ success: true });
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á pending_payment
          console.log(`No order found for session ID: ${sessionData.id} or in metadata`);
          
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á pending_payment ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
          try {
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å metadata
            const customerName = metadata.customer_name || '';
            const customerEmail = metadata.customer_email || '';
            const customerPhone = metadata.customer_phone || '';
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á pending_payment
            await prisma.pendingPayment.create({
              data: {
                charge_id: sessionData.id,
                payment_method: sessionData.payment_method_types?.includes('promptpay') ? 'PROMPTPAY' as PaymentMethod : 'CREDIT_CARD' as PaymentMethod,
                amount: sessionData.amount_total ? sessionData.amount_total / 100 : 0,
                status: 'CONFIRMED',
                metadata: sessionData.metadata || {},
                customer_name: customerName,
                customer_email: customerEmail,
                customer_phone: customerPhone,
                created_at: getBangkokDateTime(),
                updated_at: getBangkokDateTime()
              }
            });
            
            console.log(`Created pending_payment for session ID: ${sessionData.id}`);
          } catch (pendingPaymentError) {
            console.error('Error creating pending_payment:', pendingPaymentError);
          }
          
          return NextResponse.json(
            { message: 'Payment received but no order found. Created pending_payment record.' },
            { status: 200 }
          );
        }
      }
      
      case 'payment_intent.succeeded': {
        const paymentIntent = event.data.object as Stripe.PaymentIntent;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á
        let paymentMethod = 'CREDIT_CARD' as PaymentMethod; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        let paymentMethodType = 'card'; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å payment_method_types ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        if (paymentIntent.payment_method_options) {
          if (paymentIntent.payment_method_options.promptpay) {
            paymentMethod = 'PROMPTPAY' as PaymentMethod;
            paymentMethodType = 'promptpay';
          } else if (paymentIntent.payment_method_options.card) {
            paymentMethod = 'CREDIT_CARD' as PaymentMethod;
            paymentMethodType = 'card';
          }
        }
        
        console.log(`Webhook: Payment intent succeeded: ${paymentIntent.id}, method: ${paymentMethod}`);
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ session ID ‡∏à‡∏≤‡∏Å metadata ‡∏Ç‡∏≠‡∏á payment intent
        const metadata = paymentIntent.metadata || {};
        const sessionId = paymentIntent.id || '';
        const orderId = metadata.order_id || '';
        const orderNumber = metadata.order_number || '';
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Order ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡πÉ‡∏ä‡πâ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö checkout.session.completed
        let order = null;
        
        // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å orderId ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô metadata
        if (orderId) {
          try {
            const orderIdNum = parseInt(orderId);
            if (!isNaN(orderIdNum)) {
              order = await prisma.order.findFirst({
                where: {
                  id: orderIdNum
                },
                include: {
                  orderItems: true,
                  customerInfo: true,
                  shippingInfo: true
                }
              });
            }
          } catch (error) {
            console.error(`Error finding order by ID ${orderId}:`, error);
          }
        }
        
        // 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏≤‡∏Å orderId ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å orderNumber
        if (!order && orderNumber) {
          order = await prisma.order.findFirst({
            where: {
              orderNumber: orderNumber
            },
            include: {
              orderItems: true,
              customerInfo: true,
              shippingInfo: true
            }
          });
        }
        
        // 3. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏≤‡∏Å orderNumber ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å stripeSessionId
        if (!order && sessionId) {
          order = await prisma.order.findFirst({
            where: {
              stripeSessionId: sessionId
            },
            include: {
              orderItems: true,
              customerInfo: true,
              shippingInfo: true
            }
          });
        }
        
        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏ö Order ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        if (order) {
          console.log(`Found order: ${order.orderNumber} for payment intent: ${paymentIntent.id}, updating payment status`);
          
          // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
          await prisma.order.update({
            where: {
              id: order.id
            },
            data: {
              paymentStatus: 'CONFIRMED',
              status: 'PAID',
              paymentMethod: paymentMethod,
              stripePaymentMethodType: paymentMethodType,
              updatedAt: getBangkokDateTime()
            }
          });
          
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
          const existingPaymentInfo = await prisma.paymentInfo.findFirst({
            where: {
              orderId: order.id
            }
          });
          
          if (existingPaymentInfo) {
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            await prisma.paymentInfo.update({
              where: {
                id: existingPaymentInfo.id
              },
              data: {
                status: 'CONFIRMED',
                paymentDate: getBangkokDateTime(),
                transactionId: paymentIntent.id,
                paymentMethod: paymentMethod,
                bankName: paymentMethod === 'PROMPTPAY' ? '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå' : '‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï',
                slipUrl: null,
                updatedAt: getBangkokDateTime(),
              }
            });
          } else {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà
            await prisma.paymentInfo.create({
              data: {
                orderId: order.id,
                paymentMethod: paymentMethod,
                transactionId: paymentIntent.id,
                amount: parseFloat(order.totalAmount.toString()),
                status: 'CONFIRMED',
                paymentDate: getBangkokDateTime(),
                bankName: paymentMethod === 'PROMPTPAY' ? '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå' : '‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï',
                slipUrl: null,
                createdAt: getBangkokDateTime(),
                updatedAt: getBangkokDateTime(),
              }
            });
          }
          
          console.log(`Updated payment status for order: ${order.id}`);
          
          // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
          try {
            const orderData = {
              ...order,
              items: order.orderItems.map((item: DbOrderItem) => ({
                productId: item.productId,
                productName: item.productName,
                productImg: item.productImg,
                quantity: item.quantity,
                unitPrice: parseFloat(item.unitPrice.toString())
              })),
              discount: parseFloat(order.discount.toString()),
              discountCode: order.discountCode,
              stripePaymentMethodType: paymentMethodType
            };
            
            console.log('Sending email notification for payment_intent.succeeded');
            const emailResult = await sendOrderConfirmationEmail(orderData);
            if (!emailResult.success) {
              console.warn('Payment confirmed but email sending failed:', emailResult.message);
            }
          } catch (emailError) {
            console.error('Error sending payment confirmation email:', emailError);
          }
          
          // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord
          if (process.env.DISCORD_WEBHOOK_URL) {
            try {
              // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á notification ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
              const paymentInfo = await prisma.paymentInfo.findFirst({
                where: { orderId: order.id },
                orderBy: { updatedAt: 'desc' }
              });
    
              let discordSent = false;
              
              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Discord notification ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
              if (paymentInfo) {
                // ‡∏ñ‡πâ‡∏≤ transactionId ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö payment_intent.id ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô CONFIRMED ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                if (paymentInfo.transactionId === paymentIntent.id && paymentInfo.status === 'CONFIRMED') {
                  console.log(`Discord notification already sent for order ${order.id} with payment intent ${paymentIntent.id}`);
                  discordSent = true;
                }
              }
              
              // ‡∏™‡πà‡∏á Discord notification ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á
              if (!discordSent) {
                console.log(`Sending Discord notification for order ${order.id} with payment intent ${paymentIntent.id}`);
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô promptpay ‡∏´‡∏£‡∏∑‡∏≠ card ‡∏à‡∏£‡∏¥‡∏á‡πÜ
                const isPromptpay = paymentMethodType === 'promptpay' || 
                                   (order.stripePaymentMethodType === 'promptpay');
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Discord embed
                const orderDataForDiscord = {
                  ...order,
                  items: order.orderItems.map((item: DbOrderItem) => ({
                    productId: item.productId,
                    productName: item.productName,
                    quantity: item.quantity,
                    unitPrice: parseFloat(item.unitPrice.toString())
                  })),
                  customerInfo: order.customerInfo || {},
                  shippingInfo: order.shippingInfo || {},
                  paymentMethod: isPromptpay ? 'PROMPTPAY' : 'CREDIT_CARD',
                  discount: parseFloat(order.discount.toString()),
                  discountCode: order.discountCode,
                  stripePaymentMethodType: paymentMethodType === 'promptpay' ? 'promptpay' : 'card'
                };
                
                // ‡πÉ‡∏ä‡πâ createOrderNotificationEmbed ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡πÄ‡∏≠‡∏á
                const paymentEmbed = await createOrderNotificationEmbed(orderDataForDiscord);
                
                console.log('Sending Discord notification for payment_intent.succeeded - DIRECT', {
                  webhookUrl: !!process.env.DISCORD_WEBHOOK_URL,
                  orderNumber: order.orderNumber,
                  paymentIntentId: paymentIntent.id,
                  hasItems: order.orderItems?.length > 0
                });
                
                // ‡∏™‡πà‡∏á Discord notification
                const discordResult = await sendDiscordNotification(paymentEmbed);
                console.log('Discord notification result:', discordResult ? 'success' : 'failed');
                
                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á Discord notification ‡πÅ‡∏•‡πâ‡∏ß
                if (discordResult) {
                  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï paymentInfo ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                  if (paymentInfo) {
                    await prisma.paymentInfo.update({
                      where: { id: paymentInfo.id },
                      data: {
                        updatedAt: getBangkokDateTime()
                      }
                    });
                    
                    console.log(`Updated payment info ${paymentInfo.id} with discord notification status for order ${order.id}`);
                  }
                }
              }
            } catch (discordError) {
              console.error('Error in Discord notification process:', discordError);
            }
          }
          
          return NextResponse.json({ success: true, received: true });
        } else {
          console.log(`No order found for payment intent: ${paymentIntent.id}, checking pending_payments...`);
          
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö Order ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô PendingPayment
          let pendingPayment = await prisma.pendingPayment.findFirst({
            where: {
              charge_id: sessionId
            }
          });
          
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö pendingPayment ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
          if (!pendingPayment) {
            console.log(`Creating new pending payment for payment intent: ${paymentIntent.id}`);
            
            pendingPayment = await prisma.pendingPayment.create({
              data: {
                charge_id: paymentIntent.id,
                payment_method: paymentMethod,
                amount: parseFloat((paymentIntent.amount / 100).toFixed(2)),
                status: 'CONFIRMED',
                metadata: paymentIntent.metadata || {},
                customer_name: paymentIntent.metadata?.customer_name || '',
                customer_email: paymentIntent.metadata?.customer_email || '',
                customer_phone: paymentIntent.metadata?.customer_phone || '',
                created_at: getBangkokDateTime(),
                updated_at: getBangkokDateTime()
              }
            });
          } else {
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï PendingPayment ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            console.log(`Updating existing pending payment: ${pendingPayment.id}`);
            
            await prisma.pendingPayment.update({
              where: {
                id: pendingPayment.id
              },
              data: {
                status: 'CONFIRMED',
                payment_method: paymentMethod,
                // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ spread metadata
                // ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏ó‡∏ô
                updated_at: getBangkokDateTime()
              }
            });
          }
          
          console.log(`Pending payment processed: ${pendingPayment.id}`);
        }
        
        // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        return NextResponse.json({ success: true, received: true });
      }
      
      default:
        console.log(`Unhandled event type: ${event.type}`);
        return NextResponse.json({ received: true });
    }
  } catch (error) {
    console.error('Webhook error:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'An unknown error occurred' },
      { status: 500 }
    );
  }
} 