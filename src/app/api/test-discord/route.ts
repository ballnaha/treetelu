import { NextResponse } from 'next/server';
import { sendDiscordNotification, createOrderNotificationEmbed } from '@/utils/discordUtils';
import { getBangkokDateTime } from '@/utils/dateUtils';

/**
 * API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Discord notification
 */
export async function GET(request: Request) {
  try {
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• webhook URL (‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)
    const webhookUrl = process.env.DISCORD_WEBHOOK_URL || '';
    const urlInfo = {
      masked: webhookUrl.length > 0 
        ? `${webhookUrl.substring(0, 10)}...${webhookUrl.substring(webhookUrl.length - 5)}` 
        : '‡πÑ‡∏°‡πà‡∏û‡∏ö URL',
      length: webhookUrl.length,
      startsWithHttps: webhookUrl.startsWith('https://'),
      isSet: webhookUrl.length > 0
    };

    console.log('Testing Discord webhook:', urlInfo);

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
    console.log('Sending simple message...');
    const simpleResult = await sendDiscordNotification('üß™ **‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô** - ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö TreeTelu - ' + new Date().toLocaleString());
    console.log('Simple message result:', simpleResult ? 'success' : 'failed');
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á embed
    console.log('Sending embed message...');
    const embedResult = await sendDiscordNotification({
      embeds: [
        {
          title: 'üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
          description: '‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö TreeTelu',
          color: 0x24B493, // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏Ç‡∏≠‡∏á TreeTelu
          fields: [
            {
              name: 'üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
              value: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord',
              inline: false
            },
            {
              name: '‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤',
              value: getBangkokDateTime().toLocaleString('th-TH'),
              inline: true
            },
            {
              name: 'üîó Webhook URL',
              value: urlInfo.isSet ? '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß (' + urlInfo.length + ' ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞)' : '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î',
              inline: true
            }
          ],
          timestamp: getBangkokDateTime().toISOString(),
          footer: {
            text: 'TreeTelu Test System'
          }
        }
      ]
    });
    console.log('Embed message result:', embedResult ? 'success' : 'failed');

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á mock order data ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ createOrderNotificationEmbed
    const mockOrderData = {
      id: 12345,
      orderNumber: 'TEST12345',
      totalAmount: 1200,
      discount: 100,
      finalAmount: 1100,
      paymentMethod: 'PROMPTPAY',
      stripePaymentMethodType: 'promptpay',
      items: [
        {
          productId: 1,
          productName: '‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
          quantity: 2,
          unitPrice: 500
        },
        {
          productId: 2,
          productName: '‡∏Å‡∏£‡∏∞‡∏ñ‡∏≤‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
          quantity: 1,
          unitPrice: 200
        }
      ],
      customerInfo: {
        firstName: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        lastName: '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
        email: 'test@example.com',
        phone: '0812345678'
      },
      shippingInfo: {
        receiverName: '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
        receiverLastname: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        receiverPhone: '0812345678',
        addressLine: '123 ‡∏ñ‡∏ô‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        tambonName: '‡∏ï‡∏≥‡∏ö‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        amphureName: '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        provinceName: '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        zipCode: '12345'
      }
    };

    console.log('Sending order notification...');
    const orderEmbed = createOrderNotificationEmbed(mockOrderData);
    const orderNotificationResult = await sendDiscordNotification(orderEmbed);
    console.log('Order notification result:', orderNotificationResult ? 'success' : 'failed');

    return NextResponse.json({
      success: true,
      webhookUrl: urlInfo,
      results: {
        simpleMessage: simpleResult !== null,
        embed: embedResult !== null,
        orderNotification: orderNotificationResult !== null
      },
      // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤
      troubleshooting: {
        checkDotEnv: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå .env ‡∏ß‡πà‡∏≤‡∏°‡∏µ DISCORD_WEBHOOK_URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
        validFormat: "URL ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö https://discord.com/api/webhooks/[webhook_id]/[webhook_token]",
        restart: "‡∏•‡∏≠‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç .env",
        testHere: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á webhook ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API ‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
      },
      message: `‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ${simpleResult !== null ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}, Embed ${embedResult !== null ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}, Order Notification ${orderNotificationResult !== null ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}`
    });
  } catch (error) {
    console.error('Error in test discord endpoint:', error);
    return NextResponse.json(
      { 
        error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Discord',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
} 